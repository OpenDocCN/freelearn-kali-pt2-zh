- en: Chapter 4. WLAN Encryption Flaws
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"640K is more memory than anyone will ever need."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Bill Gates, Founder, Microsoft* |'
  prefs: []
  type: TYPE_TB
- en: '*Even with the best of intentions, the future is always unpredictable. The
    WLAN committee designed WEP and then WPA to be foolproof encryption mechanisms
    but, over time, both these mechanisms had flaws that have been widely publicized
    and exploited in the real world.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*WLAN encryption mechanisms have had a long history of being vulnerable to
    cryptographic attacks. It started with WEP in early 2000, which eventually was
    completely broken. In recent times, WPA has been proven to contain multiple flaws
    that have been addressed and readdressed. Even though there is no public attack
    available currently to break WPA in all general conditions, there are attacks
    that are feasible under special circumstances.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Different encryption schemas in WLANs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking WEP encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking WPA encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WLAN encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WLANs transmit data over the air and thus there is an inherent need to protect
    data confidentiality. This is best done using encryption. The WLAN committee (IEEE
    802.11) formulated the following protocols for data encryption:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wired Equivalent Privacy** (**WEP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wi-Fi Protected Access** (**WPA**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wi-Fi Protected Access v2** (**WPA2**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at each of these encryption protocols and
    demonstrate various attacks against them.
  prefs: []
  type: TYPE_NORMAL
- en: WEP encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The WEP protocol was known to be flawed as early as 2000 but, surprisingly,
    it is still present in a lot of organizations and access points still ship with
    WEP enabled capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many cryptographic weaknesses in WEP and they were discovered by
    Walker, Arbaugh, Fluhrer, Martin, Shamir, KoreK, and many others. Evaluation of
    WEP from a cryptographic standpoint is not required for a basic understanding
    of how to break it. In this section, we will take a look at how to break WEP encryption
    using readily available tools on Kali Linux. This includes the entire `aircrack-ng`
    suite of tools: `airmon-ng`, `aireplay-ng`, `airodump-ng`, `aircrack-ng`, and
    others.'
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental weakness in WEP is its use of RC4 and a short IV value that
    is recycled every 224 frames. While this may appear to be a large number, there
    is a 50 percent chance of four IV reuses every 5,000 packets. To use this to our
    advantage, we generate a large amount of traffic so that we can increase the likelihood
    of IVs that have been reused and thus compare two cipher texts encrypted with
    the same IV and key.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now first set up WEP in our test lab and see how we can break it.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – cracking WEP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the given instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's first connect to our access point Wireless Lab and go to the settings
    area that deals with wireless encryption mechanisms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On my access point, this can be done by setting the **Security Mode** to **WEP**.
    We will also need to set the WEP key length. As shown in the following screenshot,
    I have set WEP to use **128bit** keys. I have set the default key to WEP **Key
    1** and the value in hex to `abcdefabcdefabcdefabcdef12` as the 128-bit WEP key.
    You can set this to whatever you choose:![Time for action – cracking WEP](graphics/B09903_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the settings are applied, the access point should now be offering WEP as
    the encryption mechanism of choice. Let's now set up the attacker machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s bring up `wlan0` by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we will run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is done to create `wlan0mon`, a monitor mode interface, as shown in the
    following screenshot. Verify that the `wlan0mon` interface has been created using
    the `ifconfig` command:![Time for action – cracking WEP](graphics/B09903_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s run `airodump-ng` to locate our lab access point using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see in the following screenshot, we are able to see the `Wireless
    Lab` access point running WEP:![Time for action – cracking WEP](graphics/B09903_04_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this exercise, we are only interested in the `Wireless Lab` network, so
    we can fine-tune our command to only see packets for this network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An example command line is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – cracking WEP](graphics/B09903_04_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We will request `airodump-ng` to save the packets into a `pcap` file using the
    `--write` flag:![Time for action – cracking WEP](graphics/B09903_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's connect our wireless client to the access point and use the WEP key
    as `abcdefabcdefabcdefabcdef12`. Once the client has successfully connected, `airodump-ng`
    should report it on the screen:![Time for action – cracking WEP](graphics/B09903_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you execute `ls` in the same directory, you will be able to see files prefixed
    with `WEPCrackingDemo-*`, as shown in the following screenshot. These are traffic
    dump files created by `airodump-ng`:![Time for action – cracking WEP](graphics/B09903_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you notice the `airodump-ng` screen, there are very few data packets listed
    under `#Data` (only `35`):![Time for action – cracking WEP](graphics/B09903_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In WEP cracking, we need a large number of data packets, encrypted with the
    same key to exploit weaknesses in the protocol. So, we will have to force the
    network to produce more data packets. To do this, we will use the `aireplay-ng`
    tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will capture ARP packets on the wireless network using `aireplay-ng` and
    inject them back into the network to simulate ARP responses. We will be starting
    `aireplay-ng` in a separate window, as shown in the next screenshot. Replaying
    these packets a few thousand times, we will generate a lot of data traffic on
    the network. Even though `aireplay-ng` does not know the WEP key, it is able to
    identify the ARP packets by looking at the size of the packets. ARP is a fixed
    header protocol; thus, the size of the ARP packets can be easily determined and
    can be used to identify them even within encrypted traffic. We will run `aireplay-ng`
    with the options that are discussed next. The `-3` option is for ARP replay, `-b`
    specifies the BSSID of our network, and `-h` specifies the client MAC address
    that we are spoofing. Don't forget to add the adapter to use. We need to do this,
    as replay attacks will only work for authenticated and associated client MAC addresses:![Time
    for action – cracking WEP](graphics/B09903_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Very soon you should see that `aireplay-ng` was able to sniff ARP packets and
    started replaying them into the network. If you encounter channel-related errors
    as I did, append `--ignore-negative-one` to your command, as shown in the following
    screenshot:![Time for action – cracking WEP](graphics/B09903_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, `airodump-ng` will also start registering a lot of data packets.
    All these sniffed packets are being stored in the `WEPCrackingDemo-*` files that
    we saw previously:![Time for action – cracking WEP](graphics/B09903_04_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's start with the actual cracking part! Fire up `aircrack-ng` with the
    option `WEPCRackingDemo-0*.cap` in a new window. This will start the `aircrack-ng`
    software and it will begin working on cracking the WEP key using the data packets
    in the file. Note that it is a good idea to have `airodump-ng` collect the WEP
    packets, `aireplay-ng` do the replay attack, and `aircrack-ng` attempt to crack
    the WEP key based on the captured packets, all at the same time. In this experiment,
    all of them are open in separate windows:![Time for action – cracking WEP](graphics/B09903_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your screen should look like the following screenshot when Aircrack-ng is working
    on the packets to crack the WEP key:![Time for action – cracking WEP](graphics/B09903_04_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The number of data packets required to crack the key is nondeterministic, but
    generally in the order of a hundred thousand or more. On a fast network (or using
    `aireplay-ng`), this should take 5-10 minutes at most. You may need to restart
    this process several times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once enough data packets have been captured and processed, `aircrack-ng` should
    be able to break the key. Once it does, it proudly displays it in the terminal
    and exits, as shown in the following screenshot:![Time for action – cracking WEP](graphics/B09903_04_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is important to note that WEP is totally flawed and any WEP key (no matter
    how complex) will be cracked by `aircrack-ng`. The only requirement is that a
    large enough number of data packets, encrypted with this key, are made available
    to `aircrack-ng`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We set up WEP in our lab and successfully cracked the WEP key. In order to do
    this, we first waited for a legitimate client of the network to connect to the
    access point. After this, we used the `aireplay-ng` tool to replay ARP packets
    into the network. This caused the network to send ARP replay packets, thus greatly
    increasing the number of data packets sent over the air. We then used the `aircrack-ng`
    tool to crack the WEP key by analyzing cryptographic weaknesses in these data
    packets.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we can also fake an authentication to the access point using the **Shared
    Key Authentication** (**SKA**) bypass technique we learned in the last chapter.
    This can come in handy if the legitimate client leaves the network. This will
    ensure that we can spoof an authentication and association and continue to send
    our replayed packets into the network.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – fake authentication with WEP cracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous exercise, if the legitimate client had suddenly logged off the
    network, we would not have been able to replay the packets as the access point
    will refuse to accept packets from unassociated clients.
  prefs: []
  type: TYPE_NORMAL
- en: Your challenge will be to fake an authentication and association using the SKA
    bypass we learnt in the last chapter, while WEP cracking is going on. Log off
    the legitimate client from the network and verify that you are still able to inject
    packets into the network and whether the access point accepts and responds to
    them.
  prefs: []
  type: TYPE_NORMAL
- en: WPA/WPA2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WPA (or WPA v1 as it is referred to sometimes) primarily uses the **Temporal
    Key Integrity Protocol** (**TKIP**) encryption algorithm. TKIP was aimed at improving
    WEP, without requiring completely new hardware to run it. WPA2 in contrast mandatorily
    uses the AES-CCMP algorithm for encryption, which is much more powerful and robust
    than TKIP.
  prefs: []
  type: TYPE_NORMAL
- en: Both WPA and WPA2 allow either EAP-based authentication, using RADIUS servers
    (Enterprise) or a **Pre-Shared Key** (**PSK**) (personal)-based authentication
    schema.
  prefs: []
  type: TYPE_NORMAL
- en: WPA/WPA2 PSK is vulnerable to a dictionary attack. The inputs required for this
    attack are the four-way WPA handshake between client and access point, and a wordlist
    that contains common passphrases. Then, using tools such as `aircrack-ng`, we
    can try to crack the WPA/WPA2 PSK passphrase.
  prefs: []
  type: TYPE_NORMAL
- en: 'An illustration of the four-way handshake is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WPA/WPA2](graphics/B09903_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The way WPA/WPA2 PSK works is that it derives the per-session key, called the
    **Pairwise Transient Key** (**PTK**), using the PSK and five other parameters—SSID
    of network, **Authenticator Nonce** (**ANonce**), **Supplicant Nonce** (**SNonce**),
    Authenticator MAC address (access point MAC), and Suppliant MAC address (Wi-Fi
    client MAC). This key is then used to encrypt all data between the access point
    and client.
  prefs: []
  type: TYPE_NORMAL
- en: An attacker who is eavesdropping on this entire conversation by sniffing the
    air can get all five parameters mentioned in the previous paragraph. The only
    thing he does not have is the PSK. So, how is the PSK created? It is derived by
    using the WPA-PSK passphrase supplied by the user, along with the SSID. The combination
    of both of these is sent through the **Password-Based Key Derivation Function**
    (**PBKDF2**), which outputs the 256-bit shared key.
  prefs: []
  type: TYPE_NORMAL
- en: In a typical WPA/WPA2 PSK dictionary attack, the attacker would use a large
    dictionary of possible passphrases with the attack tool. The tool would derive
    the 256-bit PSK from each of the passphrases and use it with the other parameters,
    described earlier, to create the PTK. The PTK will be used to verify the **Message
    Integrity Check** (**MIC**) in one of the handshake packets. If it matches, then
    the guessed passphrase from the dictionary was correct; if not, it was incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Eventually, if the authorized network passphrase exists in the dictionary,
    it will be identified. This is exactly how WPA/WPA2 PSK cracking works! The following
    diagram illustrates the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WPA/WPA2](graphics/B09903_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next exercise, we will take a look at how to crack a WPA PSK wireless
    network. The exact same steps will be involved in cracking a WPA2-PSK network
    using CCMP (AES) as well.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – cracking WPA-PSK weak passphrase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the given instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's first connect to our access point `Wireless Lab` and set the access point
    to use WPA-PSK. We will set the WPA-PSK passphrase to `abcdefgh` so that it is
    vulnerable to a dictionary attack:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We start `airodump-ng` with the following command so that it starts capturing
    and storing all packets for our network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, we can wait for a new client to connect to the access point so that we
    can capture the four-way WPA handshake, or we can send a broadcast deauthentication
    packet to force clients to reconnect. We do the latter to speed things up. The
    same thing can happen again with the unknown channel error. Again, use `--ignore-negative-one`.
    This can also require more than one attempt:![Time for action – cracking WPA-PSK
    weak passphrase](graphics/B09903_04_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as we capture a WPA handshake, the `airodump-ng` tool will indicate
    it in the top-right corner of the screen with a WPA handshake followed by the
    access point's BSSID:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using `--ignore-negative-one`, the tool may replace the WPA handshake
    with a fixed channel message. Just keep an eye out for a quick flash of a WPA
    handshake. If we check our working directory, we should see that a `.cap` file
    has been generated:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can stop the `airodump-ng` utility now. Let's open up the capture file in
    Wireshark and view the four-way handshake. Your Wireshark terminal should look
    like the following screenshot. I have selected the first packet of the four-way
    handshake in the trace file in the screenshot. The handshake packets are the one
    whose protocol is `EAPOL`. You can filter this by typing `eapol` into the filter
    bar:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will start the actual key cracking exercise! For this, we need a dictionary
    of common words. Kali ships with many dictionary files in the `metasploit` folder
    located as shown in the following screenshot. It is important to note that, in
    WPA cracking, you are just as good as your dictionary. Kali ships with some dictionaries,
    but these may be insufficient. Passwords that people choose depend on a lot of
    things. This includes things such as which country users live in, common names
    and phrases in that region, the security awareness of the users, and a host of
    other things. It may be a good idea to aggregate country- and region-specific
    wordlists, when undertaking a penetration test:![Time for action – cracking WPA-PSK
    weak passphrase](graphics/B09903_04_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now invoke the `aircrack-ng` utility with the `pcap` file as the input
    and a link to the dictionary file, as shown in the following screenshot. I have
    used `nmap.lst` which can be found in `/usr/share/wordlists/`, as shown in the
    terminal:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `aircrack-ng` utility uses the dictionary file to try various combinations
    of passphrases and tries to crack the key. If the passphrase is present in the
    dictionary file, it will eventually crack it and your screen will look similar
    to the one in the screenshot:![Time for action – cracking WPA-PSK weak passphrase](graphics/B09903_04_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please note that, as this is a dictionary attack, the prerequisite is that the
    passphrase must be present in the dictionary file you are supplying to `aircrack-ng`.
    If the passphrase is not present in the dictionary, the attack will fail!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We set up WPA-PSK on our access point with a common passphrase: `abcdefgh`.
    We then use a deauthentication attack to have legitimate clients reconnect to
    the access point. When we reconnect, we capture the four-way WPA handshake between
    the access point and the client.'
  prefs: []
  type: TYPE_NORMAL
- en: As WPA-PSK is vulnerable to a dictionary attack, we feed the capture file that
    contains the WPA four-way handshake and a list of common passphrases (in the form
    of a wordlist) to `aircrack-ng`. As the passphrase `abcdefgh` is present in the
    wordlist, `aircrack-ng` is able to crack the WPA-PSK shared passphrase. It is
    very important to note again that, in WPA dictionary-based cracking, you are just
    as good as the dictionary you have. Thus, it is important to compile a large and
    elaborate dictionary before you begin. Though Kali ships with its own dictionary,
    it may be insufficient at times and might need more words, especially taking into
    account the localization factor.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – trying WPA-PSK cracking with Cowpatty
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Cowpatty** is a tool that can also crack a WPA-PSK passphrase using a dictionary
    attack. This tool is included with Kali. I leave it as an exercise for you to
    use Cowpatty to crack the WPA-PSK passphrase.'
  prefs: []
  type: TYPE_NORMAL
- en: Also, set an uncommon passphrase that is not present in the dictionary and try
    the attack again. You will now be unsuccessful in cracking the passphrase with
    both Aircrack-ng and Cowpatty.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the same attack applies even to a WPA2 PSK network.
    I encourage you to verify this independently.
  prefs: []
  type: TYPE_NORMAL
- en: Speeding up WPA/WPA2 PSK cracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already seen in the previous section, if we have the correct passphrase
    in our dictionary, cracking WPA-Personal will work every time like a charm. So,
    why don't we just create a large elaborate dictionary of millions of common passwords
    and phrases people use? This would help us a lot and most of the time, we would
    end up cracking the passphrase. It all sounds great but we are missing one key
    component here—the time taken. One of the more CPU and time-consuming calculations
    is that of the PSK using the PSK passphrase and the SSID through the PBKDF2\.
    This function hashes the combination of both over 4,096 times before outputting
    the 256-bit PSK. The next step in cracking involves using this key along with
    parameters in the four-way handshake and verifying against the MIC in the handshake.
    This step is computationally inexpensive. Also, the parameters will vary in the
    handshake every time and hence, this step cannot be precomputed. Thus, to speed
    up the cracking process, we need to make the calculation of the PSK from the passphrase
    as fast as possible.
  prefs: []
  type: TYPE_NORMAL
- en: We can speed this up by precalculating the PSK, also called the **Pairwise Master
    Key** (**PMK**) in 802.11 standard parlance. It is important to note that, as
    the SSID is also used to calculate the PMK, with the same passphrase and with
    a different SSID, we will end up with a different PMK. Thus, the PMK depends on
    both the passphrase and the SSID.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will take a look at how to precalculate the PMK and
    use it for WPA/WPA2 PSK cracking.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – speeding up the cracking process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can pre-calculate the PMK for a given SSID and wordlist using the `genpmk`
    tool with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This creates the `PMK-Wireless-Lab` file containing the pregenerated PMK:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – speeding up the cracking process](graphics/B09903_04_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We now create a WPA-PSK network with the passphrase `abcdefgh` (present in the
    dictionary we used) and capture a WPA-handshake for that network as we did with
    the previous exercise; alternatively, use the files we used previously. We now
    use Cowpatty to crack the WPA passphrase, as shown in the following screenshot:![Time
    for action – speeding up the cracking process](graphics/B09903_04_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It takes approximately 7.18 seconds for Cowpatty to crack the key, using the
    precalculated PMKs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We now use `aircrack-ng` with the same dictionary file, and the cracking process
    takes over 22 minutes. This shows how much we are gaining because of the precalculation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We looked at various different tools and techniques to speed up WPA/WPA2-PSK
    cracking. The whole idea is to precalculate the PMK for a given SSID and a list
    of passphrases in our dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Decrypting WEP and WPA packets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all the exercises we have done till now, we cracked the WEP and WPA keys
    using various techniques. What do we do with this information? The first step
    is to decrypt data packets we have captured using these keys.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will decrypt the WEP and WPA packets in the same trace
    file that we captured over the air, using the keys we cracked.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – decrypting WEP and WPA packets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will decrypt packets from the WEP capture file we created earlier: `WEPCrackingDemo-01.cap`.
    For this, we will use another tool in the Aircrack-ng suite called `airdecap-ng`.
    We will run the following command, as shown in the following screenshot, using
    the WEP key we cracked previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – decrypting WEP and WPA packets](graphics/B09903_04_28.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The decrypted files are stored in a file named `WEPCrackingDemo-01-dec.cap`.
    We use the `tshark` utility to view the first ten packets in the file. Please
    note that you may see something different based on what you captured:![Time for
    action – decrypting WEP and WPA packets](graphics/B09903_04_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'WPA/WPA2 PSK will work in exactly the same way as with WEP, using the `airdecap-ng`
    utility, as shown in the following screenshot, with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – decrypting WEP and WPA packets](graphics/B09903_04_30.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just saw how we can decrypt WEP and WPA/WPA2-PSK encrypted packets using
    `airdecap-ng`. It is interesting to note that we can do the same using Wireshark.
    We would encourage you to explore how this can be done by consulting the Wireshark
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to WEP and WPA networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also connect to the authorized network after we have cracked the network
    key. This can come in handy during penetration testing. Logging onto the authorized
    network with the cracked key is the ultimate proof you can provide to your client
    that his network is insecure.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – connecting to a WEP network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `iwconfig` utility to connect to a WEP network, once you have the key.
    In a past exercise, we broke the WEP key—`abcdefabcdefabcdefabcdef12`:![Time for
    action – connecting to a WEP network](graphics/B09903_04_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We saw how to connect to a WEP network.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – connecting to a WPA network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the case of WPA, the matter is a bit more complicated. The `iwconfig` utility
    cannot be used with WPA/WPA2 Personal and Enterprise, as it does not support it.
    We will use a new tool called `wpa_supplicant` for this lab. To use `WPA_supplicant`
    for a network, we will need to create a configuration file, as shown in the following
    screenshot. We will name this file `wpa-supp.conf`:![Time for action – connecting
    to a WPA network](graphics/B09903_04_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will then invoke the `wpa_supplicant` utility with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will connect the device to the WPA network we just cracked. Once the connection
    is successful, `wpa_supplicant` will give you the message: **Connection to XXXX
    completed**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For both the WEP and WPA networks, once you are connected, you can use `dhclient`
    to grab a DHCP address from the network by typing `dhclient3 wlan0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default Wi-Fi utility `iwconfig` cannot be used to connect to WPA/WPA2 networks.
    The de-facto tool for this is `wpa_supplicant`. In this lab, we saw how we can
    use it to connect to a WPA network.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – WLAN encryption flaws
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. What packets are used for packet replay?
  prefs: []
  type: TYPE_NORMAL
- en: Deauthentication packet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Associated packet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Encrypted ARP packet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. When can WEP be cracked?
  prefs: []
  type: TYPE_NORMAL
- en: Always
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only if a weak key/passphrase is chosen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under special circumstances only
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only if the access point runs old software
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learnt about WLAN encryption. WEP is flawed and no matter
    what the WEP key is, with enough data packet samples: it is always possible to
    crack WEP. WPA/WPA2 is cryptographically un-crackable currently; however, under
    special circumstances, such as when a weak passphrase is chosen in WPA/WPA2-PSK,
    it is possible to retrieve the passphrase using dictionary attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at different attacks on the WLAN infrastructure,
    such as rogue access points, evil twins, bit-flipping attacks, and so on.
  prefs: []
  type: TYPE_NORMAL
