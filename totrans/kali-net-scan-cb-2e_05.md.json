["```\n        #!/usr/bin/python\n\n        import socket\n        import select\n        import sys\n\n        if len(sys.argv) != 4:\n         print \"Usage - ./banner_grab.py [Target-IP] [First Port]\n          [Last Port]\"\n         print \"Example - ./banner_grab.py 10.0.0.5 1 100\"\n         print \"Example will grab banners for TCP ports 1\n          through 100 on 10.0.0.5\"\n         sys.exit()\n\n        ip = sys.argv[1]\n        start = int(sys.argv[2])\n        end = int(sys.argv[3])\n\n        for port in range(start,end):\n         try:\n           bangrab = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n           bangrab.connect((ip, port))\n           ready = select.select([bangrab],[],[],1)\n           if ready[0]:\n             print \"TCP Port \" + str(port) + \" - \" + bangrab.recv(4096)\n             bangrab.close()\n           except:\n             pass\n\n```", "```\n        #!/usr/bin/python\n\n        from scapy.all import *\n        import logging\n        logging.getLogger(\"scapy.runtime\").setLevel(logging.ERROR)\n        import sys\n\n        if len(sys.argv) != 2:\n          print \"Usage - ./ttl_id.py [IP Address]\"\n          print \"Example - ./ttl_id.py 10.0.0.5\"\n          print \"Example will perform ttl analysis to\n           attempt to determine whether the system is Windows\n           or Linux/Unix\"\n          sys.exit()\n\n        ip = sys.argv[1]\n\n        ans = sr1(IP(dst=str(ip))/ICMP(),timeout=1,verbose=0)\n        if ans == None:\n          print \"No response was returned\"\n        elif int(ans[IP].ttl) <= 64:\n          print \"Host is Linux/Unix\"\n        else:\n          print \"Host is Windows\"\n\n```", "```\n        #!/usr/bin/python\n\n        import sys\n        import logging\n        logging.getLogger(\"scapy.runtime\").setLevel(logging.ERROR)\n        from scapy.all import *\n\n        if len(sys.argv) != 3:\n            print \"Usage - ./ACK_FW_detect.py [Target-IP]\n             [Target Port]\"\n            print \"Example - ./ACK_FW_detect.py 10.0.0.5 443\"\n            print \"Example will determine if filtering exists\n             on port 443 of host 10.0.0.5\"\n            sys.exit()\n\n        ip = sys.argv[1]\n        port = int(sys.argv[2])\n\n        ACK_response =\n        sr1(IP(dst=ip)/TCP(dport=port,flags='A'),timeout=1,verbose=0)\n        SYN_response =\n        sr1(IP(dst=ip)/TCP(dport=port,flags='S'),timeout=1,verbose=0)\n        if (ACK_response == None) and (SYN_response == None):\n            print \"Port is either unstatefully filtered or\n             host is down\"\n        elif ((ACK_response == None) or (SYN_response == None))\n         and not\n        ((ACK_response == None) and (SYN_response == None)):\n            print \"Stateful filtering in place\"\n        elif int(SYN_response[TCP].flags) == 18:\n            print \"Port is unfiltered and open\"\n        elif int(SYN_response[TCP].flags) == 20:\n            print \"Port is unfiltered and closed\"\n        else:\n            print \"Unable to determine if the port is filtered\"\n\n```"]