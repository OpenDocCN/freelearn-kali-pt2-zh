- en: Chapter 6. Attacking the Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"Security is just as strong as the weakest link."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Famous Quote in Information Security Domain* |'
  prefs: []
  type: TYPE_TB
- en: '*Most penetration testers seem to give all their attention to the WLAN infrastructure
    and don''t give the wireless client even a fraction of that. However, it is interesting
    to note that a hacker can gain access to the authorized network by compromising
    a wireless client as well.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*In this chapter, we will shift our focus from the WLAN infrastructure to the
    wireless client. The client can be either a connected or isolated unassociated
    client. We will take a look at the various attacks that can be used to target
    the client.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Honeypot and Misassociation attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Caffe Latte attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deauthentication and disassociation attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Hirte attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AP-less WPA-Personal cracking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Honeypot and Misassociation attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Normally, when a wireless client such as a laptop is turned on, it will probe
    for networks it has previously connected to. These networks are stored in a list
    called the **Preferred Network List** (**PNL**) on Windows-based systems. Also,
    along with this list, the wireless client will display any networks available
    in its range.
  prefs: []
  type: TYPE_NORMAL
- en: 'A hacker may do one or more of the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Silently monitor the probes and bring up a fake access point with the same ESSID
    the client is searching for. This will cause the client to connect to the hacker
    machine, thinking it is the legitimate network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create fake access points with the same ESSID as neighboring ones to persuade
    the user to connect to him. Such attacks are very easy to conduct in coffee shops
    and airports where a user might be looking to connect to a Wi-Fi connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use recorded information to learn about the victim's movements and habits, as
    we show in detail in a later chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These attacks are called **Honeypot attacks**, because the hacker's access point
    is misassociated with the legitimate one.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will carry out both these attacks in our lab.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – orchestrating a Misassociation attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous labs, we used a client that had connected to the `Wireless Lab`
    access point. Let's switch on the client but not the actual `Wireless Lab` access
    point. Let's now run `airodump-ng wlan0mon` and check the output. You will very
    soon find the client to be in the `not associated` mode and probing for `Wireless
    Lab` and other SSIDs in its stored profile:![Time for action – orchestrating a
    Misassociation attack](graphics/B09903_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To understand what is happening, let's run Wireshark and start sniffing on the
    `wlan0mon` interface. As expected, you might see a lot of packets that are not
    relevant to our analysis. Apply a Wireshark filter to only display Probe Request
    packets from the client MAC you are using. The filter should be `wlan.addr==<your
    mac> && wlan.fc.subtype==0x04)`:![Time for action – orchestrating a Misassociation
    attack](graphics/B09903_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see Probe Request packets only from the client for the previously
    identified SSIDs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s now start a fake access point for the network `Wireless Lab` on the
    hacker machine using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – orchestrating a Misassociation attack](graphics/B09903_06_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Within a minute or so, the client should connect to us automatically. This shows
    how easy it is to have unassociated clients:![Time for action – orchestrating
    a Misassociation attack](graphics/B09903_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will try it in competition with another router. We will create a fake
    access point `Wireless Lab` in the presence of the legitimate one. Let's turn
    our access point on to ensure that `Wireless Lab` is available to the client.
    For this experiment, we have set the access point channel to `13`. Let the client
    connect to the access point. We can verify this from `airodump-ng`, as shown in
    the following screenshot:![Time for action – orchestrating a Misassociation attack](graphics/B09903_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's bring up our fake access point with the SSID `Wireless Lab`:![Time
    for action – orchestrating a Misassociation attack](graphics/B09903_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that the client is still connected to `Wireless Lab`, the legitimate
    access point:![Time for action – orchestrating a Misassociation attack](graphics/B09903_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now send broadcast deauthentication messages to the client on behalf
    of the legitimate access point to break their connection:![Time for action – orchestrating
    a Misassociation attack](graphics/B09903_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assuming the signal strength of our fake access point `Wireless Lab` is stronger
    than the legitimate one to the client, it connects to our fake access point instead
    of the legitimate access point.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can verify this by looking at the `airbase-ng` output to see the new association
    of the client with our fake access point:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – orchestrating a Misassociation attack](graphics/B09903_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created a Honeypot using the probed list from the client and using the
    same ESSID as that of neighboring access points. In the first case, the client
    automatically connected to us, as it was searching for the network. In the latter
    case, as we were closer to the client than the real access point, our signal strength
    was higher, and the client connected to us.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – forcing a client to connect to the Honeypot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous exercise, what do we do if the client does not automatically
    connect to us? We would have to send a deauthentication packet to break the legitimate
    client-access point connection and then, if our signal strength is higher, the
    client will connect to our spoofed access point. Try this out by connecting a
    client to a legitimate access point, and then force them to connect to your Honeypot.
  prefs: []
  type: TYPE_NORMAL
- en: The Caffe Latte attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Honeypot attack, we noticed that clients will continuously probe for
    SSIDs they have connected to previously. If the client had connected to an access
    point using WEP, operating systems such as Windows cache and store the WEP key.
    The next time the client connects to the same access point, the Windows wireless
    configuration manager automatically uses the stored key.
  prefs: []
  type: TYPE_NORMAL
- en: The **Caffe Latte attack** was invented by Vivek, one of the authors of this
    book, and was demonstrated in Toorcon 9, San Diego, USA. The Caffe Latte attack
    is a WEP attack that allows a hacker to retrieve the WEP key of the authorized
    network, using just the client. The attack does not require the client to be anywhere
    close to the authorized WEP network. It can crack the WEP key using just the isolated
    client.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will retrieve the WEP key of a network from a client
    using the Caffe Latte attack.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – conducting the Caffe Latte attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's first set up our legitimate access point with WEP for the network `Wireless
    Lab` with the `ABCDEFABCDEFABCDEF12` key in hex:![Time for action – conducting
    the Caffe Latte attack](graphics/B09903_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s connect our client to it and verify that the connection is successful
    using `airodump-ng`, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – conducting the Caffe Latte attack](graphics/B09903_06_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let's unplug the access point and ensure that the client is in the unassociated
    stage and searches for the WEP network `Wireless Lab`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we use `airbase-ng` to bring up an access point with `Wireless Lab` as
    the SSID, with the parameters `airbase-ng -a <AP MAC> --essid <AP SSID> -L -W
    1 -c <channel> wlan0mon`, as shown here:![Time for action – conducting the Caffe
    Latte attack](graphics/B09903_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as the client connects to this access point, `airbase-ng` starts the
    Caffe Latte attack, as shown here:![Time for action – conducting the Caffe Latte
    attack](graphics/B09903_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now start `airodump-ng` to collect the data packets from this access point
    only, as we did before in the WEP cracking scenario `airodump-ng wlan0mon -c <AP
    channel> --essid <AP SSID> -w <prefix>`:![Time for action – conducting the Caffe
    Latte attack](graphics/B09903_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also start `aircrack-ng` as in the WEP-cracking exercise we did before to
    begin the cracking process. The command line will be `aircrack-ng filename`, where
    the filename is the name of the file created by `airodump-ng`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We were successful in retrieving the WEP key from just the wireless client without
    requiring an actual access point to be used or present in the vicinity. This is
    the power of the Caffe Latte attack.
  prefs: []
  type: TYPE_NORMAL
- en: In basic terms, a WEP access point doesn't need to prove to a client that it
    knows the WEP key in order to receive encrypted traffic. The first piece of traffic
    that will always be sent to a router upon connecting to a new network will be
    an ARP request to ask for an IP.
  prefs: []
  type: TYPE_NORMAL
- en: The attack works by bit flipping and replaying ARP packets sent by the wireless
    client post association with the fake access point created by us. These bit flipped
    ARP request packets cause more ARP response packets to be sent by the wireless
    client.
  prefs: []
  type: TYPE_NORMAL
- en: Bit-flipping takes an encrypted value and alters it to create a different encrypted
    value. In this circumstance, we can take an encrypted ARP request and create an
    ARP response with a high degree of accuracy. Once we send back a valid ARP response,
    we can replay this value over and over again to generate the traffic we need to
    decrypt the WEP key.
  prefs: []
  type: TYPE_NORMAL
- en: Note that all these packets are encrypted using the WEP key stored on the client.
    Once we are able to gather a large number of these data packets, `aircrack-ng`
    is able to recover the WEP key easily.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – practise makes you perfect!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try changing the WEP key and repeat the attack. This is a difficult attack and
    requires some practice to orchestrate successfully. It would also be a good idea
    to use Wireshark and examine the traffic on the wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: Deauthentication and disassociation attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen deauthentication attacks in previous chapters as well in the context
    of the access point. In this chapter, we will explore this attack in the context
    of the client.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lab, we will send deauthentication packets to just the client and
    break an established connection between the access point and the client.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – deauthenticating the client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's first bring our access point `Wireless Lab` online again. Let's keep it
    running on WEP to prove that, even with encryption enabled, it is possible to
    attack the access point and client connection. Let's verify that the access point
    is up using `airodump-ng`:![Time for action – deauthenticating the client](graphics/B09903_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's connect our client to this access point and verify it with `airodump-ng`:![Time
    for action – deauthenticating the client](graphics/B09903_06_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now run `aireplay-ng` to target the access point connection:![Time for
    action – deauthenticating the client](graphics/B09903_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client gets disconnected and tries to reconnect to the access point. We
    can verify this using Wireshark, just as we did earlier:![Time for action – deauthenticating
    the client](graphics/B09903_06_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now seen that, even in the presence of WEP encryption, it is possible
    to deauthenticate a client and disconnect it. The same is valid even in the presence
    of WPA/WPA2\. Let's now set our access point to WPA encryption and verify it:![Time
    for action – deauthenticating the client](graphics/B09903_06_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's connect our client to the access point and ensure that it is connected:![Time
    for action – deauthenticating the client](graphics/B09903_06_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's now run `aireplay-ng` to disconnect the client from the access point:![Time
    for action – deauthenticating the client](graphics/B09903_06_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just learnt how to disconnect a wireless client selectively from an access
    point using deauthentication frames even in the presence of encryption schemas
    such as WEP/WPA/WPA2\. This was done by sending a deauthentication packet to just
    the access point-client pair, instead of sending a broadcast deauthentication
    to the entire network.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – dissociation attack on the client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous exercise, we used a deauthentication attack to break the connection.
    Try using a disassociation packet to break the established connection between
    a client and an access point.
  prefs: []
  type: TYPE_NORMAL
- en: The Hirte attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already seen how to conduct the Caffe Latte attack. The Hirte attack extends
    the Caffe Latte attack using fragmentation techniques and allows almost any packet
    to be used.
  prefs: []
  type: TYPE_NORMAL
- en: More information on the Hirte attack is available on the Aircrack-ng website
    at [http://www.aircrack-ng.org/doku.php?id=hirte](http://www.aircrack-ng.org/doku.php?id=hirte).
  prefs: []
  type: TYPE_NORMAL
- en: We will now use `aircrack-ng` to conduct a Hirte attack on the same client.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – cracking WEP with the Hirte attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a WEP access point exactly as in the Caffe Latte attack using the `airbase-ng`
    tool. The only additional option is the `-N` option instead of the `-L` option
    to launch the Hirte attack:![Time for action – cracking WEP with the Hirte attack](graphics/B09903_06_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start `airodump-ng` in a separate window to capture packets for the `Wireless
    Lab` Honeypot:![Time for action – cracking WEP with the Hirte attack](graphics/B09903_06_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, `airodump-ng` will start monitoring this network and storing the packets
    in the `Hirte-01.cap` file:![Time for action – cracking WEP with the Hirte attack](graphics/B09903_06_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the roaming client connects to our Honeypot AP, the Hirte attack is automatically
    launched by `airbase-ng`:![Time for action – cracking WEP with the Hirte attack](graphics/B09903_06_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We start `aircrack-ng` as in the case of the Caffe Latte attack and eventually,
    the key will be cracked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We launched the Hirte attack against a WEP client that was isolated and away
    from the authorized network. We cracked the key exactly the same way as in the
    Caffe Latte attack case.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – practise, practise, practise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We recommend setting different WEP keys on the client and trying this exercise
    a couple of times to gain confidence. You may notice many times that you may have
    to reconnect the client to get it to work.
  prefs: []
  type: TYPE_NORMAL
- en: AP-less WPA-Personal cracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.html "Chapter 4. WLAN Encryption Flaws"), *WLAN Encryption
    Flaws*, we saw how to crack WPA/WPA2 PSK using `aircrack-ng`. The basic idea was
    to capture a four-way WPA handshake and then launch a dictionary attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'The million-dollar question is: would it be possible to crack WPA-Personal
    with just the client? No, access point!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s revisit the WPA cracking exercise to jog our memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![AP-less WPA-Personal cracking](graphics/B09903_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To crack WPA, we need the following four parameters from the four-way handshake—**Authenticator
    Nounce** (**ANonce**), **Supplicant Nounce** (**SNonce**), Authenticator MAC,
    and Supplicant MAC. Now, the interesting thing is that we do not need all of the
    four packets in the handshake to extract this information. We can get this information
    with four packets; packets 1 and 2 or just packets 2 and 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to crack WPA-PSK, we will bring up a WPA-PSK Honeypot and, when the
    client connects to us, only **Message 1** and **Message 2** will come through.
    As we do not know the passphrase, we cannot send **Message 3**. However, **Message
    1** and **Message 2** contain all the information required to begin the key cracking
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![AP-less WPA-Personal cracking](graphics/B09903_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – AP-less WPA cracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will set up a WPA-PSK Honeypot with the ESSID `Wireless Lab`. The `-z 2`
    option creates a WPA-PSK access point, which uses TKIP:![Time for action – AP-less
    WPA cracking](graphics/B09903_06_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's also start `airodump-ng` to capture packets from this network:![Time for
    action – AP-less WPA cracking](graphics/B09903_06_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, when our roaming client connects to this access point, it starts the handshake
    but fails to complete it after **Message 2**, as discussed previously; however,
    the data required to crack the handshake has been captured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We run the `airodump-ng` capture file through `aircrack-ng` with the same dictionary
    file as before; eventually, the passphrase is cracked as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We were able to crack the WPA key with just the client. This was possible because,
    even with just the first two packets, we have all the information required to
    launch a dictionary attack on the handshake.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – AP-less WPA cracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We recommend setting different WEP keys on the client and trying this exercise
    a couple of times to gain confidence. You may notice many times that you have
    to reconnect the client to get it to work.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – attacking the client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. What encryption key can the Caffe Latte attack recover?
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WEP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WPA
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WPA2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What would a Honeypot access point typically use?
  prefs: []
  type: TYPE_NORMAL
- en: No Encryption, Open Authentication
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No Encryption, Shared Authentication
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WEP Encryption, Open Authentication
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. Which one of the following is a DoS Attack?
  prefs: []
  type: TYPE_NORMAL
- en: Misassociation attacks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deauthentication attacks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disassociation attacks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both 2 and 3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. What does the Caffe Latte attack require?
  prefs: []
  type: TYPE_NORMAL
- en: That the wireless client be in radio range of the access point
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That the client contains a cached and stored WEP key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WEP encryption with at least 128-bit encryption
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both 1 and 3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned that even the wireless client is susceptible to
    attacks. These include the Honeypot and other Misassociation attacks; Caffe Latte
    attack, to retrieve the key from the wireless client, deauthentication and disassociation
    attacks causing a Denial of Service, Hirte attack as an alternative to retrieve
    the WEP key from a roaming client, and, finally, cracking the WPA-Personal passphrase
    with just the client.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use what we've learned so far to conduct various
    advanced wireless attacks on both the client and infrastructure side. So, quickly
    flip the page to the next chapter!
  prefs: []
  type: TYPE_NORMAL
