- en: Mitigation of OWASP Top 10 Vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: A1 – Preventing injection attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A2 – Building proper authentication and session management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A3 – Protecting sensitive data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A4 – Using XML external entities securely
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A5 – Securing access control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A6 – Basic security configuration guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A7 – Preventing Cross-Site Scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A8 – Implementing object serialization and deserialization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A9 – Where to look for known vulnerabilities on third-party components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A10 – Logging and monitoring for web applications' security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of every penetration test is to identify the possible weak spots in
    applications, servers, or networks; weak spots that could be an opportunity to
    gain sensitive information or privileged access for an attacker. The reason to
    detect such vulnerabilities is not only to know that they exist and calculate
    the risk attached to them, but also to make an effort to mitigate them or reduce
    them to the minimum risk level.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at some examples and recommendations as
    to how to mitigate the most critical web application vulnerabilities according
    to OWASP as listed at [https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project).
  prefs: []
  type: TYPE_NORMAL
- en: A1 – Preventing injection attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to OWASP, the most critical type of vulnerability found in web applications
    is the injection of some type of code, such as SQL injection, OS command injection,
    and HTML injection.
  prefs: []
  type: TYPE_NORMAL
- en: These vulnerabilities are usually caused by a poor input validation by the application.
    In this recipe, we will cover some of the best practices to use when processing
    user inputs and constructing queries that make use of them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing to do in order to prevent injection attacks is to properly
    validate inputs. On the server side, this can be done by writing your own validation
    routines, although the best option is using the language''s own validation routines,
    as they are more widely used and tested. A good example is `filter_var` in PHP
    or the validation helper in ASP.NET. For example, an email validation in PHP would
    look similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client side, validation can be achieved by creating JavaScript validation
    functions, using regular expressions. For example, an email validation routine
    would be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For SQL Injection, it is also useful to avoid concatenating input values to
    queries. Instead, you should use parameterized queries, also called prepared statements.
    Each programming language has its own version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'PHP with MySQLi:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'C#:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Java:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Following a Defense in Depth approach, it is also useful to restrict the amount
    of damage that can be done in case an injection is successful. To do this, use
    a low-privileged system user to run the database and web servers. Make sure that
    the user that the applications allow to connect to the database server is not
    a database administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable or delete the stored procedures and commands that allow an attacker
    to execute system commands or escalate privileges, such as `xp_cmdshell` in MS
    SQL Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main part of preventing any kind of code injection attack is always a proper
    input validation, both on the client side and the server side.
  prefs: []
  type: TYPE_NORMAL
- en: For SQL Injection, always use parameterized or prepared queries instead of concatenating
    SQL sentences and inputs. Parameterized queries insert function parameters in
    specified places of an SQL sentence, eliminating the need for programmers to construct
    the query themselves by concatenation.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we have used and recommended the language's built-in validation
    functions, but you can create your own if you need to validate a special type
    of input using regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from performing a correct validation, we also need to reduce the impact
    of the compromise in case somebody manages to inject some code. This is done by
    properly configuring a user's privileges in the context of an operating system
    for a web server and for both the database and OS in the context of a database
    server.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most useful tool when it comes to data validation is regular expressions.
    They also make the life of a penetration tester much easier when it comes to processing
    and filtering large amounts of information, so it is very convenient to have a
    good knowledge of them. I would recommend taking a look at the following sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.regexr.com/](http://www.regexr.com/): This is a really good site
    where we can get examples and references and test our own expressions to check
    whether a string matches or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.regular-expressions.info](http://www.regular-expressions.info):
    This site contains tutorials and examples to learn how to use regular expressions.
    It also has a useful reference on the particular implementations of the most popular
    languages and tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.princeton.edu/~mlovett/reference/Regular-Expressions.pdf](http://www.princeton.edu/~mlovett/reference/Regular-Expressions.pdf) (Regular
    Expressions The Complete Tutorial) by Jan Goyvaerts: As its title states, this
    is a very complete tutorial on RegEx, including examples in many languages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A2 – Building proper authentication and session management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flawed authentication and session management is the second most critical vulnerability
    in web applications nowadays.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication is the process whereby users prove that they are who they say
    they are; this is usually done through usernames and passwords. Some common flaws
    in this area are permissive password policies and security through obscurity (lack
    of authentication in supposedly hidden resources).
  prefs: []
  type: TYPE_NORMAL
- en: Session management is the handling of session identifiers of logged in users;
    in web servers, this is done by implementing session cookies and tokens. These
    identifiers can be implanted, stolen, or hijacked by attackers using social engineering,
    Cross-Site Scripting, CSRF, and so on. Hence, a developer must pay special attention
    to how this information is managed.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will cover some of the best practices when implementing username/password
    authentication and managing the session identifiers of logged in users.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If there is a page, form, or any piece of information in the application that
    should be viewed only by authorized users, make sure that a proper authentication
    is performed before showing it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that usernames, IDs, passwords, and all other authentication data
    are
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: case sensitive and unique for each user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Establish a strong password policy that forces the users to create passwords
    that fulfill, at minimum, the following requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access denied
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: More than 8 characters, preferably 10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of upper-case and lower-case letters
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of at least one numeric character (0-9)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use of at least one special character (space, !, &, #, %, and so on)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefer long, easy-to-remember phrases over short, complex, and unrelated series
    of characters, for example, `This Is an Acceptable Password!` is much stronger
    than `aJk5&$12!`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Forbid the username, site name, company name, or their variations (changed case,
    l33t, fragments of them) to be used as passwords.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Forbid the use of passwords available in the *Most common passwords* list at [https://www.teamsid.com/worst-passwords-2017/](https://s13639.pcdn.co/wp-content/uploads/2017/12/Top-100-Worst-Passwords-of-2017a.pdf).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Never specify in an error message whether a user exists or not or whether the
    information has the correct format. Use the same generic message for incorrect
    login attempts, non-existent users, names or passwords not matching the pattern,
    and all other possible login errors. Such a message could be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Login information is incorrect
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Invalid username or password
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Access denied
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passwords must not be stored in clear text format in the database; use a strong
    hashing algorithm, such as SHA-2, scrypt, or bcrypt, which is especially made
    to be hard to crack with GPUs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When comparing a user input against the password for login, hash the user input
    and then compare both hashing strings. Never decrypt the passwords for comparison
    with a clear text user input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Avoid basic HTML authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When possible, use multi-factor authentication (MFA), which means using more
    than one authentication factor to log in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Something you know (account details or passwords)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Something you have (tokens or mobile phones)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Something you are (biometrics)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement the use of certificates, pre-shared keys, or other password-less authentication
    protocols (OAuth2, OpenID, SAML, or FIDO) when possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When it comes to session management, it is recommended that you use the language's
    built-in session management system, Java, ASP.NET, and PHP. They are not perfect,
    but definitely provide a well-designed and widely tested mechanism, and they are
    easier to implement than any homemade version that a development team, worried
    by release dates, could make.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Always use HTTPS for login and logged in pages—obviously, by avoiding the use
    of SSL and only accepting TLS v1.1, or later, connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To ensure the use of HTTPS, **HTTP Strict Transport Security** (**HSTS**) can
    be used. It is an opt-in security feature specified by the web application through
    the use of the Strict-Transport-Security header; it redirects you to the secure
    option when `http://` is used in the URL, and prevents the overriding of the *invalid
    certificate* message, the one that shows when using Burp Suite, for example, [https://www.owasp.org/index.php/HTTP_Strict_Transport_Security](https://www.owasp.org/index.php/HTTP_Strict_Transport_Security).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Always set HTTPOnly and Secure cookies' attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set reduced, but realistic, session expiration times—not so long that an attacker
    may be able to reuse a session when the legitimate user leaves, and not so short
    that the user doesn't have the opportunity to perform the tasks that the application
    is intended to perform. Between 15 and 30 minutes is a reasonable expiration time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication mechanisms in web applications are very often reduced to a username/password
    login page. Although not the most secure option, it is the easiest for users and
    developers; when dealing with passwords, their most important aspect is their
    strength.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen throughout this book, the strength of a password is given by
    how hard it is to break, be it by brute force, dictionary, or guessing. The first
    tips in this recipe are meant to make passwords harder to brute-force by establishing
    a minimum length, and using mixed character sets harder to guess by eliminating
    the more intuitive choices (username, most common passwords, and company name),
    and harder to break if leaked by using strong hashing or encryption when storing
    them.
  prefs: []
  type: TYPE_NORMAL
- en: As for session management, the expiration time, uniqueness, strength of session
    ID (already implemented in the language's in-built mechanisms), and security in
    the cookie settings are the key considerations.
  prefs: []
  type: TYPE_NORMAL
- en: Probably the most important aspect when talking about authentication security
    probably is that no security configuration or control or strong password is secure
    enough if it can be intercepted and read through a man in the middle attack, so
    the use of a properly configured encrypted communication channel, such as TLS,
    is vital to keep our users' authentication data secure.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OWASP has a couple of really good pages on authentication and session management,
    as shown in the following list. I absolutely recommend reading and taking them
    into consideration when building and configuring a web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.owasp.org/index.php/Authentication_Cheat_Sheet](https://www.owasp.org/index.php/Authentication_Cheat_Sheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.owasp.org/index.php/Session_Management_Cheat_Sheet](https://www.owasp.org/index.php/Session_Management_Cheat_Sheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A3 – Protecting sensitive data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When an application stores or uses information that is sensitive in some way
    (credit card numbers, social security numbers, health records, passwords, and
    so on), special measures should be taken to protect it, as if it can be compromised,
    it could result in severe reputation, economic, or even legal damage to the organization
    that is responsible for its protection.
  prefs: []
  type: TYPE_NORMAL
- en: The sixth place in the OWASP Top 10 vulnerabilities is sensitive data exposure,
    and it happens when data that should be especially protected is exposed in clear
    text or is protected with weak security measures.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will cover some of the best practices when handling, communicating,
    and storing this type of data.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the sensitive data you use can be deleted after use, do it. It is much better
    to ask users every time for their credit card information than to have it stolen
    in a breach.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When processing payments, always prefer the use of a payment gateway instead
    of storing such data in your servers. Check [http://ecommerce-platforms.com/ecommerce-selling-advice/choose-payment-gateway-ecommerce-store](http://ecommerce-platforms.com/ecommerce-selling-advice/choose-payment-gateway-ecommerce-store)
    for a review of the top providers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we have the need to store sensitive information, the first protection we
    must
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: give to it is to encrypt it using a strong encryption algorithm with the corresponding
    strong keys adequately stored. Some recommended algorithms are Twofish, AES, and
    RSA.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Passwords should be stored in database hashes using one-way hashing functions,
    such as bcrypt, scrypt, or SHA-2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that all sensitive documents are only accessible by authorized users;
    don''t store them in the web server''s document root, but in an external directory,
    and access them through programming. If, for some reason, it is necessary to have
    sensitive documents inside the server''s document root, use a `.htaccess` file
    to prevent direct access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Disable the caching of pages that contain sensitive data. For example, in Apache,
    we can disable the caching of PDF and PNG files by using the following settings
    in `httpd.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Always use secure communication channels to transfer sensitive information,
    namely HTTPS with TLS or FTPS (FTP over SSH) if you allow the uploading of files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to protecting sensitive data, we need to minimize the risk of
    that data being leaked or traded; that's why, correctly encrypting the stored
    information and protecting the encryption keys is the first thing to do. If there
    is no possibility of not storing such data, it is the ideal option.
  prefs: []
  type: TYPE_NORMAL
- en: Passwords should be hashed with a one-way hashing algorithm before storing them
    in the database. This way, if they are stolen, the attacker won't be able to use
    them immediately, and if the passwords are strong and hashed with strong algorithms,
    they won't be able to break them in a realistic time.
  prefs: []
  type: TYPE_NORMAL
- en: If we store sensitive documents or sensitive data in the document root of our
    server (`/var/www/html`/ in Apache, for example), we expose such information to
    be downloaded by its URL. So it's better to store it somewhere else and make special
    server-side code to retrieve it when necessary and with a previous authorization
    check.
  prefs: []
  type: TYPE_NORMAL
- en: Also, pages such as [https://archive.org/](https://archive.org/), WayBackMachine,
    or the Google cache may pose a security problem when the cached files contain
    sensitive information and were not adequately protected in previous versions of
    the application. So it is important to not allow the caching of those kinds of
    documents.
  prefs: []
  type: TYPE_NORMAL
- en: A4 – Using XML external entities securely
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**XML external entity** (**XXE**) attacks have gained popularity in the last
    few years, so that they now appear in the fourth position of the OWASP Top 10
    2017\. XML entity-related vulnerabilities are used by attackers mainly to retrieve
    information from the target system and remotely execute code or system commands
    (XXE Injection), or to cause the interruption of services (XXE Expansion).'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will provide some suggestions on what to do when building
    a web application to prevent including vulnerabilities in the processing of XML
    external entities.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If possible, avoid the use of XML and prefer less complex formats, such as JSON.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If XML use is mandatory, disable the use of external entities in all parsers
    used by the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a certain functionality requires the use of external entities to load files
    or access remote resources, consider reimplementing the functionality using other
    technologies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Always validate data provided by users and third parties on both client and
    server sides. For data in XML format, using a white list of allowed words/elements
    and characters is a good option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep the XML interpreter (usually integrated into the development tools) adequately
    patched and updated to prevent and fix common vulnerabilities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although XML can be an extremely useful tool for developers when performing
    some tasks, it is not the best format for information exchange in web applications
    these days. This is because of its many features, external entities among them,
    and its extensible nature, which allows for the easy incorporation of objects
    or elements that may include system files and commands.
  prefs: []
  type: TYPE_NORMAL
- en: XML Parsers allow external entities and other features that may pose a security
    problem, such as Document Type Definitions (DTDs), to be disabled. Check the documentation
    of the parsing engine of your choice for more information on how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Being injection attacks, XML-related attacks can be prevented to a great extent
    by performing proper input validation, and as the expected structure is already
    known by the developers, it is possible to implement a whitelisting validation
    scheme that allows only the expected elements and rejects everything else.
  prefs: []
  type: TYPE_NORMAL
- en: Last in this recipe, XML parsers are often integrated to programming frameworks
    and languages. Ensure that the one that is used doesn't have any published vulnerability
    that could compromise the security of the application.
  prefs: []
  type: TYPE_NORMAL
- en: A5 – Securing access control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the OWASP Top 10 2013, the A7 vulnerability was *Missing Function Level Access
    Control*. For the new 2017 edition, that vulnerability is integrated into the
    broader *Broken Access Control,* and is ranked in fifth position. This new category
    covers vulnerabilities where an unauthenticated or unauthorized user can access
    restricted information by directly browsing it, or when a low privilege user is
    able to escalate privileges and even improper configurations of CORS policies.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will take a look at some recommendations to improve the access
    control of our applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assign to users/clients only those privileges that are strictly necessary for
    them to perform their duties and block access to everything else (the principle
    of least privilege).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the workflow's privileges are correctly checked and enforced at
    every step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deny all access by default and then allow users to perform tasks/access information
    after an explicit verification of authorization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Users, roles, and authorizations should be stored in a flexible media, such
    as a database or a configuration file, so that they can be added, deleted, or
    updated. Do not hardcode them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, *security through obscurity* is not a good posture to take.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not uncommon for the developers to check for authorization only at the
    beginning of a workflow and assume that the following tasks will be authorized
    for the user. An attacker may try to call a function, URL, or resource that is
    an intermediate step of the flow and achieve it because of a lack of control.
  prefs: []
  type: TYPE_NORMAL
- en: Concerning privileges, denying all by default is a best practice. If we don't
    know whether certain users are allowed to execute a function, then they are not
    allowed. Turn your privilege tables into grant tables. If there is no explicit
    grant for a user on a function, deny any access.
  prefs: []
  type: TYPE_NORMAL
- en: When assigning permissions to users and/or designing user roles, always follow
    the principle of least privilege ([https://en.wikipedia.org/wiki/Principle_of_least_privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege)).
  prefs: []
  type: TYPE_NORMAL
- en: When building or implementing an access control mechanism for your application's
    functions, store all the grants in a database or in a configuration file (a database
    is a better choice).
  prefs: []
  type: TYPE_NORMAL
- en: If user roles and privileges are hardcoded, they become harder to maintain and
    to change
  prefs: []
  type: TYPE_NORMAL
- en: or update.
  prefs: []
  type: TYPE_NORMAL
- en: A6 – Basic security configuration guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Default configurations of systems, including operating systems and web servers,
    are mostly created to demonstrate and highlight their basic or most relevant features,
    not to be secure
  prefs: []
  type: TYPE_NORMAL
- en: or protect them from attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Some common default configurations that may compromise the security are the
    default administrator accounts that are created when the database, web server,
    or CMS was installed and the default administration pages and error messages with
    stack traces, among many others.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will cover the fifth most critical vulnerability in the
    OWASP top 10:'
  prefs: []
  type: TYPE_NORMAL
- en: Security Misconfiguration.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If possible, delete all the administrative applications, such as Joomla's admin,
    WordPress' admin, phpMyAdmin, or Tomcat Manager. If that is not possible, make
    them accessible from the local network only; for example, to deny access from
    outside networks to phpMyAdmin in an Apache server, modify the `httpd.conf`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'file (or the corresponding site configuration file):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will first deny access from all addresses to the `phpmyadmin` directory,
    and second, it will allow any request from the localhost and addresses beginning
    with `192.168`, which are local network addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Change all administrators' passwords for all CMSs, applications, databases,
    servers, and frameworks with others that are strong enough. Some examples of
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'such applications are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cpanel
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Joomla
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: PhpMyAdmin
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomcat manager
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable all unnecessary or unused server and application features. On a daily
    or weekly basis, new vulnerabilities are appearing on CMSs' optional modules and
    plugins. If your application doesn't require them, there is no need to have them
    active.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Always have the latest security patches and updates. In production environments,
    it may be necessary to set up test environments to prevent leaving the site inoperative
    because of updating an incompatible version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up custom error pages that don't reveal tracing information, software versions,
    programming component names, or any other debugging information. If developers
    need to keep a record of errors, or if an identifier is necessary for technical
    support, create an index with a simple ID and the error's description and show
    only the ID to the user. So when the error is reported to a support personnel,
    they will check the index and will know what type of error it was.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adopt the principle of least privilege. Every user at every level (operating
    system, database, or application), should only be able to access the information
    that is strictly required for a correct operation, never more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Taking into account the previous points, build a security configuration baseline
    and apply it to every new implementation, update, or release, and to current systems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enforce periodic security testing or auditing to help detect misconfigurations
    or missing patches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Talking about security and configuration issues, we are correct if we say *the
    devil is in the detail*. The configuration of a web server, a database server,
    a CMS, or an application should find the point of equilibrium between being completely
    usable and useful and being secure for both users and owners.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common misconfigurations in a web application is that it contains
    some kind of a web administration site that is accessible to all of the internet;
    this may not seem to be such a big issue, but if we think that an administrator
    login page is much more attractive to crooks that any contact us form as the former
    gives access to a much higher privilege level, and there are lists of known, common,
    and default passwords for almost every CMS, database, or site administration tool
    we can think of. So our first recommendations focus on not exposing these administrative
    sites to the world, and removing them if possible.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the use of a strong password and changing those that are installed by
    default (even if they are strong) should be mandatory when publishing an application
    to the internal company's network, and should be much more strenuously enforced
    when publishing to the internet. Nowadays, when we expose a server to the world,
    the first traffic it receives is port scans, login page requests, and login attempts,
    even before the first user knows that the application is active.
  prefs: []
  type: TYPE_NORMAL
- en: The use of custom error pages helps the security stance because default error
    messages in web servers and web applications show too much information (from an
    attacker's point of view) about the error, the programming languages used, the
    stack trace, the database used, the operating systems, and so on. This information
    should not be exposed because it helps us understand how the application is made
    and gives the names and versions of the software used. With that information,
    an attacker can search for known vulnerabilities and craft a more efficient attack
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have a server with its resident applications and all services correctly
    configured, we can make a security baseline and apply it to all new servers to
    be configured or updated, as well as to the servers that are currently productive,
    with the proper planning and change management process.
  prefs: []
  type: TYPE_NORMAL
- en: This configuration baseline needs to be continually tested in order to consistently
    keep improving it and keep it protected from newly discovered vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: A7 – Preventing Cross-Site Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cross-Site Scripting, as seen previously, happens when the data shown to the
    user is not correctly encoded and the browser interprets it as script code and
    executes it. This also has an input validation factor, as a malicious code is
    usually inserted through input variables.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will cover the input validation and output encoding required
    for developers to prevent XSS vulnerabilities in their applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first sign of an application being vulnerable to XSS is that, in the page,
    it reflects the exact input given by the user. So try not to use user-given information
    to build output text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you need to put user-provided data in the output page, validate such data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: to prevent the insertion of any type of code. We already saw how to do that
    in the
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*A1 - Preventing injection attacks* section.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If, for some reason, the user is allowed to input special characters or code
    fragments, sanitize or properly encode the text before inserting it in the output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For sanitization, `filter_var` can be used in PHP; for example, if you want
    to have only email valid characters in the following string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For encoding, you can use `htmlspecialchars` in PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In .NET, for 4.5 and later implementations, the `System.Web.Security.AntiXss`
    namespace provides the necessary tools. For .NET Framework 4 and earlier,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: we can use the Web Protection library at [https://archive.codeplex.com/?p=wpl](https://archive.codeplex.com/?p=wpl).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, to prevent stored XSS, encode or sanitize every piece of information before
    storing it and retrieving it from the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't overlook headers, titles, CSS, and script sections of the page, as they
    are susceptible to being exploited too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from a proper input validation and not using user inputs as output information,
    sanitization and encoding are key aspects in preventing XSS.
  prefs: []
  type: TYPE_NORMAL
- en: Sanitization means removing the characters that are not allowed from the string;
    this is useful when no special characters should exist in input strings.
  prefs: []
  type: TYPE_NORMAL
- en: Encoding converts special characters to their HTML code representations, for
    example, "*&"* to "*&amp;"* or "*<"* to "*&lt;"*. Some applications allow the
    use of special characters in input strings; for them, sanitization is not an option,
    so they should encode the inputs before inserting them into the page and storing
    them in the database.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OWASP has an XSS prevention cheat sheet that is worth reading, which can be
    found at [https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet).
  prefs: []
  type: TYPE_NORMAL
- en: A8 – Implementing object serialization and deserialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Serialization is the process of transforming a data structure or object into
    a format that can be transmitted, in our case, within an HTTP request or response.
    Deserialization is the opposite process.
  prefs: []
  type: TYPE_NORMAL
- en: When an object is serialized, let's say, to a JSON string, and sent from a server
    to a client or vice versa, an attacker can see and understand the contents of
    the object and change them so that when the other end receives the serialized
    object and deserializes it to put it back into an object format, it interprets
    the changed content as executable code and executes it. This is the most common
    scenario of a deserialization attack.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see the measures that developers should take in order
    to make their applications more secure when implementing a serialization/deserialization
    mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If possible, you should prefer not to use serialization/deserialization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement integrity checks such as digital signatures (MD5, SHA-2) on all serialized
    objects received on both the client and server sides so that if any object has
    been tampered with, it is rejected by the application before any processing or
    deserialization happens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run deserialization code for low-privilege users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log and monitor serialization and deserialization processes and all of their
    errors and warnings. Use the monitoring system as an input to the security monitoring
    process in order to generate the appropriate alerts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with many other cases that use of a complex technology, if it is not properly
    configured and implemented, it may lead to the weakening of the security posture
    of an application. Evaluate whether such a technology is strictly necessary or
    the best choice available, and if it is not, do not use it.
  prefs: []
  type: TYPE_NORMAL
- en: By hashing or generating a checksum of the outgoing object and checking that
    value when an object is received, the application will be able to identify when
    an object has been modified by the user or some entity in the middle and then
    discard it to prevent security risks.
  prefs: []
  type: TYPE_NORMAL
- en: Following the Security in Depth philosophy, if a serialization attack is successful
    and the attacker gains command execution on our server, the user under which the
    malicious commands are executed should have the lower possible privilege level
    so that no extra damage is made.
  prefs: []
  type: TYPE_NORMAL
- en: In case of a security incident, it is of vital importance that the application
    holds logs of the serialization and deserialization processes so that professionals
    investigating the incident can use them to figure out the attack vectors used
    and further propose ways to prevent a similar incident from happening again.
  prefs: []
  type: TYPE_NORMAL
- en: A9 – Where to look for known vulnerabilities on third-party components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today's web applications are no longer the work of a single developer nor of
    a single development team; nowadays, developing a functional, user-friendly, attractive-looking
    web application implies the use of third-party components, such as programming
    libraries, APIs to external services (Facebook, Google, and Twitter), development
    frameworks, and many other components in which programming, testing, and patching
    have very little or no relevance.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, these third-party components are found vulnerable to attacks and
    they transfer those vulnerabilities to our applications. Many of the applications
    that implement vulnerable components take a long time to be patched, representing
    a weak spot in an entire organization's security. That's why, OWASP classifies
    the use of third-party components with known vulnerabilities as the ninth most
    critical threat to a Web application's security.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will take a look at where to search to figure out whether
    some component that we are using has known vulnerabilities and we will look at
    some examples of such vulnerable components.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a first suggestion, always prefer a known software, which is supported and
    widely used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stay updated about security updates and patches released for the third-party
    components your application uses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A good place to start the search for vulnerabilities in some specific component
    is the manufacturer's website; they usually have a *Release Notes* section where
    they publish which bug or vulnerabilities each version corrects. Here, we can
    look for the version we are using (or newer ones) and check whether there is some
    known issue patched or left unpatched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, manufacturers often have security advisory sites, such as Microsoft ([https://technet.microsoft.com/library/security/](https://technet.microsoft.com/library/security/)),
    Joomla ([https://developer.joomla.org/security-centre.html](https://developer.joomla.org/security-centre.html)),
    and Oracle ([http://www.oracle.com/technetwork/topics/security/alerts-086861.html](http://www.oracle.com/technetwork/topics/security/alerts-086861.html)).
    We can use these to stay updated about the software we are using in our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are also vendor-independent sites that are devoted to informing us about
    vulnerabilities and security problems. A very good one, which centralizes information
    from various sources, is CVE Details ([http://www.cvedetails.com/](http://www.cvedetails.com/)).
    Here we can search for almost any vendor or product and list all its known vulnerabilities
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (or at least the ones that made it to a CVE number) and results by year, version,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and CVSS score.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, sites where hackers publish their exploits and findings are a good place
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: to be informed about vulnerabilities in the software we use. The most popular
    are Exploit DB ([https://www.exploit-db.com/](https://www.exploit-db.com/)), Full
    disclosure mailing list ([http://seclists.org/fulldisclosure/](http://seclists.org/fulldisclosure/)),
    and the files section on Packet Storm ([https://packetstormsecurity.com/files/](https://packetstormsecurity.com/files/)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once we have found a vulnerability in some of our software components, we must
    evaluate if it is really necessary for our application or can be removed. If it
    can't, we need to plan a patching process, as soon as possible. If there is no
    patch or workaround available and the vulnerability is one of high impact, we
    must start to look for a replacement to that component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before considering the use of a third-party software component in our application,
    we must look for its security information and check whether there is a more stable
    or secure version or alternative to the one we intend to use.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have chosen one and have included it in our application, we need to
    keep it updated. Sometimes, it may involve version changes and no backward compatibility,
    but that is a price we have to pay if we want to stay secure, or it may involve
    the implementation of a **Web Application Firewall** (**WAF**) or an **Intrusion
    Prevention System** (**IPS**) to protect against attacks if we cannot update or
    patch a high-impact vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from being useful when performing penetration testing, the exploit download
    and vulnerability disclosure sites can be taken advantage of by a systems administrator
    to know what attacks to expect, how will they be, and how to protect the applications
    from them.
  prefs: []
  type: TYPE_NORMAL
- en: A10 – Logging and monitoring for web applications' security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping activity logs for applications' analytics or keeping error logs for
    debugging purposes are very different to when the aim is to improve the security
    of the information and the privacy of the users, as Incident Response teams should
    be able to rebuild the path followed by an attacker that manages to breach the
    application's security, and the security monitoring equipment should be able to
    interpret and process logged information so that it is able to generate alerts
    of possible security issues in nearly real time; all of this needs to be done
    while protecting the users' privacy by not storing any sensitive or personally
    identifiable information about them.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will cover the key aspects to consider when designing and
    implementing the logging mechanisms of a web application and its monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .Ensure that no sensitive or personally identifiable information of users or
    the company (real names, addresses, passwords, credit card information, phone
    numbers, and so on ) is logged.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additional to application-specific operations and events, log all operations
    related to user and account management, for example, creation and deletion of
    users, password change, change of privilege level, login attempts, and logouts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that all logs contain enough context of the event, date and time up to
    milliseconds, user generating the event, system environment conditions relevant
    to the event, and entities involved, such as database records, modules, other
    users, and client used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement a centralized system for gathering, processing, and analyzing logs
    and generating security alerts based on that analysis (**Security Information
    and Event Management** (**SIEM**)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a team dedicated to monitor and respond to security incidents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement incident response and incident recovery plans so that when an attack
    is detected or a security breach occurs, you have a standardized procedure to
    follow in order to recover as fast as possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the time, in organizations, logs are not as protected as databases are,
    and when a breach occurs, such logs may contain impressive amounts of sensitive
    information that may allow the attackers to access other systems in the network
    because the log contained usernames and passwords or maybe collect emails and
    use them to execute a phishing campaign, or worst, those logs may contain names,
    addresses, and phone numbers of the application's users. It is very important
    for developers and security architects to keep all information like the one previously
    mentioned out of any logging and monitoring mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: By logging the appropriate set of events, an application may generate enough
    information for the team monitoring it to identify anomalous behaviors and stop
    an attack at the very moment it is happening. For this to happen, it is also required
    that the logs should contain enough context information, and, more important,
    that there exists a team dedicated to monitor in real time the network activity,
    event logs, security devices such as IDS and firewalls, and software such as antivirus
    and data leak protection agents. Also, such a team should have a well-established
    set of policies and procedures for security incident detection, response, and
    recovery.
  prefs: []
  type: TYPE_NORMAL
