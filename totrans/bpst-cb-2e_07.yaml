- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assessing Business Logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the basics of **business logic testing**, including an explanation
    of some of the more common tests performed in this area. Web penetration testing
    involves key assessments of business logic to determine how well the design of
    an application performs integrity checks, especially within sequential application
    function steps, and we will be learning how to use Burp Suite to perform such
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing business logic data validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unrestricted file upload—bypassing weak validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing process-timing attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for the circumvention of workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading malicious files—polyglots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the recipes in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP **Broken Web Applications** (**BWA**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Mutillidae link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP WebGoat link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP **Damn Vulnerable Web Application** (**DVWA**) link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox browser using FoxyProxy add-on or Burp Suite browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing business logic data validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business logic data validation errors occur due to a lack of server-side checks,
    especially in a sequence of events such as shopping cart checkouts. If design
    flaws such as thread issues are present, those flaws may allow an attacker to
    modify or change their shopping cart contents or prices prior to purchasing them,
    to lower the price paid.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the **OWASP WebGoat** application and Burp, we will exploit a business
    logic design flaw to purchase many large ticket items for a very cheap price.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ensure the **owaspbwa** VM is running. Select the **OWASP WebGoat** application
    from the initial landing page of the VM. The landing page will be configured to
    an IP address specific to your machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – VM landing page](image/B21173_07_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – VM landing page
  prefs: []
  type: TYPE_NORMAL
- en: 'After you’ve clicked the **OWASP WebGoat** link, you will be prompted for some
    login credentials. Use these credentials—username: **guest**; password: **guest**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After authentication, click the **Start WebGoat** button to access the application
    exercises:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Starting the WebGoat application](image/B21173_07_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Starting the WebGoat application
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the WebGoat application seems to work better in Firefox with FoxyProxy
    set to send traffic to Burp Suite instead of using the Burp Suite browser. Click
    **Concurrency** | **Shopping Cart Concurrency Flaw** from the left-hand menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Shopping Cart Concurrency Flaw](image/B21173_07_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Shopping Cart Concurrency Flaw
  prefs: []
  type: TYPE_NORMAL
- en: The exercise explains there is a thread issue in the design of the shopping
    cart that will allow us to purchase items at a lower price. Let’s exploit the
    design flaw!
  prefs: []
  type: TYPE_NORMAL
- en: 'Add **1** to the **Quantity** box for the **Sony - Vaio with Intel Centrino**
    item. Click the **Update** **Cart** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Adding one Sony Vaio to the cart](image/B21173_07_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Adding one Sony Vaio to the cart
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to Burp Suite’s **Proxy** | **HTTP history** tabs. Find the cart request,
    right-click, and click **Send** **to Repeater**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Send to Repeater](image/B21173_07_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – Send to Repeater
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside Burp Suite’s **Repeater** tab, change the **QTY3** parameter from **1**
    to **10**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Increasing the quantity to three](image/B21173_07_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Increasing the quantity to three
  prefs: []
  type: TYPE_NORMAL
- en: 'Stay in Burp Suite’s **Repeater** tab and, in the request pane, right-click
    and select **Request in browser** | **In current** **browser session**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Viewing the request in the current browser session](image/B21173_07_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Viewing the request in the current browser session
  prefs: []
  type: TYPE_NORMAL
- en: 'A popup displays the modified request. Click the **Copy** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Copying the link](image/B21173_07_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Copying the link
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the same Firefox browser containing the shopping cart, open a new tab
    and paste in the URL that you copied into the clipboard in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Pasting the link into a new browser tab](image/B21173_07_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Pasting the link into a new browser tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Press the *Enter* key to see the request resubmitted with a modified quantity
    of **10**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Seeing the updated quantity](image/B21173_07_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Seeing the updated quantity
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the original tab containing your shopping cart (the cart with the
    original quantity of **1**). Click the **Purchase** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Purchasing the item on the original tab](image/B21173_07_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Purchasing the item on the original tab
  prefs: []
  type: TYPE_NORMAL
- en: 'At the next screen, before clicking the **Confirm** button, switch to the second
    tab and update the cart again, but this time with our new quantity of **10**,
    and click on **Update Cart**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Updating the cart on the second tab](image/B21173_07_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Updating the cart on the second tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the first tab, and click the **Confirm** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Confirming the purchase on the first tab](image/B21173_07_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – Confirming the purchase on the first tab
  prefs: []
  type: TYPE_NORMAL
- en: Notice we were able to purchase 10 Sony Vaio laptops for the price of 1!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14 – All items in the cart were purchased at a lower price](image/B21173_07_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – All items in the cart were purchased at a lower price
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thread safety issues can produce unintended results. For many languages, the
    developer’s knowledge of how to declare variables and methods as thread-safe is
    imperative. Threads that are not isolated, such as the cart contents shown in
    this recipe, can result in users gaining unintended discounts on products.
  prefs: []
  type: TYPE_NORMAL
- en: Unrestricted file upload – bypassing weak validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many applications allow for files to be uploaded for various reasons. Business
    logic on the server side must include checking for acceptable files; this is known
    as **whitelisting**. If such checks are weak or only address one aspect of file
    attributes (for example, file extensions only), attackers can exploit these weaknesses
    and upload unexpected file types that may be executable on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the DVWA application and Burp, we will exploit a business logic design
    flaw in the file upload page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure the **owaspbwa** VM is running. Select **DVWA** from the initial landing
    page of the VM. The landing page will be configured to an IP address specific
    to your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the login page, use these credentials—username: **user**; password: **user**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **DVWA Security** option from the menu on the left. Change the default
    setting of **low** to **medium** and then click **Submit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Setting security to medium](image/B21173_07_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – Setting security to medium
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Upload** page from the menu on the left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.16 – Going to the Upload page](image/B21173_07_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16 – Going to the Upload page
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the page instructs users to only upload images. If we try another type
    of file other than a JPG image, we receive an error message in the upper left-hand
    corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.17 – Only images are allowed](image/B21173_07_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17 – Only images are allowed
  prefs: []
  type: TYPE_NORMAL
- en: On your local machine, create a file of any type, other than JPG. For example,
    create a Microsoft Excel file called **malicious_spreadsheet.xlsx**. It does not
    need to have any content for the purpose of this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to Burp Suite’s **Proxy** | **Intercept** tab. Turn the interceptor on
    with the **Intercept is** **on** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to Firefox, use the **Browse** button to find the **malicious_spreadsheet.xlsx**
    file on your system, and click the **Upload** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.18 – Attempting to upload an Excel spreadsheet](image/B21173_07_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18 – Attempting to upload an Excel spreadsheet
  prefs: []
  type: TYPE_NORMAL
- en: With the request paused in Burp Suite’s **Proxy** | **Intercept** tab, change
    the **Content-Type** value from **application/vnd.openxmlformats-officedocument.spreadsheetml.sheet**
    to **image/jpeg** instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the original:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Original Content-Type value](image/B21173_07_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19 – Original Content-Type value
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the modified version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.20 – Modified Content-Type value](image/B21173_07_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20 – Modified Content-Type value
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Forward** button. Now, turn the interceptor off by clicking the
    toggle button to **Intercept** **is off**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the file was uploaded successfully! We were able to bypass the weak data
    validation checks and upload a file other than an image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.21 – Spreadsheet is successfully uploaded](image/B21173_07_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21 – Spreadsheet is successfully uploaded
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to weak server-side checks, we can easily circumvent the image-only restriction
    and upload a file type of our choice. The application code only checks for content
    types matching **image/jpeg**, which is easily modified with an intercepting proxy
    such as Burp. Developers need to simultaneously whitelist both content-type as
    well as file extensions in the application code to prevent this type of exploit
    from occurring.
  prefs: []
  type: TYPE_NORMAL
- en: Performing process-timing attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By monitoring the time an application takes to complete a task, it is possible
    for attackers to gather or infer information about how an application is coded.
    For example, a login process using a valid username receives a response quicker
    than the same login process given an invalid username. This delay in response
    time leaks information related to system processes. An attacker could use a response
    time to perform account enumeration and determine valid usernames based on the
    timing of the response.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need the **common_pass.txt** wordlist from **wfuzz**,
    available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/xmendez/wfuzz](https://github.com/xmendez/wfuzz)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the path to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**wordlist** | **others** | **common_pass.txt**'
  prefs: []
  type: TYPE_NORMAL
- en: Using OWASP Mutillidae II, we will determine whether the application provides
    information leakage based on the response time from forced logins.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure Burp Suite is running, and also ensure that the **owaspbwa** VM is running
    and that Burp Suite is configured in the Firefox browser used to view **owaspbwa**
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the **owaspbwa** landing page, click the link to the OWASP Mutillidae II
    application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Firefox browser to the home of OWASP Mutillidae II (URL: **http://<your_VM_assigned_IP_address>/mutillidae/**).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the login page and log in using the username **ed** and the password **pentest**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to Burp Suite’s **Proxy** | **HTTP history** tab, find the login you
    just performed, right-click, and select **Send** **to Intruder**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.22 – Sending a POST request of the login to Repeater](image/B21173_07_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22 – Sending a POST request of the login to Repeater
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Intruder** | **Positions** tab and clear all the payload markers,
    using the **Clear §** button on the right-hand side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.23 – Clearing any suggested positions](image/B21173_07_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23 – Clearing any suggested positions
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, select the username field and click the
    **Add §** button to wrap a payload marker around that field. Also, replace the
    valid password with an invalid password instead—for example, **xx**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.24 – Adding substitution markers around the username value](image/B21173_07_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24 – Adding substitution markers around the username value
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, remove the **PHPSESSID** token. Delete the value present in this token
    (the content following the equals sign) and leave it blank. This step is very
    important because if you happen to leave this token in the requests, you will
    be unable to see the difference in the timings since the application will think
    you are already logged in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.25 – Removing the PHPSESSID cookie value](image/B21173_07_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25 – Removing the PHPSESSID cookie value
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Intruder** | **Payloads** tab. Within the **Payload Options [Simple
    list]** section, we will add some invalid values by using a wordlist from **wfuzz**
    containing common passwords (**wfuzz/wordlists/others/common_pass.txt**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.26 – Loading the wordlist](image/B21173_07_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.26 – Loading the wordlist
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll to the bottom and uncheck the checkbox in the **Payload** **encoding**
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.27 – Unchecking the box in the Payload encoding section](image/B21173_07_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.27 – Unchecking the box in the Payload encoding section
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Start attack** button. An attack results table appears. Let the
    attacks complete. From the attack results table, select **Columns** and check
    **Response received**. Check **Response completed** to add these columns to the
    attack results table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.28 – Adding two extra columns to the attack results table](image/B21173_07_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.28 – Adding two extra columns to the attack results table
  prefs: []
  type: TYPE_NORMAL
- en: Analyze the results provided. According to OWASP ([https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/04-Test_for_Process_Timing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/04-Test_for_Process_Timing)),
    the steps to perform this test include providing a valid username (that is, **ed**)
    with an invalid password and looking at the amount of time for the response to
    return from the server. Then, perform the test again using an invalid username
    and an invalid password. You are looking for a difference in response time (faster
    or slower) when the server reaches a valid username versus an invalid username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the results of our test, we see the fastest response is when the server
    is provided a valid username with an invalid password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.29 – Analyzing the results](image/B21173_07_029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.29 – Analyzing the results
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Information leakage can occur when processing error messages or through invalid
    coding paths that take longer than valid code paths. Developers must ensure the
    business logic does not give away such clues to attackers.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use a Burp Suite extension called **Timeinator** that can help us identify
    process timing attacks but with more requests for a better sample size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the Burp Suite extension from the **BApp Store** subtab. Click the
    **Install** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.30 – Installing the Timeinator extension](image/B21173_07_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.30 – Installing the Timeinator extension
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click the request we used in **Intruder** and send the same to the **Timeinator**
    plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.31 – Sending the Intruder request to Timeinator](image/B21173_07_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.31 – Sending the Intruder request to Timeinator
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside **Timeinator**, add a substitution marker around **username**. Type
    three names (**tom**, **xx**, **ed**) in the text area to be replaced in the substitution
    position:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.32 – Adding a substitution marker and payloads](image/B21173_07_032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.32 – Adding a substitution marker and payloads
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Start Attack** at the top. Once done, switch over to the **Results**
    tab of **Timeinator** to read the heat map produced. Notice the valid username
    with an invalid password has a much larger standard deviation than the other login
    attempts using invalid usernames. Due to the larger sampling size and additional
    math computations, you may feel more confident about your process timing attack
    finding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.33 – Starting the attack and analyzing the results](image/B21173_07_033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.33 – Starting the attack and analyzing the results
  prefs: []
  type: TYPE_NORMAL
- en: Testing for the circumvention of workflows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shopping cart to payment gateway interactions must be tested by web application
    penetration testers to ensure the workflow cannot be performed out of sequence.
    A payment should never be made unless verification of the cart contents is checked
    on the server side first. In the event this check is missing, an attacker can
    change the price, quantity, or both, prior to the actual purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the OWASP WebGoat application and Burp, we will exploit a business logic
    design flaw in which there is no server-side validation prior to a purchase.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure the **owaspbwa** VM is running. Select the OWASP WebGoat application
    from the initial landing page of the VM. The landing page will be configured to
    an IP address specific to your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you’ve clicked the **OWASP WebGoat** link, you will be prompted for login
    credentials. Use these credentials—username: **guest**; password: **guest**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After authentication, click the **Start WebGoat** button to access the application
    exercises.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **AJAX Security** | **Insecure Client Storage** from the left-hand menu.
    You are presented with a shopping cart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.34 – Insecure Client Storage lesson](image/B21173_07_034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.34 – Insecure Client Storage lesson
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to Burp Suite’s **Proxy** | **HTTP history** tab, click the **Filter**
    button, and ensure your **Filter by MIME type** section includes **Script**. If
    **Script** is not checked, be sure to check it now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.35 – Including Script in the traffic history](image/B21173_07_035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.35 – Including Script in the traffic history
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the Firefox browser with WebGoat and specify a quantity of **2**
    for the **Hewlett-Packard – Pavilion Notebook with Intel®** **Centrino™** item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.36 – Updating the cart with two Hewlett-Packard notebooks](image/B21173_07_036.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.36 – Updating the cart with two Hewlett-Packard notebooks
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch back to Burp Suite’s **Proxy** | **HTTP history** tab and notice the
    JavaScript (***.js**) files associated with the change you made to the quantity.
    Note a script called **clientSideValidation.js**. Make sure the status code is
    **200** and not **304** (not modified). Only the **200** status code will show
    you the source code of the script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.37 – Source code of clientSideValidation.js script](image/B21173_07_037.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.37 – Source code of clientSideValidation.js script
  prefs: []
  type: TYPE_NORMAL
- en: Select the **clientSideValidation.js** file and view its source code in the
    **Response** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that coupon codes are hardcoded within the JavaScript file. However, used
    literally as they are, they will not work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.38 – Hardcoded coupon codes](image/B21173_07_038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.38 – Hardcoded coupon codes
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep looking at the source code—notice there is a **decrypt** function found
    in the JavaScript file. We can test one of the coupon codes by sending it through
    this function. Let’s try this test back in the Firefox browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.39 – Decrypting the JavaScript function](image/B21173_07_039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.39 – Decrypting the JavaScript function
  prefs: []
  type: TYPE_NORMAL
- en: 'In the browser, bring up the developer tools (*F12*) and go to the **Console**
    tab. Paste into the console (look for the **>>** prompt) the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You may use this command to call the **decrypt** function on any of the coupon
    codes declared within the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.40 – Calling the decrypt function on coupon codes](image/B21173_07_040.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.40 – Calling the decrypt function on coupon codes
  prefs: []
  type: TYPE_NORMAL
- en: 'After pressing *Enter*, you will see the coupon code is decrypted to the word
    **GOLD**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.41 – Revealing the coupon code](image/B21173_07_041.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.41 – Revealing the coupon code
  prefs: []
  type: TYPE_NORMAL
- en: 'Place the word **GOLD** within the **Enter your coupon code** box. Notice the
    amount is now much less. Next, click the **Purchase** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.42 – Placing GOLD in the textbox to apply to the purchase](image/B21173_07_042.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.42 – Placing GOLD in the textbox to apply to the purchase
  prefs: []
  type: TYPE_NORMAL
- en: 'We receive confirmation regarding stage 1 completion. Let’s now try to get
    the purchase for free:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.43 – Stage 1 completed](image/B21173_07_043.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.43 – Stage 1 completed
  prefs: []
  type: TYPE_NORMAL
- en: Switch to Burp Suite’s **Proxy** | **Intercept** tab and turn the interceptor
    ON with the **Intercept is** **on** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to Firefox and press the **Purchase** button. While the request is paused,
    modify the $1,599.99 amount to $0.00\. Look for the **GRANDTOT** parameter to
    help you find the grand total to change. Use the **Inspector** section on the
    right-hand side to help you change the amount by highlighting the value after
    the **GRANDTOT=**, as shown in the following screenshot. Click **Apply changes**
    when you''re ready to apply the manipulation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.44 – Modifying the grand total](image/B21173_07_044.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.44 – Modifying the grand total
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Forward** button. Now, turn the interceptor off by clicking the
    toggle button to **Intercept** **is off**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to the browser and click **Purchase**. You should receive a congratulatory
    message. Note the total charged is now $0.00:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.45 – Congratulatory message](image/B21173_07_045.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.45 – Congratulatory message
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to a lack of server-side checking for both the coupon code and the grand
    total amount prior to charging the credit card, we can circumvent the prices assigned
    and set our own prices instead.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading malicious files – polyglots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Polyglot** is a term defined as something that uses several languages. If
    we carry this concept into hacking, it means the creation of an attack vector
    by using different languages as execution points. For example, attackers can construct
    valid images and embed JavaScript. The placement of the JavaScript payload is
    usually in the comments section of an image. Once the image is loaded in a browser,
    the XSS content may execute, depending upon the strictness of the content type
    declared by the web server and the interpretation of the content type by the browser.
    In this recipe, we will use a polyglot to upload a webshell disguised as an image.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the OWASP WebGoat file upload functionality, we will write a small **Java
    Server Pages** (**JSP**) webshell and upload it to the application, disguised
    as an image.
  prefs: []
  type: TYPE_NORMAL
- en: We will use some popular source code for the JSP webshell and save it in a file
    called **poly.jsp**.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure the **owaspbwa** VM is running. Select the OWASP WebGoat application
    from the initial landing page of the VM. The landing page will be configured to
    an IP address specific to your machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After you’ve clicked the **OWASP WebGoat** link, you will be prompted for login
    credentials. Use these credentials—username: **guest**; password: **guest**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After authentication, click the **Start WebGoat** button to access the application
    exercises.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Malicious Execution** | **Malicious File Execution** from the left-hand
    menu. You are presented with a file upload functionality page. The instructions
    state that only images are allowed for upload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.46 – Malicious File Execution lesson](image/B21173_07_046.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.46 – Malicious File Execution lesson
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Notepad or your favorite text editor, create a new file called **poly.jsp**
    and write the following code within the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return to the **Malicious File Execution** page and browse to the **poly.jsp**
    file you created on your local system, and then click the **Start** **Upload**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.47 – Uploading your webshell](image/B21173_07_047.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.47 – Uploading your webshell
  prefs: []
  type: TYPE_NORMAL
- en: The location of each upload can be determined by right-clicking the broken image
    displayed (that is, **Your current image**) on the page in the browser and selecting
    **Copy image link**. Then, open a new tab, pasting the link from your clipboard
    into the new tab.
  prefs: []
  type: TYPE_NORMAL
- en: '**poly.jsp** is a JSP file that is executable on this web server. You can play
    with your brand new shiny webshell by opening a new tab and navigating to the
    following URL: **http://<YOUR_VM_IP>/WebGoat/uploads/poly.jsp?cmd=ls**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice how the **ls** command gives a listing of the directory contents. Let’s
    use this webshell to help us solve the lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.48 – Opening a new tab to execute your webshell](image/B21173_07_048.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.48 – Opening a new tab to execute your webshell
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve the lab, we need to follow the instructions and create a **guest.txt**
    file in the path provided (**/var/lib/tomcat6/webapps/WebGoat/mfe_target/**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.49 – Instructions for solving the lab](image/B21173_07_049.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.49 – Instructions for solving the lab
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the tab with your webshell and give the following command for the
    **cmd** parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return to the first tab of the lesson and reload the page. A success message
    should appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.50 – Congratulatory message](image/B21173_07_050.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.50 – Congratulatory message
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to unrestricted file upload vulnerability, we can upload a malicious file
    such as a polyglot without detection from the web server. Many sites allow images
    to be uploaded, so developers must ensure such images do not carry malicious payloads
    within them. Protection in this area can be in the form of magic number checks
    or special proxy servers screening all uploads against anti-virus engines, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To read more about polyglots, please refer to the following *PortSwigger* blog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs](https://portswigger.net/blog/bypassing-csp-using-polyglot-jpegs)'
  prefs: []
  type: TYPE_NORMAL
