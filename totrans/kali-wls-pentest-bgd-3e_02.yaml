- en: Chapter 2. WLAN and Its Inherent Insecurities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"The loftier the building, the deeper the foundation must be laid."*
    |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Thomas Kempis* |'
  prefs: []
  type: TYPE_TB
- en: '*Nothing great can be built on a weak foundation, and in our context, nothing
    secure can be built on something that is inherently insecure.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*WLANs, by design, have certain insecurities that are relatively easy to exploit,
    for example, by packet spoofing, packet injection, and sniffing (this could even
    happen from far away). We will explore these flaws in this chapter.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we shall look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting WLAN frames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different frame types and subtypes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Wireshark to sniff management, control, and data frames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sniffing data packets for a given wireless network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Injecting packets into a given wireless network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting WLAN frames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As this book deals with the security aspects of wireless, we will assume that
    you already have a basic understanding of the protocol and the packet headers.
    If not, or if it's been some time since you worked on wireless, this would be
    a good time to revisit this topic again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now quickly review some basic concepts of WLANs that most of you may
    already be aware of. In WLANs, communication happens over frames. A frame would
    have the following header structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Revisiting WLAN frames](graphics/B09903_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Frame Control` field itself has a more complex structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Revisiting WLAN frames](graphics/B09903_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Type` field defines three types of WLAN frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Management frames**: Management frames are responsible for maintaining communication
    between access points and wireless clients. Management frames can have the following
    subtypes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deauthentication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Association request
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Association response
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reassociation request
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reassociation response
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Disassociation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Beacon
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Probe request
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Probe response
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Control frames**: Control frames are responsible for ensuring a proper exchange
    of data between access points and wireless clients. Control frames can have the
    following subtypes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request to Send** (**RTS**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clear to Send** (**CTS**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Acknowledgement** (**ACK**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data frames**: Data frames carry the actual data that is sent on the wireless
    network. There are no subtypes for data frames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss the security implications of each of these frames when we discuss
    different attacks in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: We will now look at how to sniff these frames over a wireless network using
    Wireshark. There are other tools—such as Airodump-NG, Tcpdump, or Tshark—that
    you can use for sniffing as well. We will, however, mostly use Wireshark in this
    book, but we encourage you to explore other tools as well. The first step to do
    this is to create a monitor mode interface. This will create an interface for
    our adapter, which allows us to read all wireless frames in the air, regardless
    of whether they are destined for us or not. In the wired world, this is popularly
    called **promiscuous mode**.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a monitor mode interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now set our wireless adapter to monitor mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Boot Kali with your adapter connected. Once you are within the console, enter
    `iwconfig` to confirm that your card has been detected and the driver has been
    loaded properly:![Time for action – creating a monitor mode interface](graphics/B09903_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `ifconfig wlan0 up` command to bring the card up (where `wlan0` is your
    adapter). Verify whether the card is up by running `ifconfig wlan0`. You should
    see the word `UP` in the first line of the output as shown in the following screenshot:![Time
    for action – creating a monitor mode interface](graphics/B09903_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To put our card into monitor mode, we will use the `airmon-ng` utility that
    is available by default on Kali. First run the `airmon-ng` command to verify whether
    it detects the available cards. You should see the `wlan0` or `wlan1` interface
    listed in the output:![Time for action – creating a monitor mode interface](graphics/B09903_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now enter the `airmon-ng start wlan0` command to create a monitor mode interface
    corresponding to the `wlan0` device. This new monitor mode interface will be named
    `wlan0mon`. (You can verify if it has been created by running `airmon-ng` without
    arguments again):![Time for action – creating a monitor mode interface](graphics/B09903_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, running `ifconfig wlan0mon` should now display a new interface called
    `wlan0mon`:![Time for action – creating a monitor mode interface](graphics/B09903_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have successfully created a monitor mode interface called `wlan0mon`. This
    interface will be used to sniff wireless packets off the air. This interface has
    been created for our wireless adapter.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – creating multiple monitor mode interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to create multiple monitor mode interfaces using the same physical
    card. Use the `airmon-ng` utility to see how you can do this.
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! We have a monitor mode interface just waiting to read some packets
    off the air. So let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will use Wireshark to sniff packets off the air using
    the `wlan0mon` monitor mode interface we just created.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – sniffing wireless packets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the following instructions to begin sniffing packets:'
  prefs: []
  type: TYPE_NORMAL
- en: Power up the access point `Wireless Lab` that we configured in [Chapter 1](ch01.html
    "Chapter 1. Wireless Lab Setup"), *Wireless Lab Setup*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Wireshark by typing `Wireshark &` in the console. Once Wireshark is running,
    navigate to **Capture** | **Options**:![Time for action – sniffing wireless packets](graphics/B09903_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select packet capture from the `wlan0mon` interface by clicking on the **Start**
    button at the bottom right of the interface as shown in the previous screenshot.
    Wireshark will begin the capture, and now you should see packets within the Wireshark
    window.![Time for action – sniffing wireless packets](graphics/B09903_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are wireless packets that your wireless adapter is sniffing off the air.
    In order to view any packet, select it in the top window and the entire packet
    will be displayed in the middle window.![Time for action – sniffing wireless packets](graphics/B09903_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the triangle in front of **IEEE 802.11 Wireless LAN** management frame
    to expand and view additional information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Look at the different header fields in the packet and correlate them with the
    WLAN frame types and subtypes you learned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just sniffed our first set of packets off the air! We launched Wireshark,
    which used the monitor mode interface, `wlan0mon` we created previously. You should
    notice, by looking at Wireshark's footer region, the speed at which the packets
    are being captured and also the number of packets captured till now.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – finding different devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wireshark traces can be a bit daunting at times; even for a reasonably populated
    wireless network, you could end up sniffing a few thousand packets. Hence, it
    is important to be able to drill down to those packets that interest us. This
    can be accomplished using filters in Wireshark. Explore how you can use these
    filters to identify unique wireless devices in the traces—both access points and
    wireless clients.
  prefs: []
  type: TYPE_NORMAL
- en: If you are unable to do this, don't worry as this is the next thing we will
    learn.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – viewing management, control, and data frames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will learn how to apply filters in Wireshark to look at management, control,
    and data frames.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please follow these instructions step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: To view all the management frames in the packets being captured, enter the filter
    `wlan.fc.type == 0` into the filter window and hit *Enter*. You can stop the packet
    capture if you want to prevent the packets from scrolling down too fast.![Time
    for action – viewing management, control, and data frames](graphics/B09903_02_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To view control frames, modify the filter expression to read `wlan.fc.type ==
    1`:![Time for action – viewing management, control, and data frames](graphics/B09903_02_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To view data frames, modify the filter expression to `wlan.fc.type == 2`:![Time
    for action – viewing management, control, and data frames](graphics/B09903_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To additionally select a subtype, use the `wlan.fc.subtype` filter. For example,
    to view all the beacon frames among all management frames, use the following filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – viewing management, control, and data frames](graphics/B09903_02_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Alternatively, you can right-click on any of the header fields in the middle
    window and then select **Apply as Filter** | **Selected** to add it as a filter:![Time
    for action – viewing management, control, and data frames](graphics/B09903_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will automatically add the correct filter expression for you in the **Filter**
    field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just learned how to filter packets in Wireshark using various filter expressions.
    This helps us monitor selected packets from devices we are interested in, instead
    of trying to analyze all the packets in the air.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we can see that the packet headers of management, control, and data frames
    are in plain text and are not encrypted. Anyone who can sniff the packets can
    read these headers. It is also important to note that it is also possible for
    a hacker to modify any of these packets and retransmit them. As there is no integrity
    or replay attack mitigation in the protocol, this is very easy to do. We will
    look at some of these attacks in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – playing with filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can consult Wireshark's manual to learn more about available filter expressions
    and how to use them. Try playing around with various filter combinations till
    you are confident that you can drill down to any level of detail, even in a very
    large packet trace.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will look at how to sniff data packets transferred
    between our access point and wireless client.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – sniffing data packets for our network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, we will learn how to sniff data packets for a given wireless
    network. For the sake of simplicity, we will look at packets without any encryption.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Switch on the access point we named `Wireless Lab`. Let it remain configured
    to use no encryption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will first need to find the channel on which the `Wireless Lab` access point
    is running. To do this, open a terminal and run `airodump-ng --bssid <mac> wlan0mon`,
    where <`mac`> is the MAC address of our access point. Let the program run, and
    shortly you should see your access point shown on the screen along with the channel
    it is running on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see from the preceding screenshot that our access point `Wireless Lab`
    is running on channel 11\. Note that this may be different for your access point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to sniff data packets going to and from this access point, we need
    to lock our wireless card on the same channel, that is channel 11\. To do this,
    run the `iwconfig wlan0mon channel 11` command and then run `iwconfig wlan0mon`
    to verify it. You should see the `Frequency: 2.462 GHz` value in the output. This
    corresponds to channel 11.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – sniffing data packets for our network](graphics/B09903_02_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now fire up Wireshark and start sniffing on the `wlan0mon` interface. After
    Wireshark has started sniffing the packets, apply a filter for the `bssid` of
    our access point as shown in the following screenshot using `wlan.bssid == <mac>`
    in the filter area. Use the appropriate MAC address for your access point.![Time
    for action – sniffing data packets for our network](graphics/B09903_02_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to see the data packets for our access point, add the following to
    the filter `(wlan.bssid == <mac>) && (wlan.fc.type_subtype == 0x20)`. Open your
    browser on the client laptop and type the URL of the access point in the management
    interface. In my case, as we have seen in [Chapter 1](ch01.html "Chapter 1. Wireless
    Lab Setup"), *Wireless Lab Setup*, it is `http://192.168.0.1`. This will generate
    data packets that Wireshark will capture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Packet sniffing allows us to analyze unencrypted data packets very easily. This
    is the reason why we need to use encryption in wireless.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just sniffed data packets over the air with Wireshark using various
    filters. As our access point is not using any encryption, we are able to see all
    the data in plain text. This is a major security issue as anyone within RF range
    of the access point can see all the packets if he uses a sniffer such as Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – analyzing data packets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use Wireshark to analyze the data packets further. You will notice that a DHCP
    request is made by the client and, if a DHCP server is available, it responds
    with an address. Then you will find ARP packets and other protocol packets on
    the air. This is a nice and simple way to do passive host discovery on the wireless
    network. It is important to be able to see a packet trace and reconstruct how
    applications on the wireless host are communicating with the rest of the network.
    One of the interesting features Wireshark provides is the ability to follow a
    stream. This allows you to view multiple packets together, that are part of a
    TCP exchange, in the same connection.
  prefs: []
  type: TYPE_NORMAL
- en: Also, try logging into [www.gmail.com](http://www.gmail.com) or any other popular
    website and analyze the data traffic generated.
  prefs: []
  type: TYPE_NORMAL
- en: We will now see a demonstration of how to inject packets into a wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – packet injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using the `aireplay-ng` tool, which is available in Kali, for this
    exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these instructions carefully:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to do an injection test, first start Wireshark and the filter expression
    `(wlan.bssid == <mac>) && !(wlan.fc.type_subtype == 0x08)`. This will ensure that
    we only see non-beacon packets for our lab network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now run the `aireplay-ng -9 -e Wireless Lab -a <mac> wlan0mon` command in a
    terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to Wireshark and you should see a lot of packets on the screen now.
    Some of these packets have been sent by `aireplay-ng`, which we launched, and
    others are from the access point `Wireless Lab` in response to the injected packets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just successfully injected packets into our test lab network using `aireplay-ng`.
    It is important to note that our card injected these arbitrary packets into the
    network without being actually connected to the access point `Wireless Lab`.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – installing Kali on VirtualBox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will look at packet injection in greater detail in later chapters; however,
    feel free to explore other options of the `aireplay-ng` tool to inject packets.
    You can verify whether injection succeeded by using Wireshark to monitor the air.
  prefs: []
  type: TYPE_NORMAL
- en: Important note on WLAN sniffing and injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WLANs typically operate within three different frequency ranges—2.4 GHz, 3.6
    GHz, and 4.9/5.0 GHz. Not all Wi-Fi cards support all these ranges and associated
    bands. For instance, older Alfa cards only support IEEE 802.11b/g. This would
    mean that these cards cannot operate in 802.11a/n. The key here is to sniff or
    inject packets in a particular band; your Wi-Fi card will need to support it.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting aspect of Wi-Fi is that, in each of these bands, there are
    multiple channels. It is important to note that your Wi-Fi card can only be on
    one channel at any given moment. It is not possible to tune into multiple channels
    at the same time. The best analogy I can give you is your car radio. You can tune
    it to only one of the available channels at any given time. If you want to hear
    something else, you will have to change the channel. The same principle applies
    to WLAN sniffing. This brings us to an important conclusion—we cannot sniff all
    channels at the same time; we will need to select the channel that is of interest
    to us. What this means is that, if our access point of interest is on channel
    1, we will need to set our card on channel 1.
  prefs: []
  type: TYPE_NORMAL
- en: Though we have addressed WLAN sniffing in the preceding paragraphs, the same
    applies to injection as well. To inject packets on a specific channel, we will
    need to put the card radio on that channel.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now do some exercises on setting our card to specific channels, channel
    hopping, setting regulatory domains, power levels, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – experimenting with your adapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions carefully:'
  prefs: []
  type: TYPE_NORMAL
- en: To set the card on a particular channel, we use the `iwconfig wlan0mon channel
    X` commands:![Time for action – experimenting with your adapter](graphics/B09903_02_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `iwconfig` series of commands does not have a channel hopping mode. One
    could write a simple script over it to make it do so. An easier way is to use
    `airodump-ng` with options to either hop channels arbitrarily, use only a subset,
    or use only selected bands. All these options are illustrated in the following
    screenshot when we run `airodump-ng --help`:![Time for action – experimenting
    with your adapter](graphics/B09903_02_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We understood that both wireless sniffing and packet injection depend on the
    hardware support available. This means that we can only operate on bands and channels
    allowed by our card. Also, the wireless card radio can only be on one channel
    at a time. Furthermore, this means that we can only sniff or inject in one channel
    at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – sniffing multiple channels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to simultaneously sniff on multiple channels, you will require multiple
    physical Wi-Fi cards. If you can procure additional cards, then try to sniff on
    multiple channels simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – WLAN packet sniffing and injection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which frame types are responsible for authentication in WLANs?
  prefs: []
  type: TYPE_NORMAL
- en: Control
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Management
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: QoS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What is the name of the second monitor mode interface that can be created
    on `wlan0` using `airmon-ng`?
  prefs: []
  type: TYPE_NORMAL
- en: '`wlan0mon`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`wlan0mon1`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1mon`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`monb`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. What is the filter expression to view all non-beacon frames in Wireshark?
  prefs: []
  type: TYPE_NORMAL
- en: '`!(wlan.fc.type_subtype == 0x08)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`wlan.fc.type_subtype == 0x08`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(no beacon)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`wlan.fc.type == 0x08`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have made some key observations about WLAN protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Management, control, and data frames are unencrypted and thus can be easily
    read by someone who is monitoring the airspace. It is important to note here that
    the data packet payload can be protected using encryption to keep it confidential.
    We will talk about this in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We can sniff the entire airspace in our vicinity by putting our card into monitor
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: As there is no integrity protection in management and control frames, it is
    very easy to inject these packets by modifying them or replaying them as-is using
    tools such as `aireplay-ng`.
  prefs: []
  type: TYPE_NORMAL
- en: Unencrypted data packets can also be modified and replayed back to the network.
    If the packet is encrypted, we can still replay the packet as-is, as WLAN by design
    does not have packet replay protection.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at different authentication mechanisms that
    are used in WLANs such as MAC filtering and shared authentication, and understand
    the various security flaws in them through live demonstrations.
  prefs: []
  type: TYPE_NORMAL
