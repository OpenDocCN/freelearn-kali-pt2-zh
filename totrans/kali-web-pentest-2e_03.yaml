- en: Using Proxies, Crawlers, and Spiders
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Finding files and folders with Dirb
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding files and folders with ZAP
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Burp Suite to view and alter requests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Burp Suite's intruder to find files and folders
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the ZAP proxy to view and alter requests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ZAP spider
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Burp Suite to spider a website
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeating requests with Burp Suite's repeater
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using WebScarab
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying relevant files and directories from crawling results
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A penetration test may be performed using different approaches called black,
    grey, and white box. Black box is when the testing team doesn't have any previous
    information about the application to test except the URL of the server; white
    box is when the team has all information about the target, its infrastructure,
    software versions, test users, development information, and so on; and gray box
    is a point in between.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: For both black and gray box approaches, a reconnaissance phase, as we saw in
    the previous chapter, is necessary for the testing team to discover the information
    that could be provided by the application's owner in a white box approach.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Continuing with the reconnaissance phase in a web penetration test, we will
    need to browse every link included in a web page and have a record of every file
    displayed by it. There are tools that help us to automate and accelerate this
    task; they are called web crawlers or web spiders. These tools browse a web page
    following all links and references to external files, sometimes filling in forms
    and sending them to servers, saving all requests and responses made and giving
    us the opportunity to analyze them offline.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover the use of some proxies, spiders, and crawlers
    included in Kali Linux and will also see what files and directories would be interesting
    to look for in a common web page.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Finding files and folders with DirBuster
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DirBuster is a tool created to discover, by brute force or by comparison with
    a wordlist, the existing files and directories in a web server. We will use it
    in this recipe to search for a specific list of files and directories.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use a text file that contains the list of words that we will ask DirBuster
    to look for. Create a text file, `dir_dictionary.txt`, containing the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DirBuster is an application made in Java; it can be called from Kali''s main
    menu or from a terminal using the `dirbuster` command. The following are the steps
    required to make such call:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Applications | 03 - Web Application Analysis | Web Crawlers & Directory
    Bruteforcing | Dirbuster.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the DirBuster window, set the target URL to `http://192.168.56.11/`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the number of threads to 20 to have a decent testing speed.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select List based brute force and click on Browse.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browsing window, select the file we just created (`dir_dictionary.txt`).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the Be Recursive option.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this recipe, we will leave the rest of options at their defaults:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8279f370-4fc1-4133-a036-94b5c7577e99.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: Click on Start.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we go to the Results tab, we will see that DirBuster has found at least
    two of the files in our dictionary: `cgi-bin` and `phpmyadmin`. The response code
    200 means that the file or directory exists and can be read. `phpmyadmin` is a
    web-based MySQL database administrator; finding a directory with this name tells
    us that there is a **database management system** (**DBMS**) in the server and
    it may contain relevant information about the application and its users:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0e2847d8-74a9-4507-9be4-8550702de7aa.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DirBuster is a mixture of a crawler and brute forcer; it follows all links in
    the pages it finds but also tries different names for possible files. These names
    may be in a file similar to the one we used or may be automatically generated
    by DirBuster using the option of Pure Brute Force and setting the character set
    and minimum and maximum lengths for the generated words.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine if a file exists or not, DirBuster uses the response codes from
    the server. The most common responses are listed as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '200 OK: The file exists and the user can read it'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '404 File not found: The file does not exist in the server'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '301 Moved permanently: This is a redirect to a given URL'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '401 Unauthorized: Authentication is required to access this file'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '403 Forbidden: Request was valid but the server refuses to respond'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`dirb` is a command-line tool included in Kali Linux that also takes a dictionary
    file to forcefully browse into a server to identify existing files and directories.
    To see its syntax and options, open a terminal and enter the `# dirb` command.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Finding files and folders with ZAP
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OWASP **Zed Attack Proxy** (**ZAP**) is a very versatile tool for web security
    testing. It has a proxy, passive and active vulnerability scanners, fuzzer, spider,
    HTTP request sender, and some other interesting features. In this recipe, we will
    use the recently added **Forced Browse**, which is the implementation of DirBuster
    inside ZAP.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe to work, we need to use ZAP as a proxy for our web browser:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Start OWASP ZAP from Kali Linux menu and, from the application's menu, navigate
    to Applications | 03 - Web Application Analysis | owasp-zap.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll change ZAP''s proxy settings. By default, it uses port `8080`,
    but that may interfere with other proxies like Burp Suite if we have them running
    at the same time. In ZAP, go to Tools | Options | Local Proxies and change the
    port to `8088`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b7bd2177-ba9e-490d-96bd-625631c5d713.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Now, in Firefox, go to the main menu and navigate to Preferences | Advanced
    | Network; in Connection, click on Settings.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose a Manual proxy configuration and set `127.0.0.1` as the HTTP Proxy and
    `8088` as the Port. Check the option to use the same proxy for all protocols and
    then click on OK:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f280dfe4-d64e-4950-826e-b31fcdc6d7b7.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: 'We can also use the FoxyProxy plugin to set up multiple proxy settings and
    switch between them with just a click:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以使用 FoxyProxy 插件来设置多个代理配置，并通过点击切换它们：
- en: '![](assets/6bccb89a-f271-4aff-ab2c-519b97c3a930.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6bccb89a-f271-4aff-ab2c-519b97c3a930.png)'
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Now that we have the browser and proxy configured, we are ready to scan a server
    for existing folders using the following steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置好了浏览器和代理，准备好按照以下步骤扫描服务器以查找现有文件夹：
- en: Having configured the proxy properly, browse to `http://192.168.56.11/WackoPicko`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置好代理后，浏览到 `http://192.168.56.11/WackoPicko`。
- en: We will see ZAP reacting to this action by showing the tree structure of the
    host
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将看到 ZAP 对此操作的反应，通过显示主机的树形结构
- en: we just visited.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们刚刚访问的。
- en: 'Now, in ZAP''s upper-left panel (the Sites tab), right-click on the `WackoPicko`
    folder inside the `http://192.168.56.11` site. Then, in the context menu, navigate
    to Attack | Forced Browse directory (and children); this will do a recursive scan:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 ZAP 的左上角面板（Sites 标签）中，右键点击 `http://192.168.56.11` 网站中的 `WackoPicko` 文件夹。然后，在右键菜单中，导航到攻击
    | 强制浏览目录（及其子目录）；这将执行递归扫描：
- en: '![](assets/a12cf8a7-bc71-4c33-85ce-2014873f86cb.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a12cf8a7-bc71-4c33-85ce-2014873f86cb.png)'
- en: 'In the bottom panel, we will see that the Forced Browse tab is displayed. Here
    we can see the progress of the scan and its results:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在底部面板中，我们可以看到显示了 Forced Browse 标签。在这里我们可以看到扫描的进度及其结果：
- en: '![](assets/ae09b5ab-4904-4918-910a-a36b5a3bc85a.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ae09b5ab-4904-4918-910a-a36b5a3bc85a.png)'
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: A proxy is an application that acts as an intermediary between a client and
    a server or a group of servers providing different services. The client requests
    a service from the proxy and this has the ability to forward the request to the
    appropriate server and get the response back from the client.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 代理是一个充当客户端与服务器或提供不同服务的服务器群之间中介的应用程序。客户端向代理请求服务，代理具有将请求转发给适当的服务器并从服务器获取响应的能力。
- en: When we configure our browser to use ZAP as a proxy, it doesn't send the requests
    directly to the server that hosts the pages we want to see but rather to the address
    we defined. In this case the one where ZAP is listening. Then, ZAP forwards the
    request to the server but not without registering and analyzing the information
    we sent.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们配置浏览器使用 ZAP 作为代理时，它并不会直接将请求发送到托管我们要查看的页面的服务器，而是发送到我们定义的地址。在这个案例中，就是 ZAP 正在监听的地址。然后，ZAP
    将请求转发给服务器，但不会在没有记录和分析我们发送的信息的情况下直接转发。
- en: ZAP's Forced Browse works the same way that DirBuster does; it takes the dictionary
    we configured and sends requests to the server, as if it were trying to browse
    to the files in the list. If the files exist, the server will respond accordingly;
    if they don't exist or aren't accessible by our current user, the server will
    return an error.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ZAP 的 Forced Browse 与 DirBuster 的工作原理相同；它会使用我们配置的字典，向服务器发送请求，就像是在尝试访问列表中的文件一样。如果文件存在，服务器会作出响应；如果文件不存在或当前用户无法访问，服务器会返回错误。
- en: See also
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: Another very useful proxy included in Kali Linux is Burp Suite. It also has
    some very interesting features; one that can be used as an alternative for the
    Forced Browse we just used is Burp's Intruder. Although it is not specifically
    intended for that purpose, it is a versatile tool worth checking out.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有用的代理工具是 Kali Linux 中包含的 Burp Suite。它也有一些非常有趣的功能；其中一个可以作为我们刚刚使用的 Forced
    Browse 的替代工具，就是 Burp 的 Intruder。尽管它并不是专门为此目的设计的，但它是一个多功能的工具，值得一试。
- en: Using Burp Suite to view and alter requests
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Burp Suite 查看和修改请求
- en: Burp Suite is more than a simple web proxy. It is a full-featured web application
    testing kit. It has a proxy, request repeater, fuzzer, request automation, string
    encoder and decoder, vulnerability scanners (in the Pro version), plugins to extend
    its functionality, and other useful features.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Burp Suite 不仅仅是一个简单的 Web 代理工具，它是一个功能全面的 Web 应用测试工具包。它包含代理、请求重放器、模糊测试工具、请求自动化、字符串编码和解码器、漏洞扫描器（在专业版中提供）、插件以扩展功能，以及其他有用的功能。
- en: In this recipe, we will use Burp Suite's proxy features to intercept a request
    between the browser and the server and alter its contents.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 Burp Suite 的代理功能，拦截浏览器与服务器之间的请求并修改其内容。
- en: Getting ready
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Start Burp Suite from the applications menu, Applications | 03 - Web Application
    Analysis | Burpsuite, or by typing the command from the terminal, and set up the
    browser to use it as proxy on port `8080`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用菜单启动 Burp Suite，路径为应用 | 03 - Web 应用分析 | Burpsuite，或者通过终端输入命令启动，并将浏览器配置为通过
    `8080` 端口使用它作为代理。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To make things a little more interesting, let''s use this interception/modification
    technique to bypass a basic protection mechanism. Perform the following steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Browse to OWASP Bricks and go to the exercise Upload 2 (`http://192.168.56.11/owaspbricks/upload-2`).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Request interception is enabled by default in Burp Suite; if the page won''t
    load, go to Burp Suite then to Proxy | Intercept and click on the pressed button, Intercept
    is on:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/20ca9e43-3e41-4bdc-b610-3ec58c225daa.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: 'Here we have a file upload form that is supposed to upload only images. Let''s
    try to upload one. Click on Browse and select any image file (PNG, JPG, or BMP):'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fda352e1-668d-4c9a-8a93-6d3084600234.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: 'After clicking Open, click Upload and verify that the file was uploaded:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f7aab7b5-7141-4430-8e32-7bcdf9c3d42b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s try to see what happens if we upload a different type of file, let''s
    say, an HTML file:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e00b83b1-746b-4c14-b453-ae8adb97907c.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Looks like, as mentioned in the exercise description, the server is validating
    the file type being uploaded. To bypass this restriction, we first enable the
    request interception in Burp Suite.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse for the HTML file and try to upload it again.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Burp will capture the request:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5b75346a-1c6d-4a1c-a3c7-b35bfc5d7bd0.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: Here we can see a `POST` request that is `multipart` (first `Content-Type` header)
    and the delimiter for each part is a long series of dashes (-) and a long number.
    Next, in the first part, we have the file we want to upload with its information
    and its own `Content-Type`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'We know the server only accepts images, so let''s change the header for one
    that says that the file we are uploading is an image:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9f201db4-cfcf-4f99-b0da-1f55cb9bd5bd.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: Next, we submit the request by clicking Forward if we want to continue intercepting
    requests, or by disabling the interceptions if we don't.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And the upload was successful. If we roll our mouse pointer over the here word
    we will see that it is a link to our file:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7d4cea11-997d-4ddb-b9a4-9370b5f3aa00.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we used Burp Suite as a proxy to capture a request after it
    passed the validation mechanisms established client-side by the application, that
    is, in the browser, and then modified such request content by changing the `Content-Type`
    header and used that to bypass the file type restrictions in the application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '`Content-Type` is a standard HTTP header set by the client, particularly in
    `POST` and `PUT` requests, to indicate to the server the type of data it is receiving.
    It''s not uncommon for web applications to use this field and the file''s extension
    to filter out dangerous or unauthorized types in applications that allow users
    to upload files. As we just saw, this sole protective measure is insufficient
    when it comes to preventing a user to upload malicious content to the server.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Being able to intercept and modify requests is a highly important aspect of
    any web application penetration test, not only to bypass some client-side validation—as
    we did in this recipe—but to study what kind of information is sent and to try
    to understand the inner workings of the application. We also may need to add,
    remove, or replace some values for our convenience based on that understanding.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is very important for a penetration tester to understand how the HTTP protocol
    works. For a better understanding of the different HTTP methods refer to:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Burp Suite's Intruder to find files and folders
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp Intruder is a tool that allows us to replay a request automatically, altering
    parts of such request accordingly to lists of inputs that we can set or generate
    according to configurable rules.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Although it's not its main purpose, we can use Intruder to find existing yet
    nonreferenced files and folders as we can do with previously seen tools such as
    DirBuster and ZAP's Forced Browse.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will undertake our first exercise with Burp Suite's Intruder
    and will use it to browse directories in our vulnerable virtual machine forcefully
    by using a name list included in Kali Linux.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume we have already set Burp Suite as a proxy for our browser and
    have visited WackoPicko (`http://192.168.56.11/WackoPicko`). Refer to the following
    steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Target or Proxy tabs, find a request to the WackoPicko''s root URL,
    right-click on it, and select Send to Intruder:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f5078678-4c85-4c3c-acbb-d251e99d8294.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: Then change to the Intruder tab and then to the Positions tab; you'll see some
    fields in the request highlighted and surrounded by § symbols. These are the inputs
    Intruder is going to change on every request. Click on the Clear button to remove
    all of them.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the last `/` in the URL we add any character, say an `a` for example,
    select it, and click on Add. So this character becomes an insertion point for
    the list of inputs:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/631e34e1-baa1-41a0-9bfa-fdf168124b58.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: Now change to the Payloads tab. We have only one insertion point, so we will
    have only one Payload set to configure. The Payload type is kept as a Simple list
    and we are loading the payloads from a file.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now click on the Load button so we can load the payload list from a file and
    select the file `/usr/share/wordlists/dirb/small.txt`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5af72c8b-981c-4dc1-8e43-b83e3ae45f8c.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: 'To start sending requests to the server, click on Start attack. If you are
    using the free version of Burp Suite, you will receive a warning about some limitations
    in Intruder; accept them and the attack will start:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0b90c929-56a7-4161-8821-86ca94623f60.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: If we sort the results by status (by clicking on the column header), we can
    see the lowest number on top; remember that 200 is the response code for an existent
    and accessible file or directory, redirections are 300, and errors are in the
    range of 400 and 500.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What Intruder does is it modifies a request in the specific positions we tell
    it to and replaces the values in those positions with the payloads defined in
    the Payloads section. Payloads may be, among other things:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple list: A list that can be taken from a file, pasted from the clipboard,
    or written down in the textbox'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Runtime file: Intruder can take the payload from a file being read at runtime,
    so if the file is very large, it won''t be loaded fully into memory'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Numbers: Generates a list of numbers that may be sequential or random and presented
    in hexadecimal or decimal form'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Username generator: Takes a list of email addresses and extracts possible usernames
    from it'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bruteforcer: Takes a character set and uses it to generate all permutations
    inside the length limits specified'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These payloads are sent by Intruder in different ways, which are specified
    by the attack type in the Positions tab. Attack types differ in the way the payloads
    are combined and permuted in the payload markers:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'Sniper: With a single set of payloads, it places each payload value in every
    position marked one at a time.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Battering ram: Like Sniper, it uses one set of payloads; the difference is
    that it sets the same value to all positions on each request.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pitchfork: Uses multiple payload sets and puts one item of each set in each
    marked positions. Useful when we have predefined sets of data that should not
    be mixed, for example testing username/password pairs already known.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cluster bomb: Tests multiple payloads one against another so that every possible
    permutation is tested.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As for the results, we can see that there are a couple of existing files with
    names matching the ones in the list (`account` and `action`) and that there's
    a directory named `admin`, which probably contains the pages that perform administrative
    functions in the application, like adding users or content.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Using the ZAP proxy to view and alter requests
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OWASP ZAP, similar to Burp Suite, is also more than a web proxy. It not only
    intercepts traffic; it also has lots of features like the crawler we used in previous
    chapters, a vulnerability scanner, a fuzzer, and a Brute Force. It also has a
    scripting engine that can be used to automate activities or to create new functionality.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will begin the use of OWASP ZAP as a web proxy, intercept
    a request, and send it to the server after changing some values.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start ZAP and configure the browser to use it as a proxy. Further, carry out
    the following steps:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to OWASP Bricks in the `vm_1` and select content exercise number four (`http://192.168.56.11/owaspbricks/content-4/`):'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/549072b7-a06b-4d9e-9f79-efc7d62d8659.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: We can see that the immediate response of the page is an error saying that the
    user does not exist. There is also SQL code displayed, showing that the application
    is comparing a field (`ua`) with a string that is the User-Agent header sent by
    the browser.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: A User-Agent string is a piece of information sent by the browser in every request
    header to identify itself to the server. This usually contains the name and version
    of the browser, the base operating system, and the HTML rendering engine.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'As the User-Agent is set by the browser when sending the request, we cannot
    do much to change it from within the application. We will use OWASP ZAP to capture
    the request and set whatever text we want it to contain as the User-Agent. First,
    enable the interception (called break) in the proxy by clicking on the green circle
    (turns red on mouse-over) in the toolbar. This will intercept all requests going
    through the proxy:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/16bcab57-a396-41bf-8e65-7359ba1ed690.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: After enabling the breaks, go to the browser and refresh the page. Go back to
    ZAP; a new Break tab will appear beside the Request and Response tabs.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Break tab, we see the request the browser is making when we refresh
    the page. Here we can change any part of the request; for this exercise we will
    only change the User-Agent value, for example, changing it to `123456`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/52eeae19-c90f-4e59-8cf3-76e62cc252b0.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: Submit the request by clicking on the Play icon (blue triangle). This will pause
    again when a new request is made; if you don't want to continue breaking on every
    request, use the red circle button to disable interception.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s go to the browser again and see the response:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0abfdc11-b7e4-4fc0-869d-24b7753db78a.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
- en: The error still says the user doesn't exist, but the value we introduced is
    now displayed in the clue code. In future chapters. we will learn how to take
    advantage of features like this and use them to extract information from the database.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we used the ZAP proxy to intercept a valid request in which
    the server analyzed the header section. We modified the header and verified that
    the server actually took the value we would provide.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: First, we made a test request and discovered that the User-Agent header was
    being used by the server. Knowing that, we made a valid request and intercepted
    it with the proxy; this allowed us to see the request once it left the browser.
    Then we changed the header so the User-Agent contained the information we wanted
    it to contain and submitted the request to the server, which took and displayed
    the value we provided.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Another option to change the User-Agent without the need to intercept and manually
    change requests is to use the User-Agent Switcher Firefox extension we installed
    in [Chapter 1](b5aed3bb-313a-47ca-bc62-af4d938f7a3f.xhtml), *Setting Up Kali Linux
    and the Testing Lab*. The problem with this is that we would need to set up a
    different user agent in the extension every time we wanted to test a different
    value, which is very impractical in a penetration test.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Using ZAP spider
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In web applications, a crawler or spider is a tool that automatically goes through
    a website following all links in it and sometimes filling in and sending forms;
    this allows us to get a complete map of all of the referenced pages within the
    site and record the requests made to get them and their responses.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use ZAP's spider to crawl a directory in our vulnerable
    virtual machine `vm_1` and we will check on the information it captures.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use BodgeIt (`http://192.168.56.11/bodgeit/`) to illustrate how ZAP''s
    spider works. Refer to the following steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: In the Sites tab, open the folder corresponding to the test site (`http://192.168.56.11`
    in this book).
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on GET:bodgeit.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the drop-down menu select Attack | Spider:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/305e1f1e-7093-45d9-8d00-e03741a356b1.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: 'In the Spider dialog, we can tell if the crawling will be recursive (spider
    inside the directories found), set the starting point, and other options. For
    now, we leave all default options as they are and click Start Scan:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b3117ada-7de6-4cda-83a5-9027994c6250.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: 'Results will appear in the bottom panel in the Spider tab:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/50cf4f60-6865-4d45-be2f-17e1475d53e3.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: 'If we want to analyze the requests and responses of individual files, we go
    to the Sites tab, open the site folder, and look at the files and folders inside
    it:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cb016fbf-78c3-4716-8e18-392ef39266c7.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like any other crawler, ZAP's spider follows every link it finds in every page
    included in the scope requested and the links inside it. Also, this spider follows
    the form responses, redirects, and URLs included in `robots.txt` and `sitemap.xml`
    files, then it stores all requests and responses for later analysis and use.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After crawling a website or directory, we may want to use the stored requests
    to perform some tests. Using ZAP''s capabilities, we will be able to do the following,
    among other things:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Repeat the requests modifying some data
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform active and passive vulnerability scans
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fuzz the input variables looking for possible attack vectors
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the requests in the browser
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Burp Suite to spider a website
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With similar functionalities to ZAP, and with some distinctive features and
    a more easy-to-use interface, Burp Suite is the most used tool for application
    security testing. Burp Suite can do much more than just crawl a website, but for
    now, as a part of the reconnaissance phase, we will cover only its spidering features.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start Burp Suite by going to Kali's Applications menu, then click on 03 - Web
    Application Analysis | Burpsuite.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Then, configure the browser to use it as proxy through the port `8080`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Burp Suite''s proxy is configured by default to intercept all requests, this
    time we want to browse without interruptions so we need to disable it (Proxy |
    Intercept | Intercept is on). Then proceed with the following steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Once using Burp Suite's proxy, in your browser go to bWAPP (`http://192.168.56.11/bWAPP`);
    this will register the site and directory on Burp's Target and Proxy tabs.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to Target | Site map and right-click on the `bWAPP` folder inside `http://192.168.56.11`,
    then select Spider this branch from the context menu:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/dcb4cfbb-4704-4afb-b5e7-f0c30d1402aa.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: An alert will pop up asking if you want to scan an out-of-scope element (only
    if you haven't added it to the scope). Click Yes to add it and the spidering will
    start.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At some point, the spider will find a registration or login form; when this
    happens Burp Suite will show you a dialog asking for information on how to fill
    the form''s fields. We can ignore it and spider will continue, or we can submit
    some test values and the spider will fill in those values:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f4faf15a-48b8-4e74-84f9-b7655adb807b.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: 'We can check the spider status in the Spider tab. We can also stop it by clicking
    on the Spider is running button. Let''s stop it now:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d52d7be1-4791-42ab-87a2-96c65b0c4d8d.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
- en: 'We can also see how the branch in the Target tab is being populated as the
    spider finds new pages and directories:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/02abf294-303e-4660-aed6-8a65e3c04478.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp's Spider follows the same methodology as other spiders, but it operates
    in a slightly different way. We could have it running while we browse the site
    and it will add the links we follow that match the scope definition to the crawling
    queue.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Just like in ZAP, we can use Burp's crawling results to perform any operation
    we can perform on any request, like scanning (if we have the paid version), repeat,
    compare, fuzz, and view in browser, among others.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spidering is a mostly automated process where spiders do very little or no checking
    on the links they are following. In applications with flawed authorization controls
    or exposed sensitive links and forms, this could cause the spider to send a request
    to an action or page that performs a sensitive task that could damage the application
    or its data. Hence, it is very important that spidering is done with extreme care,
    taking advantage of all the exclusion/inclusion filtering features the tool of
    choice provides, ensuring that there is no sensitive information or high-risk
    tasks within the spider scope, and preferably as a last resort to browsing manually
    through the site.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Repeating requests with Burp Suite's repeater
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When analyzing spider's results and testing possible inputs to forms, it may
    be useful to send different versions of the same request, changing specific values.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use Burp's Repeater to send requests multiple
    times with different values.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We begin this recipe from the point we left the previous one. It is necessary
    to have the `vm_1` virtual machine running, Burp Suite started in our Kali machine,
    and the browser properly configured to use it as a proxy.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we will use OWASP Bricks. The following are the steps required:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Go to the first of the content exercises (`http://192.168.56.11/owaspbricks/content-1/`).
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Burp Suite, go to Proxy | History, locate a `GET` request that has an `id=0`
    or `id=1` at the end of the URL, right-click on it, and from the menu select Send
    to Repeater:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b3f9dfd4-569c-4c26-954e-b32ee4f38c98.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
- en: Now we switch to the Repeater tab.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Repeater, we can see the original request on the left side. Let''s click
    on Go to view the server''s response on the right side:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1cf74ecb-4f5e-41f9-b26a-ee6311bc3280.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
- en: Analyzing the request and response, we can see that the parameter we sent (`id=1`)
    was used by the server to look for a user with that same ID, and the information
    is displayed in the response's body.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'So, this page in the server expects a parameter called ID, with a numeric parameter
    that represents a user ID. Let''s see what happens if the application receives
    a letter instead of a number:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6e976070-c6cf-49bc-bce4-e8c4c037d4ad.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: The response is an error showing information about the database (MySQL), the
    parameter types expected, the internal path of the file, and the line of code
    that caused the error. This displaying of detailed technical information by itself
    suggests a security risk.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if the expected value is a number, let''s see what happens if we send an
    arithmetic operation. Change the `id` value to `2-1`:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e51ba563-ceb1-4d6d-bef8-79d760cb3aef.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
- en: As can be seen, the operation was executed by the server and it returned the
    information corresponding to the user ID `1`, which is the result of our operation.
    This suggests that this application may be vulnerable to injection attacks. We'll
    dig more into them in [Chapter 6](680e9e0d-a892-4c37-b2ad-ce8d27d462b5.xhtml),
    *Exploiting Injection Vulnerabilities*.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp Suite's Repeater allows us to test different inputs and scenarios for the
    same HTTP request manually and to analyze the responses the server gives to each
    of them. This is a very useful feature when testing for vulnerabilities, as one
    can study how the application is reacting to the various inputs it is given and
    act accordingly to identify or exploit possible weaknesses in configuration, programming,
    or design.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Using WebScarab
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebScarab is another web proxy full of features that may be interesting to penetration
    testers. In this recipe, we will use it to spider a website.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In its default configuration, WebScarab uses port `8008` to capture HTTP requests,
    so we need to configure our browser to use that port in the localhost as a proxy.
    We follow steps similar to those of the OWASP ZAP and Burp Suite configurations
    in the browser; in this case the port must be `8008`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WebScarab can be found in Kali''s Applications menu; go to 03 - Web Application
    Analysis | webscarab. Alternatively, from the terminal, run the `webscarab` command.
    Proceed with the following steps:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the BodgeIt application of `vulnerable_vm` (`http://192.168.56.11/bodgeit/`).
    We will see that it appears in the Summary tab of WebScarab.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we right-click on the `bodgeit` folder and select Spider tree from the
    menu:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ff8fbe5e-2b52-4a26-af74-80585ca76f06.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: 'All requests will appear in the bottom half of the Summary and the tree will
    be filled as the spider finds new files:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/dae7de2f-d086-4d20-8d62-d68f5c618d1b.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: The Summary also shows some relevant information about each particular file,
    like if it has an injection or possible injection vulnerability, if it sets a
    cookie, if it contains a form, and if the form contains hidden fields. It also
    indicates the presence of comments in the code or file uploads.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'If we right-click on any of the requests in the bottom half we will see the
    operations we can perform on them. We will analyze a request, find the path `/bodgeit/search.jsp`,
    right-click on it, and select Show conversation. A new window will pop up showing
    the response and request in various formats:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a71c6a38-923b-4074-985e-fbc54b6c48d9.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: 'Now click on the Spider tab:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/71897eef-fbd7-499b-9c37-bf090c426d1f.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: In this tab, we can adjust the regular expressions of what the spider fetches
    by using the Allowed Domains and Forbidden Paths textboxes. We can also refresh
    the results by using Fetch Tree. We can also stop the spider by clicking the Stop
    button.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebScarab's spider, as with those of ZAP and Burp Suite, is useful to discover
    all referenced files in a website or directory without having to browse all possible
    links manually and to analyze in depth the requests made to the server, as well
    as to use them to perform more sophisticated tests.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Identifying relevant files and directories from crawling results
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already crawled a full application's directory and have the list of all referenced
    files and directories inside it. The natural next step is to identify which of
    those contains relevant information or represents an opportunity to have a greater
    chance of finding vulnerabilities.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: More than a recipe, this will be a catalog of common names, suffixes, or prefixes
    used for files and directories that usually lead to information useful to the
    penetration tester or to the exploitation of vulnerabilities that may end in complete
    system compromise.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the steps:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we want to look for are the login and registration pages, the
    ones that could give us the chance to become legitimate users of the application
    or to impersonate one by guessing usernames and passwords. Some examples of names
    or partial names are:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Account
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Auth
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Login
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Logon
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Registration
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Register
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Signup
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Signin
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other common sources of usernames, passwords, and design vulnerabilities related
    to this type of information, are password recovery pages:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Forgot
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lost-password
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Password
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Recover
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reset
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we need to identify if there is an administrative section of the application
    or some set of functions that may allow us to perform high-privileged tasks on
    it. For example, we may look for:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Admin
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Config
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Manager
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Root
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other interesting directories are **Content Management Systems** (**CMS**)
    administration, databases, or application servers:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`admin-console`'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adminer`'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`administrator`'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`couch`'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`manager`'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mylittleadmin`'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phpMyAdmin`'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SqlWebAdmin`'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wp-admin`'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Testing and development versions of applications are usually less protected
    and more prone to vulnerabilities than final releases, so they are a good target
    in our search for weak points. These directories'' names may include:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alpha
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Beta
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dev
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Development
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: QA
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Test
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Web server information and configuration files can sometimes provide valuable
    information about the frameworks, software versions, and particular settings that
    may be exploitable:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`config.xml`'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info`'
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phpinfo`'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server-status`'
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.config`'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, all directories and files marked with disallow in `robots.txt` may be
    useful.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of the names listed previously and their variations in the language the
    target application was created in may allow us access to restricted sections of
    the site, which is a very important step in a penetration test; we cannot find
    vulnerabilities in places if we ignore they exist. Some of them will provide us
    with information about the server, its configuration, and the developing frameworks
    used. Some others, like the Tomcat manager and JBoss administration pages, if
    wrongfully configured, will let us (or a malicious user) take control of the web
    server.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
