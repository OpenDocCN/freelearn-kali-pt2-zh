- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sending Data to the ELK Stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We devoted the previous chapter to setting up the three primary components of
    the **ELK stack**. That’s great but, without data, those components are useless!
    This chapter aims to resolve that issue. There are multiple means of acquiring
    data for the ELK stack and exploring some of them can end up being rather advanced.
    Since this is an introductory manual, we are going to stick with the simpler methods
    – in this case, **Beats** – but still provide an overview of some of the more
    advanced methods. This will allow those who thirst for knowledge, who love to
    independently study, to do a deeper dig if they wish, while still providing actionable
    tools for those of you who prefer to take it a bit slower.
  prefs: []
  type: TYPE_NORMAL
- en: The process of acquiring data involves transporting data. This is sometimes
    referred to as **data shipping**. Throughout this chapter, when we use the term
    data shipping, it should be assumed to mean that we are talking about transporting
    data. Another assumption that is safe for you to make is that we are always including
    Logstash within our data shipping ecosystem. So, when we talk about sending data
    to Elasticsearch, it means we either have Logstash ready to quickly swap to or
    that it should be considered in a commercial setup, but we are simply sending
    it to Elasticsearch to move the example along efficiently. In most production
    scenarios, you would send it to Logstash first. If at any point we meant to skip
    Logstash and send the data directly to Elasticsearch – which is entirely possible
    – we would explicitly state as much.
  prefs: []
  type: TYPE_NORMAL
- en: The information that you’ll glean from this chapter will help you understand
    how a typical SIEM operation functions. While we are using the ELK stack for our
    hands-on training and examples, the experience and knowledge you’ll gain here
    can generally be transferred to other SIEM setups. This chapter will serve as
    the conclusion of the first section of this book. After this, we will be moving
    on from working directly with the ELK stack. However, as we learn about additional
    tools available in the Kali Purple distribution, you will discover that they are
    supplementary to the ELK stack and will integrate with it. As the layers slowly
    build, you’ll begin to see your full SOC taking shape, all based around the centerpiece
    of what you’ve accomplished up to, and including, this chapter. So, take special
    care here and make sure you don’t leave this chapter without a solid understanding
    of the concepts within.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the flow of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filebeat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of Beats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elastic agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logstash and filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you’ll require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Minimum requirements**: A computing device with either the *amd64 (x86_64/64-bit)*
    or *i386 (x86/32-bit)* architecture. It should contain at least *8 GB* of RAM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommended requirements**: Based on feedback from cybersecurity field practitioners,
    aim for the *amd64 (x86_64/64-bit)* architecture with *16 GB* of RAM – more is
    better – and up to *64 GB* of additional disk space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the data flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might recall from [*Chapter 1*](B21223_01.xhtml#_idTextAnchor013) that we
    discussed one of the magical phenomena surrounding Kali Purple – folks who’ve
    never used Linux before are finally deciding to give it a shot. The field of cybersecurity
    has evolved to such a state that many roles exist within it where no specific
    type of technological experience is required in advance. While having such experience
    certainly helps and will give you an advantage, many organizations are beginning
    to focus more on their ability to problem solve, operate under pressure, or tackle
    challenges where no previous answer exists. Some organizations are willing to
    teach people the technology skills they need if they possess those abilities and
    can show a strong work ethic with the ability to be a good student. This goes
    beyond Linux, programming, or other experience. One area where some folks are
    short on experience as they come into the field of cybersecurity is networking.
    By networking, we don’t mean the ability to create a robust circle of friends
    and acquaintances. We mean cables, connections, and the flow of data between machines.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be migrating into the data flow as we address how the
    ELK stack gets its information. Before doing so, however, we need to prepare our
    connections and flow of data. Since there are an infinite number of potential
    setups and we don’t know which tools and OS(s) you might be working with, we are
    going to stick with our base example setup using VirtualBox on a Windows host.
    However, the principle behind it all is the same. If you are using a different
    virtualization tool or host OS, you should still be able to glean the necessary
    information here.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Because we don’t know everyone’s financial situation and part of the magic of
    Kali Purple is that the entire suite is free and open source, we are developing
    this content in the simplest terms possible while still retaining proof-of-concept.
    In fact, throughout this book, we are exploring Kali Purple from the perspective
    of a single device. As we walk through the content, we are replicating it on a
    tiny laptop with 32 GB of RAM and a 13-inch screen (yes, really). We want everybody
    to enjoy the pleasures of Kali Purple.
  prefs: []
  type: TYPE_NORMAL
- en: That said, you should know that there are many ways to set up and deploy the
    ELK stack even outside of Kali Purple so that it includes a cloud-based deployment.
    We could write an entire book – more likely a series of books – just on the ELK
    stack alone. However, this title isn’t about the ELK stack. It’s about Kali Purple
    and we are going to keep it aligned with Kali Purple. Stick with us and by the
    end, you will have a very robust understanding of Kali Purple that you can later
    spread your wings to enhance in whichever ways you like.
  prefs: []
  type: TYPE_NORMAL
- en: With our base example, the first networking consideration is understanding our
    **virtual machine** (**VM**) versus the host OS. Simply put, it is the same as
    having two separate independently functioning personal computers. They are simply
    sharing the same physical hardware to function. That’s the only difference between
    our setup and having two unique devices. Therefore, we can place our endpoint
    tools, such as a Beats data shipper or Elastic Agent, on the host machine and
    have them report to the ELK stack hosted on Kali Purple within our VM instance.
    Doing so will accurately simulate the process of having a customer’s devices report
    to the tools within your company’s SOC. Adding to this complexity, we want to
    protect the VM from outside interference from bad actors as much as possible.
    We will do this by utilizing some networking concepts that allow data shippers
    to report to the SIEM setup by only connecting to the host machine and having
    the host machine pass the information along to the VM instance. While we do not
    need external devices for Kali Purple proof-of-concept, we’ll still touch on that
    aspect to support those of you who might want to experiment in that fashion. This
    all has the added benefit of you only needing a single device, giving educators
    and training managers an additional avenue for training their analysts.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have our networking properly established, we will need to cover two general
    areas: we need to ensure your host device and VM can communicate with each other.
    This requires you to either have a static IP address for your host machine, or
    a willingness to edit your port forwarding rules within your virtualization software
    for your Kali Purple VM instance each time your host machine updates its IP address.
    That may or may not be tedious, depending on the business rules and operations
    of your internet provider. That brings us to the second general area. Although
    we are developing this content on the basis that you can do everything on a single
    device, if you were ever to put your homemade Kali Purple SOC to legitimate use,
    your host device will most assuredly need to be accessible to the outside world.
    Otherwise, how would your data shippers know where to send the data?'
  prefs: []
  type: TYPE_NORMAL
- en: 'First things first: let’s see what kind of IP addresses you’re dealing with.
    Open a command prompt on the host and type **ipconfig /all** to get a detailed
    listing. As you examine the different network interfaces, you’ll notice an Ethernet
    interface, which is code for *good ‘old-fashioned physical cable plugged into
    my device*. That should be your virtualization software. Since some folks still
    use phones with cords, believe Elvis is alive, and access computer networks through
    ethernet connections, you will want to confirm this is your virtualization by
    looking for a **Description** field. The value for that field should be text of
    something referencing your virtualization software. In our example case, it is
    **VirtualBox Host-Only Ethernet Adapter**. You should also notice a **DHCP Enabled**
    row, which should have a value of **No** – that is a good thing. It means your
    virtualization software has set its IP address statically. In other words, the
    address will not change. In the same section, you will find an **IPv4 Address**
    field. Record that value as you will want to insert it into the port forwarding
    rules we will create in a few minutes. There may be other fields within these
    results with an **IPv4 Address** field. Find the one that refers to your VM and
    record the IPv4 value from that entry. It will likely be one of the first entries.
    You may see a reference to your VM in the description, as shown in *Figure 5**.1*.
    Record that value as the IP address of your host machine. Within that same section,
    look for the **DHCP Enabled** field. This value may say **Yes**, which honestly
    is a real bummer. This means your internet provider periodically renews/changes
    your IP address. This will be reinforced with additional data in the left column
    of the section talking about **Lease Obtained** and **Lease Expired**. If for
    some reason the **DHCP Enabled** value says **No** like it did for your virtualization
    interface, then chances are you already knew. You would’ve figured it out when
    you opened the last bill from your internet provider and saw one too many zeroes
    tacked on to the amount due.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look for an Ethernet interface with a description matching your virtualization
    software:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – ipconfig /all](image/B21223_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – ipconfig /all
  prefs: []
  type: TYPE_NORMAL
- en: If that’s the case, you’re good. You could set up a fully functioning Kali Purple
    SOC, distribute data shippers to remote devices, and have them report back to
    your applications once you complete port forwarding in the next step. If that’s
    not the case, it means you have IP addresses that change, known as dynamic IPs.
    You will have some independent study cut out for you before you can operate a
    SOC as we just described. The reason we cannot do that for you is due to the unlimited
    number of internet providers in the world, combined with what seems like an unlimited
    variety of router/switch brands. The solution you need is to get a static IP address
    on the device that is hosting your Kali Purple instance.
  prefs: []
  type: TYPE_NORMAL
- en: There are technically a variety of other alternative ways to address this because
    the world of computer networking is vastly complex. However, folks who already
    know all of that are highly unlikely to be reading this. What we can do is point
    you in the right direction if you wish to set up your SOC in this manner. Before
    you run off on that tangent though, first consider what your immediate needs are.
    If you are simply looking to learn and/or enhance your Kali Purple knowledge,
    it might be advisable to stick with only keeping your host machine and VM networked.
    Depending on your virtualization type and setup, a host IP may not even be required
    for the two to work with each other. Otherwise, we recommend checking your internet
    provider and router/switch brands’ websites for information to see if you’re allowed
    to set a static IP for a device, if they have resources to help you do so, and
    if you will need additional port forwarding between your gateway device and the
    host machine.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have decided how you want to move forward and have addressed any IP
    issues with your host device, you will want to network your VM with your host
    machine. Remember a VM is the same thing as a separate physical computing device.
    If we want it to communicate with our host device, we need to configure it to
    do so.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get our host machine and VM instance connected so that we can simulate
    data shipping to our ELK stack setup. There are several possibilities to get your
    host machine and virtualization software to communicate with each other. We are
    going to utilize a concept known as **port forwarding**. If you are not experienced
    with networking, think of a port as one of the wall *outlets/plugins* in your
    home. Your home symbolizes your device. When your computer accesses the internet,
    it’s like the electricity running through the wires in your home reaching outside
    and traveling along the wires attached to the poles along roadways. When whatever
    server or computing device you are accessing on the internet replies to your computer
    with the information it is requesting – even if it’s as simple as displaying a
    web page – it’s like that electricity coming back into your home through those
    same wires.
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever wondered how your computer knows where that information that is
    coming back – that is incoming – should be sent to? How does it know that the
    incoming data belongs to an email client, your web browser, a game, or any other
    application you are using? It knows this by using ports. Different applications
    on your device will have different port numbers they operate from. Your web browser,
    for example, will operate by connecting to port **80** for normal traffic or port
    **443** for secured traffic on a remote web server device. In the process, it
    will select a random open port on your device and reserve it for when the remote
    device sends a reply. It sends that information, including the port number it
    reserved for replies, to the remote device. That way, when the remote device sends
    a reply, it can tell your computer where to send it. Your device, upon receiving
    this reply, will then know which *outlet/plugin* to use. Therefore, it will know
    that any information coming from the original remote port **80** or **443** web
    server activity is related to your web browser and should be sent there.
  prefs: []
  type: TYPE_NORMAL
- en: A port in your computer – also sometimes called a **plugin** – is like the electricity
    coming into your house and going to a very specific *outlet*. Your home identifies
    the plugins by the wiring that’s sent to the electrical panel, where there are
    circuit breakers that should be labeled. If you go to the electrical panel in
    your home and flip the switch that says *kitchen*, then in theory, the power in
    your kitchen, and only your kitchen, should be turned off. It turns off all the
    electrical *outlets* in your kitchen, not just one. A port on your computer is
    like a single *outlet* in your kitchen. Port forwarding and mirroring are both
    kind of like the circuit breaker switch in the control panel. You’re taking multiple
    *plugins* and wiring them to the same control panel to be operated and controlled
    with a single switch. When you create a rule in your device(s) to share or forward
    ports, it’s like you’re rewiring them so that they work from the same toggle,
    the same switch… a **virtual circuit breaker** if you will.
  prefs: []
  type: TYPE_NORMAL
- en: To get our host machine and VM on the same circuit breaker, we will use port
    forwarding within VirtualBox. To do that, make sure the Kali Purple VM is turned
    off. If you have it running, you will need to shut it down before you can access
    the port forwarding feature for that VM. Once it’s off, open your VirtualBox and
    select the VM where you had Kali Purple running. Next, click the large gear image/icon
    across the top that is labeled **Settings**. When the settings window opens, find
    and select the **Networking** tab in the left column.
  prefs: []
  type: TYPE_NORMAL
- en: While there are several ways to perform this next step, we are going to stick
    with something called **Network Address Translation** (**NAT**). We need to find
    an available network adapter. Across the top of the main window pane, there should
    be four tabs with adapter labels on them. In most cases, the first tab will already
    be partially set up with the following information. If you see that the **Enable
    Network Adapter** box is checked and **NAT** from the scroll menu to the right
    of **Attached to:** has already been selected, you can continue using this active
    tab. Otherwise, you will want to work through the tabs at the top of the window
    pane until you find an available network adapter. You could consider it available
    if **Enable Network Adapter** is not selected. You can read more about NAT as
    well as the static and dynamic IPs previously discussed in the *Further reading*
    section at the end of this chapter. If any of these options are not available
    or are grayed out, it likely means you forgot to turn off the VM first. Double-check
    and make sure you turned off the correct VM and then try again. You might need
    to close and relaunch the VirtualBox VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you forget to turn the VM off, some settings might be grayed out, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The Settings panel](image/B21223_05_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – The Settings panel
  prefs: []
  type: TYPE_NORMAL
- en: When you’re satisfied, click the triangle next to **Advanced**. You should see
    another drop-down menu labeled **Adapter Type:**. Set this to **Paravirtualized**
    **Network (virtio-net)**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The preceding step is of paramount importance. It is the cause of frustration
    for many users within the virtualization community so, please make absolutely,
    positively, certain that you don’t skip it. If you are using a virtualization
    product other than VirtualBox, there may be subtle differences in how it is labeled.
    Nevertheless, you should be able to figure it out using deductive reasoning. If
    you’re not comfortable with that, you can search for terms about your virtualization
    brand along with the word paravirtualization.
  prefs: []
  type: TYPE_NORMAL
- en: A few lines afterward, you should also see a button to access the **Port Forwarding**
    feature. Go ahead and click on that button to open the **Port Forwarding Rules**
    window. The next few pages will provide you with some further details and a visual
    – as shown in *Figure 5**.3* – about port forwarding. Feel free to resize that
    annoyingly small window so that you can see all the columns. If you’re using a
    different virtualization product or host OS, you can simply try searching for
    how to get your brands of virtualization and OS to network with each other. You
    might also include the term *port forwarding* in your query. However, if you follow
    this sequence of events here, it might be enough of a lead to assist you even
    in working with other products. So, we recommend reading this section even if
    you aren’t using VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’re here, let’s set up port forwarding for each component of the
    ELK stack. While Elasticsearch and Kibana both primarily use **Transmission Control
    Protocol** (**TCP**) network traffic, Logstash works with both TCP and **User
    Datagram Protocol** (**UDP**). Elasticsearch also has an additional port it uses
    to receive information from the pipeline. We might configure that one twice, once
    for each protocol. Honestly, there is no harm in setting up each component for
    both TCP and UDP as good practice since we don’t know what the future holds for
    our SOC/SIEM solution. Check the *Further reading* section at the end of this
    chapter for a link to study more about these protocols if you’re interested.
  prefs: []
  type: TYPE_NORMAL
- en: In the top-right corner of the window that opens after you click the **Port
    Forwarding** button, there should be a small icon with a green plus symbol on
    it. You might need to double-click a field to gain access for input or editing
    the values. You will create multiple port forwarding rules at this time. Click
    on the icon with the green plus symbol to create your first port forwarding rule.
    In the **Name** column, type **Elasticsearch - Localhost**, and in the protocol
    column to the right, type **TCP**. In the **Host IP** column, you will be asked
    for the IP address of the source you want to connect to your VM, which in our
    case is the host machine itself. Type **127.0.0.1**, which represents the local
    host of your host machine. Elasticsearch binds with Kibana on port **9200** and
    since this rule is to cause both the host and guest to share the same port, you
    must input **9200** into both the **Host Port** and **Guest Port** columns. For
    each port forwarding rule you are making, input the IP you recorded earlier from
    your VM interface – the Ethernet section when you typed **ipconfig /all** – in
    the **Guest IP** column. In our case, it was **192.168.56.1** if you refer to
    *Figure 5**.1*. We’re having you input that IP as a best practice since not all
    port forwarding scenarios you will encounter in your career will involve a simple
    Host-VM union.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can technically leave the **Guest IP** column blank. Some users have reported
    issues with having an entry for the guest IP when the other endpoint is the local
    host. If you encounter any issues, go ahead and remove that IP. It is a great
    troubleshooting habit with any form of technology to remove all of the optional
    settings and inputs. Then, confirm the technology works as expected minus those
    items and slowly reintegrate them, one single item at a time, testing after each
    step. If you develop a habit of troubleshooting in that manner, you will quickly
    discover that most of the time, it’s one of those optional items that caused the
    problem/issue in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve finished setting up your first port forward, select **OK** to save
    the rule and then repeat this step once for each of the following rules using
    the same IPs for both the host and guest:'
  prefs: []
  type: TYPE_NORMAL
- en: Elasticsearch – App Data with TCP on port **9300**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kibana with TCP on port **5601**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logstash with TCP on port **5044**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logstash with UDP on port **5044**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The rule for setting Elasticsearch – App Data isn’t going to be used by us.
    It’s a port that is used by Elasticsearch to communicate and transfer data between
    nodes. However, we had you set it up as a good habit. As you grow, learn, and
    expand your capabilities, you might decide to study and experiment with using
    multiple Elasticsearch nodes. Now, you’ve programmed your brain to remember this
    port exists to help. Once you’ve finished setting up your port forwarding rules,
    they should somewhat resemble what you can see in *Figure 5**.3*, which is a screen
    capture of the rules we have set up for running our lab example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Port Forwarding Rules](image/B21223_05_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Port Forwarding Rules
  prefs: []
  type: TYPE_NORMAL
- en: One final step in configuring our network for data transfer is to test our setup.
    We will do this by trying to connect to Elasticsearch and Kibana from our host
    machine. First, we must do some housekeeping. Click **OK** to close the **Port
    Forwarding Rules** window and click **OK** again to close the **Settings** window.
    Now, start up your Kali Purple VM and give it a few minutes to boot. One thing
    we want to avoid is trying to connect prematurely or without verifying that Elasticsearch
    and Kibana were started correctly when we booted our VM. Also, if you didn’t select
    the option to enable these services when you installed them in [*Chapter 4*](B21223_04.xhtml#_idTextAnchor076),
    you will need to start them up manually. If we don’t start them, we certainly
    won’t be able to connect to them from our host machine even if we did our port
    forwarding correctly. After your Kali Purple VM boots, log in to your instance
    and open a command-line Terminal window. Do you remember our best practices from
    when we installed these services in [*Chapter 4*](B21223_04.xhtml#_idTextAnchor076)?
  prefs: []
  type: TYPE_NORMAL
- en: 'If not, they are to type the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sudo** **apt update**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sudo apt upgrade** if you wish to upgrade any of the options presented in
    the update'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sudo systemctl daemon-reload** to load any forgotten configuration changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sudo systemctl status elasticsearch** – it will say **Active** if it’s running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sudo systemctl status kibana** – it also will say **Active** if it’s running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Z* to break out the status screens when needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case, you will want to ensure you do the upgrade if any of the options
    returned from the update are related to the Elastic suite of products. The reason
    is that you will acquire **Filebeat** in the next section directly from Elastic
    and if the version you acquire is newer than your Elastic installation, you will
    likely have issues setting it up.
  prefs: []
  type: TYPE_NORMAL
- en: Once your Kali Purple and ELK instances are confirmed to be up and running,
    return to your host machine to test the port forwarding rules we created. On your
    host machine, open a web browser of your choosing. As you may recall from [*Chapter
    4*](B21223_04.xhtml#_idTextAnchor076), we tested our Elasticsearch setup this
    same way by connecting directly to it. In practice, we will only access Elasticsearch
    through the Kibana interface. This is just to test and make sure our port forwarding
    rule worked as expected! In the address bar of the browser you opened, enter [https://localhost:9200](https://localhost:9200),
    paying particular attention to the *s* after *http*. If your port forwarding worked
    as expected, you will be presented with an option to enter Elasticsearch login
    credentials. These are the same credentials you use when you log in to Elasticsearch
    from within the Kali Purple environment because this is the same Elasticsearch!
    If you are presented with a web page showing your default Elasticsearch cluster
    in JSON format, that’s a victory for you! Your **9200** port forwarding rule worked.
    Let’s do the same thing for Kibana now. This time, skip the *s* after *http* and
    enter http://localhost:5601 in your browser. You should be presented with the
    same Kibana page you get when you log in through the VM. Since we don’t connect
    to Logstash directly, we could probably safely assume that all your port forwards
    were successful at this point.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You’ve already won more than half the battle of data transfer.
    Getting your network set up is the core of all data transfer – that’s why we have
    the internet, right? In the next section, we are going to get Beats installed
    and configured so that it can use this networking scheme to report from its installation
    device back to our ELK stack SIEM solution.
  prefs: []
  type: TYPE_NORMAL
- en: Filebeat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many folks will consider Beats part of the ELK stack because of the heavy dependence
    the three primary ELK components used to have on it. However, with the continued
    improvement of the Elastic agent and outside vendors developing compatibility
    within their independent products to send data to Elasticsearch, the inclusion
    of Beats is becoming less and less of an automatic assumption. We will explore
    the Elastic agent also. However, Beats remains simple and lightweight. Therefore,
    it is a very natural progression for us to transition into.
  prefs: []
  type: TYPE_NORMAL
- en: Aside from sample datasets, which are groups of fake data that have been set
    up to test systems such as the ELK stack before deployment, the next simplest
    manner of data acquisition is through a family of agents, known as data shippers,
    collectively referred to as Beats. Beats is not a singular agent or software application.
    Rather, it is a family of applications. By separating the data collection into
    independent agents, each with an area of emphasis or theme, Beats can deploy only
    what is necessary and relevant to a particular endpoint. This helps to weed out
    unnecessary processing and overhead. For this reason, Beats is considered a lightweight
    solution for data shipping.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of looking at all the different types of Beats available, let’s select
    just one to delve into so that we can gain the experience of setting one up and
    therefore an understanding of what exactly a Beat is and how it works. We will
    use the popular Filebeat as an example. There may be other beats that you might
    find more useful for the Windows host we are using as our example. However, Filebeat
    is one of the most universal and is, by far, the most used beat within the total
    Beats ecosystem. Additionally, Filebeat is a very popular data shipper to be used
    on server devices due to its focus on log collection. If you were to deploy Beats
    within a commercial setting, odds are Filebeat will be one of the most frequently
    used Beats you will be expected to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s simulate installing the beat on a remote endpoint by installing it on
    our host machine instead. At this point, you should’ve already configured the
    networking portion that’s required for us to make this happen. After installing,
    we will have it report to the ELK stack we have running within our Kali Purple
    VM instance. Although it’s one physical device, the process is the same as if
    it were two separate devices. That’s the beauty of a VM. Another benefit to doing
    it this way is that you shouldn’t need to take on any additional costs since no
    additional hardware is needed and Beats is free open source software.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your host machine, enter the following into the address bar of your browser:
    [https://www.elastic.co/downloads/beats/filebeat](https://www.elastic.co/downloads/beats/filebeat).'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the page loads, select the appropriate platform package from the **Choose
    platform:** download menu but do *not* download it yet. First, you need to select
    the package to get the appropriate file hash. In the case of a Windows OS, there
    are multiple options. You want to select the non-BETA option – the one with ZIP
    in the title. The package you select from the menu should now be duplicated in
    a blue download link underneath the menu. Once you visually confirm you have the
    correct package, you will want to acquire the hash value – reminiscent of what
    you did in [*Chapter 3*](B21223_03.xhtml#_idTextAnchor052). If you look just to
    the right of the blue download box, you should see the word **sha** pre-pended
    with the international symbol for download, as highlighted in *Figure 5**.4*.
    Select that link and observe that the hash is sent in the form of a download.
    If the browser you are using allows you to open the download directly, do that.
    Otherwise, navigate to the **Downloads** folder on your device and open the hash.
    Record it somewhere so that you can compare it to the final download:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Filebeat version selection and hash download](image/B21223_05_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Filebeat version selection and hash download
  prefs: []
  type: TYPE_NORMAL
- en: 'When the download is complete, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Windows File Explorer and navigate to your **Downloads** folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **Get-FileHash -Path <your downloaded filename>** to grab the file hash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **shasum -a 512 <your downloaded filename>** if you’re on a Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **sha512sum <your downloaded filename>** if you’re one of the cool kids
    on the block and using Linux.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and select **Extract All**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Files will be extracted to this folder:** section, delete the default
    entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **C:\Program Files**, then select **Extract**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **C:\Program Files** directory when the extraction completes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the directory and either press *F2* or select the rename icon at
    the bottom of the dropdown. That will be the image with the letter A.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For simplicity’s sake, rename the installation to something simple and easy
    to remember. Elastic recommends that you just rename it *Filebeat*. You’ll appreciate
    this subtle maneuver later when you’re typing commands to access the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Filebeat download and extract it to **C:\Program Files**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Filebeat download](image/B21223_05_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Filebeat download
  prefs: []
  type: TYPE_NORMAL
- en: Now, go to the Windows Start menu and, in the search bar, type **PowerShell**
    to access PowerShell. You might already have the icon to access it pinned from
    previous usage. Right-click the PowerShell icon and choose **Run as Administrator**.
    Select **Yes** via the popup to give PowerShell the permissions it needs. You
    can tell if you’re running as an administrator based on the background color of
    the terminal window. If it’s black, you are running normally. If you are running
    it as an administrator, the background will be blue. We will provide examples
    of both in a little bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to install Filebeat as a Windows service. There are several reasons
    we want to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: It ensures Filebeat starts automatically when the system boots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It ensures immediate log collection from the boot process and throughout any
    system failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows Filebeat to be managed using standard Windows service management utilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides a smoother integration with the Windows OS as it relates to security
    and permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To install Filebeat as a service, you’ll want to navigate to the directory where
    you renamed the installation from the PowerShell command line. Navigate to the
    **Program Files** directory. Note the space in the directory’s name. Windows likes
    to do that to us and most command-line utilities like to complain about it. If
    you type it as you see it, you may get an error. To get around that, type **cd
    c:\** first; then, without hitting the space bar, press the *Tab* key on your
    keyboard. You’ll see the balance of the file path autocompleted for you. *Without*
    pressing *Enter*, continue to press the *Tab* key until the **Program Files**
    directory shows up. When it does, press *Enter*. At this point, you can type **ls**
    to make sure you’re in the right place and your newly named Filebeat installation
    is present. Continue to **cd** into that directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming your terminal does not complain about the space in the directory path,
    type **cd ''C:\Program Files\<new_name_you_picked>''** to get there. So, if you
    renamed the file to **Filebeat**, as Elastic recommends, you would type **cd ''C:\Program
    Files\Filebeat''**. From this point, you can install Filebeat as a service by
    typing **.\install-service-filebeat.ps1**. However, there’s a fair chance that
    you might get an error that script execution is disabled on your system. So, in
    the interest of best practices, we recommend setting the PowerShell execution
    policy from the get-go by combining the commands to set the policy and install
    Filebeat into one. Type **PowerShell.exe – ExecutionPolicy UnRestricted -File
    .\install-service-filebeat.ps1**; this should invoke a security warning. That’s
    expected and okay. We recommend that you type **R** to *Run once* and then press
    *Enter*. You should get confirmation that Filebeat is now installed but is turned
    off by default, as shown in *Figure 5**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Filebeat installed as a Windows service through regular PowerShell](image/B21223_05_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Filebeat installed as a Windows service through regular PowerShell
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we’ve installed Filebeat as a service, we have some cool tricks we can
    use to manage it. Here are the first couple of examples: to start Filebeat from
    within the same PowerShell instance we’re already in, simply type **Start-Service
    -Name Filebeat** and wait a few moments until your command prompt returns. When
    it does, there’s unfortunately no feedback to tell us if we started it successfully.
    However, we can check its status by typing **Get-Service -Name Filebeat** It should
    now say **Running** in the left column where it previously said **Stopped**. Sounds
    kind of familiar, doesn’t it? By installing Filebeat as a Windows service, we
    can now use PowerShell to manage the application in the same manner that we used
    the Linux command line within Kali to manage the other components of the ELK stack.'
  prefs: []
  type: TYPE_NORMAL
- en: Linux and macOS download and installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before editing the configuration file, let’s make sure our friends on Linux
    and macOS can download and install the product. Both systems have auto-hash checking
    built in to save you some work.
  prefs: []
  type: TYPE_NORMAL
- en: Linux users can skip the browser-based download and use the command-line utility’s
    automatic hash-checking, which is built into it. Type **sudo apt-get install filebeat**
    or **sudo yum install filebeat** and then navigate to the **/etc/filebeat** folder,
    where you can type **ls** to confirm that the **.yml** file is present. Use your
    favorite editor to edit **filebeat.yml** – for most people, it’s vim or nano.
  prefs: []
  type: TYPE_NORMAL
- en: macOS users can use Homebrew by typing **brew install elastic/tap/elastic-agent**
    and then navigating to the **/usr/local/etc/filebeat** directory. Once there,
    they can type, look for and edit **filebeat.yml** using the same available tools
    found in Linux, such as vim or nano.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have completed the process of downloading and installing, let’s
    adjust some settings for our Filebeat to work. After all, having Filebeat installed
    is only the beginning. If we want it to do its job properly, we need to configure
    it to connect to the ELK stack so that it knows where to send the information
    it’s gathering. We also need to give it a nudge to tell it where we want it to
    gather information from. There are a bunch of optional settings we can use to
    help parse the data it collects and ships.
  prefs: []
  type: TYPE_NORMAL
- en: Type **ls** to list the contents of the directory you’re in. You should still
    be in the **C:\Program Files\Filebeat** directory. You’re looking for **filebeat.yml**
    because that is the document you will edit to send data to the ELK stack. To edit
    the file in PowerShell, type **notepad filebeat.yml**; on Linux or macOS, type
    **sudo <editor> filebeat.yml**, where **editor** is your editor of choice – usually,
    this is nano or vim. It should open in a text editor. In the odd chance that you
    do not have Notepad installed, you can substitute the word **notepad** for whichever
    text editor you do have on your system. Alternatively, you can minimize the Windows
    you are working with and then search for, download, and install Notepad. If you
    get a warning that you don’t have permission, take note of the color of your terminal
    window because that usually means you didn’t select **Run as administrator** when
    you first launched PowerShell. In that case, you can elevate your privilege from
    within PowerShell by typing **Start-Process powershell -****Verb Runas**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your privileges have been set and you have the file open in a text editor,
    you want to adjust several settings in this file before we get to reap the rewards
    of Filebeat. We must get these settings correct; otherwise, Filebeat will either
    not run correctly or will not report correctly to the ELK stack. Scroll down until
    you find the section labeled **filebeat.inputs:** surrounded by a bunch of equals
    signs, as shown in *Figure 5**.7*. Find the field labeled **enabled: false** and
    change it to **enabled: true**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **filebeat.inputs:** section, remove the **#** symbol, whether you call
    it a hashtag, pound sign, or tic-tac-toe, from the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filebeat.inputs:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-** **type: filestream**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**id: my-filestream-id**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**enabled: true**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**- /****var/log/*.log**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is referred to as uncommenting a field. It is an industry best practice
    to do anytime you are working within a text file that contains any sort of programming
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adjust Filebeat’s inputs so that it knows where and what type of information
    to grab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – filebeat.yml configuration in the filebeat.inputs: section](image/B21223_05_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7 – filebeat.yml configuration in the filebeat.inputs: section'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, scroll down to the next section labeled **filebeat.config.modules:**,
    find the field labeled **reload.enabled: false**, and change it to **reload.enabled:
    true**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure the following fields are uncommented:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filebeat.config.modules:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**path: ${path.config}/modules.d/*.yml**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reload.enabled: true**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adjust the Filebeat modules so that they accommodate supplementary features
    we will add later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – filebeat.yml configuration in the filebeat.config.modules: section](image/B21223_05_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8 – filebeat.yml configuration in the filebeat.config.modules: section'
  prefs: []
  type: TYPE_NORMAL
- en: 'Continue scrolling through **filebeat.yml** until you reach the **Dashboards**
    section. Uncomment **setup.dashboards.enabled: true** and then move to the Kibana
    part after it. Here, you will uncomment **setup.kibana:** and set the host value
    to **localhost:5601**, ensuring that the line is also uncommented.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow dashboard setup and configure Filebeat so that it allows Kibana:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – The filebeat.yml file’s configuration dashboard and Kibana sections](image/B21223_05_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – The filebeat.yml file’s configuration dashboard and Kibana sections
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Outputs** section, you’ll see options for both Elasticsearch and Logstash.
    This is because Filebeat can report to either application. For fun, we will set
    up both but only use Elasticsearch at this time. Uncomment **output.elasticsearch**
    but leave it in front of **output.logstash**. Doing this will invoke Filebeat
    sending information to Elasticsearch but not Logstash. If you accidentally uncomment
    both applications, you will receive an error in the next step. *So, make sure
    the # values are in place for the Logstash option before you proceed to the* *next
    step.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to tell Filebeat where those applications are at. Remove the
    symbol from the **hosts** field for each application and set the **hosts** values
    to localhost, leaving the port numbers in place. This is a neat little security
    hack that has Filebeat reporting to the ELK stack through the port forwarding
    feature we set up earlier. Doing it that way means any Beats you set up outside
    of the network your host machine is on can report their data to the ELK stack
    without ever having direct access to the VM you are hosting Kali Purple on! Uncomment
    the **protocol: "https"** field to maintain compatibility with Elasticsearch.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We recommend taking some time to study and set up SSL and TLS if you ever intend
    to use the ELK stack for commercial purposes. However, because we are simply setting
    up a proof-of-concept scenario here, we will skip the complexities of SSL and
    TLS. To avoid configuration and starting errors, we need to add a line after the
    **hosts** field in Elasticsearch. Add **ssl.verification_mode: none**.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, for Filebeat to properly access the Elasticsearch instance, you will
    need to provide credentials. These are the same service account credentials we’ve
    been using to access Elasticsearch since we first installed it. Make sure you
    uncomment the username and password fields and add the necessary credentials.
    Refer to *Figure 5**.10* for a working example of how this all looks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adjust the outputs so that Filebeat knows where to send its data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – filebeat.yml Elasticsearch and Logstash sections](image/B21223_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – filebeat.yml Elasticsearch and Logstash sections
  prefs: []
  type: TYPE_NORMAL
- en: When you’re finished, save the file the same way you would any text file and
    return to the terminal to verify the changes. At the command line, type **cat
    filebeat.yml**. This will print the contents of **filebeat.yml** to your screen
    in a read-only format. Scroll up to view the text and verify that the changes
    you just made are showing on your PowerShell terminal screen.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As you navigate the process of configuring the various applications in this
    book or integrating them with other applications, you will notice many configurable
    options that we are not discussing. Many of those options are for advanced use
    of these applications and are generally outside the scope of this book. Rest assured,
    we are giving you enough of the information to remain reasonably practical and
    useful. The silver lining is the knowledge that if any specific application we
    cover is of greater interest to you, you have so much more information to explore
    where you can continually upskill yourself throughout your career.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting the data Filebeat collects to the ELK stack is only going to work
    if we have data to report, right? There is a very large rabbit hole we can go
    down here but for our use case’s proof of concept, we will stick to reviewing
    **data collection modules**. You can get a list of available data collection modules
    by typing **.\filebeat.exe modules list** in PowerShell or **./filebeat modules
    list** in Linux or macOS. If you get an output error, that means *you missed the
    earlier instruction to comment out the Logstash output* in **filebeat.yml** after
    you added the information. Go back and do that, then return to perform this step
    again. There is a link in the *Further reading* section that will take you to
    the Elastic website, where you can study and learn what each of the modules is
    on the list that the command line returns to you. We are going to enable three
    of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do that now by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**.\filebeat.exe modules** **enable mysql**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.\filebeat.exe modules** **enable threatintel**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.\filebeat.exe** **modules microsoft**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we need to establish an authorized *less privileged user* for Filebeat
    to use. Elastic is very particular about this being done before we enable and
    start Filebeat. First, we will create a role for the user and then we will establish
    the actual user. Double-check and make sure you have Elasticsearch and Kibana
    running in your Kali Purple VM. Then, on your host machine, open a web browser
    and put the address for Kibana ([http://localhost:5601](http://localhost:5601))
    in the address bar, making sure there’s no *s* after the *http*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Kibana home page should load. It might take a minute or so, especially
    if you’ve recently started the Kibana and/or Elasticsearch service in your VM.
    The three horizontal lines in the top-left corner of the Kibana home page are
    what we call a hamburger menu (because the lines presumably resemble a burger
    between two buns). Click on the hamburger menu and scroll to the bottom. Click
    **Stack Management** and, once again, scroll down the left navigation until you
    reach the **Security** section. In that section, click on **Roles** to open the
    **Roles** page. In the top-right corner, you’ll see a blue box labeled **Create
    role**. Select that option; when the page loads, you’ll see an option to enter
    a name for the role under **Role name**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Creating Filebeat roles using the Kibana interface](image/B21223_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Creating Filebeat roles using the Kibana interface
  prefs: []
  type: TYPE_NORMAL
- en: Enter something self-explanatory. For our example, we’ll put **FB-Default-Role**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Because things change over time, your experience here may have subtle differences
    by the time you read this. Remember, search engines are your friends.
  prefs: []
  type: TYPE_NORMAL
- en: One thing you might need to do if you are experiencing problems with Beats roles
    reporting to the Kibana interface is to navigate to the directory where **kibana.yml**
    is – it should be **/etc/kibana/** – and type **sudo nano kibana.yml** to edit
    that file. You would use the arrow keys on your keyboard to navigate the file
    until you find the **elasticsearch output** section. Make sure the username and
    password are set to **elastic** for both. This is for the applications to properly
    integrate.
  prefs: []
  type: TYPE_NORMAL
- en: Another consideration would be to make sure your host and VM have ports **80**
    and **443** forwarded so that the web browser itself can communicate.
  prefs: []
  type: TYPE_NORMAL
- en: Then, return here and, in the section right afterward, click the drop-down menu
    after **Cluster privileges**. In that field, type **monitor** and then press *Ctrl*
    + *K* to complete the entry while allowing you to add more entries. Add **read_ilm**,
    **manage_ilm**, **manage_index_templates**, and **read_pipeline** as additional
    entries, pressing *Ctrl* + *K* after each entry. If you want an enhanced experience,
    you can also add **manage_pipeline** and **manage_ingest_pipelines**. We don’t
    recommend starting with these if you’re setting up a production scenario, however.
    In that case, start small and add features one at a time. If you weren’t already
    aware, you can use the *Ctrl* + *K* to autocomplete fields when entering multiple
    email addresses or in most areas where you want to add multiple datasets while
    remaining in place. It’s a handy shortcut to learn!
  prefs: []
  type: TYPE_NORMAL
- en: Next, go further down to the **Index privileges** section and click the **Indices**
    dropdown. If you don’t see it, start typing **filebeat-*** and enter that value
    for that field. Just to the right of that menu, there is another one called **Privileges**.
    Select that drop-down menu and select or type **create_doc** for the field. Repeat
    this process to add **create_index** and **view_index_metadata**. When all the
    entries are in place, scroll to the bottom and click on the blue **Create role**
    button. The page will return to the default **Roles** page, where you should now
    see your newly created role at the top of the list!
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the appropriate fields, as displayed here, to create the role:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Entering role attributes](image/B21223_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – Entering role attributes
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to **Stack Management** | **Security** in the left navigation pane.
    However, instead of selecting roles, select **Users** this time. In a similar
    fashion to role creation, it will display a **Users** page with a blue **Create
    User** button at the top right of the page. Select that button and fill out the
    fields as appropriate. In our example, we will name our user **FB-Default-User**
    so that it matches the default role we created. You can put whatever name you
    like in the **Full name** section and make up any email you’d like. We’ll add
    **tester@testing.te** for our example email. In a production scenario, you’d want
    this to be a real authentic identity and email and you’d want to have a secure
    password. Since we’re testing and our example will be destroyed long before we
    go to press, we’ll just put **filebeat** in as our password. The fun part is that
    when you click on the **Roles** dropdown, you will see the role you just created
    as an option to select. Go ahead and select that role and then click the blue
    **Create user** button at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Entering user attributes](image/B21223_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – Entering user attributes
  prefs: []
  type: TYPE_NORMAL
- en: You’ll be returned to the default **Users** page, where you should see the user
    you just created with the roles assigned to them that you also just created now
    listed at the top. You can return to the **filebeat.yml** text we edited earlier
    and replace the superuser credentials with those you just created, thereby putting
    your newly created account with fewer privileges in place.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are far more secure methods of doing this. In production, you might wish
    to use the Filebeat keystore, which involves using an API key and environment
    variables instead of a username and password. As you learn and develop your ELK
    stack skillset, do pay attention to advanced security methods.
  prefs: []
  type: TYPE_NORMAL
- en: That said, there is a common issue when setting up the keystore where the final
    step hangs during the setup. At the time of writing, there are no known official
    publicly released fixes or explanations from Elastic addressing this issue. However,
    community members have worked around this error by returning to the user profile
    you just created and adding editor privileges from the **Roles** drop-down menu
    within the user profile.
  prefs: []
  type: TYPE_NORMAL
- en: We are nearing the end of the initial ELK stack portion of this book. However,
    if you find that you’ve developed a deep interest in this particular suite of
    cyber defense tools, we will add a plethora of valuable links in the *Further
    reading* section so that you can become an ELK scholar if you so choose. In the
    meantime, let’s get this beat up and running!
  prefs: []
  type: TYPE_NORMAL
- en: There is one final step to complete this process. For it to work, make sure
    your Kali Purple VM is running along with your ELK stack components. Once you’ve
    confirmed they are all running, you can do the final setup of your Filebeat assets
    by typing **.\filebeat.exe setup -e** (**./filebeat setup -e** for Linux and macOS)
    and then observe the terminal for confirmation. There are a couple of potential
    show-stopping errors you might receive here.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the setup stops with an error message that says something along the lines
    of *x509 Certificate error* or *x509 Certificate signed by unknown authority*,
    then that’s likely because you missed the earlier instruction to add **ssl.verification_mode:
    none** under the **Output** section in **filebeat.yml**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the setup stops with an error message that says it couldn’t connect to any
    of the configured Elasticsearch hosts, then you need to go into your VM and launch
    a command-line terminal to make a quick change to the **elasticsearch.yml** file.
    Type **sudo nano /etc/elasticsearch/elasticsearch.yml**. Once you’re in the file,
    scroll down until you find the **Network** section. Within that section, look
    for the line that begins with **network.host** Edit that line by setting the value
    to **0.0.0.0** and uncommenting the line. It should now state **network.host:
    0.0.0.0**. This command directs Elasticsearch to accept all connections. Press
    *Ctrl* + *X* to save and select *Y* for yes. Once you’re out of the editor, you
    will need to restart Elasticsearch for the changes to take effect. Type **sudo
    systemctl restart elasticsearch** to do so. Then, return to the command line on
    your host machine and type **.\filebeat.exe setup -e** if you’re in PowerShell
    or **./filebeat setup -e** if you’re on Linux or macOS. Be patient – this setup
    process could take a while and PowerShell could hang occasionally, making you
    think it’s frozen. We assure you, it’s not. It’s working hard to set up Filebeat
    for you.'
  prefs: []
  type: TYPE_NORMAL
- en: When the auto-setup is done, your command prompt will return. You may already
    have it running if you’ve followed the instructions thus far but in case you haven’t,
    it’s time to start the motor. Type **Start-Service -Name Filebeat** in PowerShell
    or **sudo systemct start filebeat** if Linux or macOS and go to a web browser
    on your host machine.
  prefs: []
  type: TYPE_NORMAL
- en: Return to the Kibana user interface. You should already be there but if you’re
    not, enter [http://localhost:5601](http://localhost:5601) into your address bar.
    Click on the hamburger menu and scroll down to the **Dashboards** link under the
    **Analytics** section. Select **Dashboards**; if the page loads with any entries
    at all, then at least the Kibana dashboards portion of your Filebeat installation
    has been successful!
  prefs: []
  type: TYPE_NORMAL
- en: Return to and select the hamburger menu again, scrolling back to the bottom,
    click on **Stack Management**, and then click **Index Management** in the new
    menu that loads. From there, look at the main window – you will see some tabs
    across the top. Click on **Data Streams**; you should see your Filebeat installation
    listed. It will be the only entry and have the word *filebeat* as part of its
    name. Jump ahead to *Figure 5**.15* for a visualization that represents this same
    screen with Elastic agent data streams instead of Filebeat.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Filebeat takes a little bit of work to set up but they’re all
    simple steps. Filebeat is very efficient and doesn’t take any measurable amount
    of computing resources. This allows you to expand your network security efficiently,
    albeit with a little elbow grease. While it’s the most common beat of the ecosystem,
    it’s not the only one. A few others will be listed in the next section, along
    with the most common Beats alternative – the Elastic Agent.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Beats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Other Beats include **Metricbeat**, which is used to capture infrastructure
    data, and **Winlogbeat**, which is used to capture Windows event logs. Winlogbeat
    would’ve been a more appropriate beat to use on our Windows host but we wanted
    to familiarize you with the beat you’re most likely to see when employed in the
    field and that is most definitely Filebeat. There is also **Heartbeat**, which
    is used to capture device uptime information, and **Auditbeat**, which focuses
    on audit types of events.
  prefs: []
  type: TYPE_NORMAL
- en: Elastic is pushing hard for folks to move to their more inclusive – but heftier
    – Elastic Agent, which functions as sort of a universal beat. Nevertheless, you
    will encounter individual beats in the world for quite some time and should be
    familiarized with them. Before we install the Elastic agent, you will want to
    uninstall your Filebeat to prevent resource conflicts if you’re putting it on
    the same device. Honestly, you don’t need to do that. You can have fun with it
    and put it on the same device that’s hosting your ELK stack. You can even install
    it on your VM. There’s no harm in doing it that way. Just make sure you have your
    host IP correct because *localhost* won’t work in your configuration files if
    you do it that way. Instead, you will want to type **ifconfig** inside a terminal
    window and grab your eth0 IP address from there to put in your config files. It
    likely will be **10.0.2.15** if you’re using VirtualBox but check this to be sure.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re feeling adventurous, Elastic does offer a tutorial on upgrading an
    existing Beats package to the Elastic agent. We’ve added that information to the
    *Further reading* section for you. In the meantime, prepare to be stunned when
    you see how much quicker and easier it is to install the Elastic agent!
  prefs: []
  type: TYPE_NORMAL
- en: Elastic Agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the Beats lightweight data shipping ecosystem is great for small projects,
    they are quickly working their way into oblivion with the new **Elastic Agent**
    and **Fleet Server** combination. Because we are working with a single device,
    we will install the Elastic Agent as a standalone package and will not be working
    with the Fleet server. However, if you are looking to marry the Elastic Agent
    with the ELK stack in a production environment or wish to use multiple Elastic
    agents on several devices, we recommend examining a newer product Elastic has
    put out called the Fleet server. The Fleet server is not part of the native Kali
    Purple distribution as of this writing but it wouldn’t be surprising if a quick
    install package is added for package managers in the not-too-distant future. You
    can still set it up through the Kibana dashboard. We’ve added links to the *Further
    reading* section if you’d like to go the extra mile.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s grab the product itself by pointing our host machine’s web browser to
    https://www.elastic.co/downloads/elastic-agent to grab the most recent release
    of the product. A page will open that is nearly identical to the page we went
    to download Filebeat. In the same manner, select the appropriate OS of your host
    machine but don’t click **Download** yet. We are only selecting it, so the proper
    file hash presents itself in the SHA link to the right of the blue download box.
    Select the SHA link to grab and record the file hash. Then, select and click the
    blue box to begin downloading the Elastic Agent.
  prefs: []
  type: TYPE_NORMAL
- en: Just as we did with Filebeat, wait for the download to complete and then open
    Windows File Explorer to navigate to the **Downloads** directory. Once you’re
    there and before we do anything else – including simplifying the filename – we
    need to grab the hash to compare it with the one we grabbed from Elastic’s website,
    just as we did the first time. Type **Get-FileHash -Path <your downloaded filename>**.
    We cannot tell you what that is because it will not be the same for you due to
    regular updates to the Elastic Agent. If you’re on a Mac, type **shasum -a 512
    <your downloaded filename>**; if you’re one of the cool kids on the block and
    using Linux, type **sha512sum <your downloaded filename>**. Once the hash is confirmed,
    right-click and select **Extract All**. In the **Files will be extracted to this
    folder:** section, delete the default entry and type **C:\Program Files**.
  prefs: []
  type: TYPE_NORMAL
- en: Select **Extract** and navigate to the **C:\Program Files** directory when the
    extraction completes. Once there, right-click the directory and either press *F2*
    or select the rename icon at the bottom of the dropdown. That will be the image
    with the letter A. For simplicity’s sake, rename the installation to something
    simple and easy to remember. Let’s go with *Elastic-Agent*. Open a PowerShell
    instance on your host machine, navigate to the **C:\Program Files\Elastic-Agent**
    directory, and then type **notepad elastic-agent.yml** to edit the configuration
    file. Remember, you need administrator privileges to edit this file. Type **powershell
    Start-Process powershell -Verb Runas** to get such righteous power.
  prefs: []
  type: TYPE_NORMAL
- en: Before editing the configuration file, let’s make sure our friends on Linux
    and macOS can download and install the product. Both systems have auto-hash checking
    built in to save you some work.
  prefs: []
  type: TYPE_NORMAL
- en: Linux users can skip the browser-based download and use the command-line utility’s
    automatic hash-checking, which is built in. Type **sudo apt-get install elastic-agent**
    or **sudo yum install elastic-agent** and then navigate to the **/etc/elastic-agent**
    folder, where you can type **ls** to confirm that the **.yml** file is present.
    Use your favorite editor to edit **elastic-agent.yml** – for most people, it’s
    vim or nano.
  prefs: []
  type: TYPE_NORMAL
- en: macOS users can use Homebrew by typing **brew install elastic/tap/elastic-agent**
    and then navigating to the **/Library/Elastic/Agent** directory, where they can
    look for and edit **elastic-agent.yml** using the same available tools found in
    Linux, such as vim or nano.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whatever solution you are using, go ahead and open the **elastic-agent.yml**
    file for editing. In the interest of keeping our experience moving along, we are
    going to do a bare-bones configuration. Check the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The **hosts** field has the correct protocol – **https** instead of **http**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **hosts** field has the correct IP address and port – **localhost** for
    most of you and **9200**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **hosts** field has the correct format hosts: **["IP:PORT"]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **api_key** field should be commented out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **username** and **password** fields should be uncommented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Valid credentials should be listed after the username and password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following line after **password**: **ssl.verification_mode: none**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 5.14 – elastic-agent.yml configuration settings if reporting to Elasticsearch](image/B21223_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – elastic-agent.yml configuration settings if reporting to Elasticsearch
  prefs: []
  type: TYPE_NORMAL
- en: 'The final line in the preceding step is to temporarily disable SSL security
    for training and proof-of-concept so that we can get a quick use case with results
    to see. Alternatively, if you used the Kibana graphical environment to install
    an Elastic Agent, which you can do by simply typing **elastic agent** in the search
    bar and following the prompts, it will give you **ssl.ca_trusted_fingerprint**,
    which you can add, as shown in *Figure 5**.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – elastic-agent.yml configuration settings if installed from
    the Kibana GUI](image/B21223_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – elastic-agent.yml configuration settings if installed from the
    Kibana GUI
  prefs: []
  type: TYPE_NORMAL
- en: It is of paramount importance that you use proper authentication and have your
    SSL properly set up if you are planning to deploy an Elastic Agent in a production
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s install it by typing **.\Elastic-Agent install**, substituting **Elastic-Agent**
    for whatever other name you might have chosen if you are in PowerShell and **sudo
    systemctl start elastic-agent** if you are in a macOS or Linux terminal. Select
    **Y** when you’re asked if you want to continue and **N** when you’re asked if
    you want to enroll this agent into Fleet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see our hard work in action, shall we? After making sure Elasticsearch,
    Kibana, and your Elastic Agent are all turned on and running, open up a web browser
    and log in to Kibana. Return to and select our tasty hamburger menu again, scrolling
    back to the bottom before clicking **Stack Management**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Stack Management](image/B21223_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16 – Stack Management
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click **Index Management** in the new menu that loads. From there, look
    at the main window pane; you will see some tabs across the top. Click on **Data
    Streams**. This is where your Filebeat installation was listed – maybe it still
    is if you installed the Elastic Agent on a different device without removing Filebeat
    first. Now, you will see a plethora of data that’s coming in from your Elastic
    Agent! This is proof that your installation was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Index Management | Data Streams](image/B21223_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.17 – Index Management | Data Streams
  prefs: []
  type: TYPE_NORMAL
- en: So, you can now see how incredibly simple the Elastic Agent is to install compared
    to Beats. However, there is a trade-off between the Elastic Agent and Beats. The
    Elastic Agent has pretty much everything from all of the different Beats combined,
    plus more, in just one endpoint agent. However, this comes at the cost of performance.
    There is more for your endpoint to work through. The Elastic Agent is just one
    piece of software. So, if you only need to report on logfiles, you still have
    to install the entire agent complete with features for measuring device uptime
    or infrastructure data. You will have unnecessary overhead. Maybe this is a non-issue
    for you. For many, it isn’t. If your equipment and network structure has the spare
    room, then it’s no big deal and the Elastic Agent will be the simplest version
    of data shipping for you.
  prefs: []
  type: TYPE_NORMAL
- en: Logstash and filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One last item of business before we wrap up the ELK stack portion of Kali Purple.
    We’ve been reporting to Elasticsearch to provide you with a quick and easy use
    case. In reality, you are more likely to be setting your data shippers and endpoint
    agents to first run the data through Logstash, where it can be enriched for clearer
    analysis. We have two steps left to make that work.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to return to whichever process we are using to collect data.
    In the most recent case, it’s the Elastic Agent, but it could be one of the Beats
    or some other agent we’ve integrated with the ELK stack on one of our endpoints.
    Edit the **.yml** or other configuration file for that process to comment out
    the sections regarding Elasticsearch and uncomment the sections for Logstash,
    as you might recall from earlier in this chapter. In the case of **elastic-agent.yml**,
    you would simply change the type to Logstash, edit the **hosts** field so that
    it’s **http** instead of **https**, and change the port number from **9200** to
    **5044**, as seen in *Figure 5**.18*. In the case of other agents, you will want
    to comment out the **Elasticsearch** section and uncomment the **Logstash** section,
    making sure to set **http** instead of **https**, the port to **5044** instead
    of **9200**, and comment out the credentials since Logstash handles the authentication
    with Elasticsearch in the config file you will create in a moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.18 – elastic-agent.yml configuration settings if reporting to Logstash](image/B21223_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.18 – elastic-agent.yml configuration settings if reporting to Logstash
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, do you remember how we set up the configuration file for Logstash
    in [*Chapter 4*](B21223_04.xhtml#_idTextAnchor076) and had Logstash report its
    output to Elasticsearch? Now, we need to return to that file and configure it
    so that it receives data from whichever process we are using to send data to it.
    In our example, we will use the recent setup of the Elastic Agent. We will add
    that information while specifying the port in the input section of the configuration
    file. Within your Kali Purple environment, open a terminal window, navigate to
    **/etc/logstash/conf.d**, and type **ls** to see if **logstash.conf** is present.
    It might not be present if you haven’t used it. If a directory doesn’t allow you
    access along the way, remember the **CHMOD** commands we spoke of in [*Chapter
    3*](B21223_03.xhtml#_idTextAnchor052) – you can use these to adjust folder/directory
    permissions. You can use **chmod 755 <filename>** as a quick fix but that’s not
    the best of habits to get into. You don’t want to provide more freedom than is
    necessary. Take some time to review the CHMOD details that were provided [*Chapter
    3*](B21223_03.xhtml#_idTextAnchor052) and/or also do some independent research.
    That’s an area that is fairly easy to learn and worth the skills gained.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 4*](B21223_04.xhtml#_idTextAnchor076), you only created a sample
    configuration file. Here, you’re going to create a functioning Logstash configuration
    file. Navigate to the **/etc/logstash/** directory. If it’s present, use your
    favorite editor to open it; otherwise, type **sudo nano logstash.conf** to edit
    it. If it isn’t present, type **touch logstash.conf** to create it. Then, **ls**
    to verify it was created and go to your favorite editor or **sudo nano logstash.conf**
    to edit it. Input the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once you’ve finished editing the file, press *Ctrl* + *X* to exit. Select *Y*
    when you’re prompted, then type **sudo systemctl restart logstash**, and give
    it a few minutes to restart.
  prefs: []
  type: TYPE_NORMAL
- en: As before, you will want to place the IP address of where your Elasticsearch
    instance is being hosted in the **hosts** field instead of **YOUR_ELASTICSEARCH_IP**
    and your Elastic credentials instead of **ElasticSuperUserPassword** in the password
    field.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll notice some odd data that we placed in the filters section. This is a
    basic and very popular data enrichment filter that’s used with Logstash. It helps
    to identify the incoming data based on the time it was generated, and the importance
    and classification of the data before passing it on to Elasticsearch for more
    efficient indexing.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we did in [*Chapter 4*](B21223_04.xhtml#_idTextAnchor076), we will perform
    a configuration validation and syntax check of our newly created file. Type the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Be patient. As you may recall, this may take a minute or two to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we dove into moving data from endpoint devices to the SIEM
    solution we created in previous chapters – to the ELK stack. We discovered that
    the process of moving such data has an enormous level of variable configurations
    and we learned that independent research will likely be required by anyone who
    wishes to set up such an environment. We created bare-bones use cases to show
    how the data flows and discover how to set up the data shipping agents so that
    they work with the ELK stack.
  prefs: []
  type: TYPE_NORMAL
- en: We also took some time to explore the different types of data shippers, namely
    Beats. Here, instead of there being a single agent, many smaller agents can each
    be installed individually with greater efficiency, allowing the security team
    to only harness what is needed most. We compared this to the much easier-to-install
    but robust Elastic Agent, which contains more overhead to cover more potential
    security areas but will also be more dependent on a device’s resources, as well
    as the resources of the ELK stack. We learned how each of these agents shipped
    the data either directly to Elasticsearch or first to Logstash and then on to
    Elasticsearch. We provided an example of a filter, which provides data enrichment
    through Logstash.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve discovered how to harvest and ship the data, in this next chapter,
    we’ll study the data that we’ll need to grab. There, we will examine the different
    types of data out there and the different types of formats it can be presented
    in. We’ll get a bigger understanding of how bad actors can sometimes obfuscate
    or otherwise maliciously alter this data to hide their activities or conduct bad
    deeds. We will also learn how to identify such anomalous behavior so that when
    it arrives in our SIEM environment, we will be able to respond to potential threats
    more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is port forwarding?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a marine facility redirects incoming vessels to another location
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A computer networking technique that redirects traffic from one machine to another
    based on communication ports
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When a user physically removes the **network interface card** (**NIC**) and
    places it into another device
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: port forwarding must be the same port number on both sending
    and receiving devices.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: False, they must be different
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: False, but they may be the same
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How many different Beats can a user have on a single device?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As many as they like, so long as they aren’t colliding on ports or other resources
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: No more than one at a time, ever
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Two, so long as they’re not the same Beats type
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Pronounced *YAML*, the **.yml** files are used for what type of operation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They are used for developing hard-coded add-on instructions for the application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: They provide recipes for a type of vegetable that is often served with green
    eggs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: They are used to configure variable settings for the applications to which they
    belong
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a filter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s a piece of code that’s designed to prevent your device from displaying
    offensive language
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: They keep the air flowing through your physical device, clean and free of debris
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: They provide additional tables to be applied to incoming data for parsing and
    enriching the data
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An American grunge rock back from the 1990s
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alternate Windows Filebeat** **installation**: [https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation-configuration.xhtml](https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-installation-configuration.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCP and UDP Protocols – Explained in Plain** **English**: [https://www.freecodecamp.org/news/tcp-and-udp-protocols/](https://www.freecodecamp.org/news/tcp-and-udp-protocols/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What computer networks are and how to actually understand** **them**: [https://www.freecodecamp.org/news/computer-networks-and-how-to-actually-understand-them-c1401908172d/](https://www.freecodecamp.org/news/computer-networks-and-how-to-actually-understand-them-c1401908172d/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filebeat listing of Data Collection** **modules**: [https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules.xhtml](https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adding a Fleet Server to manage your elastic** **agents**: [https://www.elastic.co/guide/en/fleet/current/add-fleet-server-on-prem.xhtml#add-fleet-server-on-prem-add-server](https://www.elastic.co/guide/en/fleet/current/add-fleet-server-on-prem.xhtml#add-fleet-server-on-prem-add-server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metricbeat**: [https://www.elastic.co/guide/en/beats/metricbeat/8.11/metricbeat-installation-configuration.xhtml](https://www.elastic.co/guide/en/beats/metricbeat/8.11/metricbeat-installation-configuration.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Winlogbeat**: [https://www.elastic.co/guide/en/beats/winlogbeat/8.11/winlogbeat-installation-configuration.xhtml](https://www.elastic.co/guide/en/beats/winlogbeat/8.11/winlogbeat-installation-configuration.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Heartbeat**: [https://www.elastic.co/guide/en/beats/heartbeat/8.11/heartbeat-installation-configuration.xhtml](https://www.elastic.co/guide/en/beats/heartbeat/8.11/heartbeat-installation-configuration.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auditbeat**: [https://www.elastic.co/guide/en/beats/auditbeat/8.11/auditbeat-installation-configuration.xhtml](https://www.elastic.co/guide/en/beats/auditbeat/8.11/auditbeat-installation-configuration.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Migrate from Beats to Elastic** **Agent**: [https://www.elastic.co/guide/en/fleet/current/migrate-beats-to-agent.xhtml](https://www.elastic.co/guide/en/fleet/current/migrate-beats-to-agent.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
