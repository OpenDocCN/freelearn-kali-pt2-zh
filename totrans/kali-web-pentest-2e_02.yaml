- en: Reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Passive reconnaissance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Recon-ng to gather information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning and identifying services with Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying web application firewalls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying HTTPS encryption parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the browser's developer tools to analyze and alter basic behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining and modifying cookies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking advantage of robots.txt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every penetration test, be it for a network or a web application, has a workflow;
    it has a series of stages that should be completed in order to increase our chances
    of finding and exploiting every possible vulnerability affecting our targets,
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning tracks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a network penetration testing scenario, reconnaissance is the phase where
    testers must identify all the assets in the network, firewalls, and intrusion
    detection systems. They also gather the maximum information about the company,
    the network, and the employees.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, for a web application penetration test, this stage will be all
    about getting to know the application, the database, the users, the server, and
    the relationship between the application and us.
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance is an essential stage in every penetration test; the more information
    we have about our target, the more options we will have when it comes to finding
    vulnerabilities and exploiting them.
  prefs: []
  type: TYPE_NORMAL
- en: Passive reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passive reconnaissance is something we do without directly interacting with
    our target, that is, we gather information about it from third parties such as
    search engines, cache databases, reputation monitoring sites, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will be requesting information from multiple online services,
    also referred to as **open source intelligence** (**OSINT**), in order to build
    a general picture of our target and discover information that is useful from a
    penetration testing perspective, in the scenario that we are testing a publicly
    available site or application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Given that in this recipe, we will request information from multiple public
    sources, we will need for our Kali virtual machine to be able to connect to the
    internet, hence, we will need to configure its network settings to use a NAT adapter.
    To do this, follow the recipe *Configuring virtual machines for correct communication*
    in [Chapter 1](b5aed3bb-313a-47ca-bc62-af4d938f7a3f.xhtml), *Setting Up Kali Linux
    and the Testing Lab*, and select NAT instead of Host-only Adapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be using zonetransfer.me as our target domain name. The domain zonetransfer.me
    has been created by Robin Wood, from DigiNinja ([https://digi.ninja/projects/zonetransferme.php](https://digi.ninja/projects/zonetransferme.php)),
    to illustrate the risks of allowing public DNS zone transfers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first use `whois` on the domain name to get the registration information
    about it. Let''s try testing a domain such as zonetransfer.me:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/6077d557-7a36-4590-b44b-b95954bea949.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another tool used to get information about the domain name and DNS resolution
    is `dig`. We can, for example, query the nameservers for the target domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/09272dc1-7c54-4fa1-a189-f5efbb87395a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have the information on the DNS servers, we can attempt a zone transfer
    attack to get all the hostnames the server resolves. For this we use `dig`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/155a7909-7528-4a72-a625-458f2c9d1db7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Luckily for us, the server is vulnerable and gives us a complete list of subdomains
    and the hosts it resolves to. Sometimes we can find some low-hanging fruits to
    exploit on them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now use `theharvester` to identify email addresses, hostnames, and IP addresses
    related to the target domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/4b075981-c6d6-4b36-9b67-88702444aa88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For each web server in scope, we want to know what software and which versions
    it uses; a way of doing this without directly querying the server is through Netcraft.
    Browse to [https://toolbar.netcraft.com/site_report](https://toolbar.netcraft.com/site_report)
    and enter the URL in the search box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3433585c-ac8c-46c1-b10e-be71ecd37988.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, sometimes it may be useful to know what the site looked like before the
    last update; maybe it had some valuable information that was later removed. To
    get a static copy of a previous version of our targets, we can use Wayback Machine
    from [https://archive.org/web/web.php](https://archive.org/web/web.php):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/048d34d4-3590-4ebe-83a8-8a4abb11ab85.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we used multiple tools to gather different pieces of information
    about our target. We started running `whois`, this Linux command queries the domain
    registration details, and with it we can obtain the addresses of nameservers and
    owner details such as company, email address, phone number, and others. `whois`
    can also query information about IP addresses, showing information about the company
    owning the network segment the address belongs to. Next, we used `dig` to get
    information about the domain servers and then to perform a zone transfer and obtain
    the complete list of hosts resolved by the queried server; this works only on
    servers that are not correctly configured.
  prefs: []
  type: TYPE_NORMAL
- en: By using `theharvester`, we obtained email addresses, hostnames, and IP addresses
    related to the target domain. The options used in this recipe were `-b all`, to
    use all the supported search engines, and `-d zonetransfer.me` to specify the
    target domain.
  prefs: []
  type: TYPE_NORMAL
- en: We then used Netcraft to obtain information about the technologies used by the
    site and a brief history of updates and changes; this allowed us to further plan
    the testing process without having to query the actual site.
  prefs: []
  type: TYPE_NORMAL
- en: Wayback Machine is a service that stores static copies of internet sites and
    keeps a record of their updates and versions; here, we can see the information
    published in older versions of the site and maybe obtain information published
    previously and subsequently removed. Sometimes, an update to a web application
    may leak sensitive data and such an update is rolled back or replaced by a new
    version, hence the usefulness of being able to see previous versions of the applications.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Additionally, we can use Google''s advanced search options ([https://support.google.com/websearch/answer/2466433](https://support.google.com/websearch/answer/2466433))
    to look for information about our target domain without directly accessing it.
    For example, by using a search like `site:site_to_look_into "target_domain"`,
    we can look for the presence of our target domain in pages where recently found
    vulnerabilities, leaked information or successful attacks have been published,
    some good places where we can look at are:'
  prefs: []
  type: TYPE_NORMAL
- en: openbugbounty.org: Open Bug Bounty is a site where independent security researchers
    report and disclose vulnerabilities (only Cross-Site Scripting and Cross-Site
    Request Forgery) on public facing websites. So this search in Google will return
    all mentions to "zonetransfer.me" made in openbugbounty.org.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pastebin.com: Pastebin is, among other uses, a very popular way for hackers
    to anonymously exfiltrate and publish information obtained during an attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'zone-h.org: Zone-H is a site where malicious hackers go and brag about their
    achievements, mostly the defacement of sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Recon-ng to gather information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recon-ng is an information-gathering tool that uses many different sources to
    gather data, for example, on Google, Twitter, and Shodan.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn the basics of Recon-ng and use it to gather public
    information about our target.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Recon-ng is ready to use as installed in Kali Linux, some of its modules
    require an API key to make queries to the online services. Also, having an API
    key will allow you to perform more advanced searches or avoid query limits in
    some services.
  prefs: []
  type: TYPE_NORMAL
- en: These keys can be generated by completing the registration on each search engine's
    website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s do a basic query to illustrate how Recon-ng works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start Recon-NG from Kali Linux, use the Applications menu (Applications
    | 01 - Information Gathering | recon-ng) or type the `recon-ng` command in a Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ef4e5429-95a3-4a89-a0d4-03aeb29b8c59.png)'
  prefs: []
  type: TYPE_IMG
- en: We will be presented with a command-line interface. To see the modules we have
    available, we can issue the `show modules` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's say we want to search all of the subdomains of a domain and the DNS server
    doesn't respond to zone transfer. We can brute force the subdomains; to do that,
    we first load the `brute_hosts` module: `use recon/domains-hosts/brute_hosts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To learn the options we need to configure when using any module, we use the `show
    options` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To assign a value to an option, we use the command `set`: `set source zonetransfer.me`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we have set all the options, we issue the `run` command to execute the
    module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e3229305-0f2b-48e8-a8b5-31230e8f1596.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will take some time for the brute force to complete and it will display
    lots of information. Once it finishes, we can query the Recon-ng database to get
    the discovered hosts (`show hosts`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/85af5fd4-9225-47bc-ab13-69f68014f9c9.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recon-ng is a wrapper for a multitude of tools and APIs that query search engines,
    social media, internet archives, and databases to obtain information about websites,
    web applications, servers, hosts, users, email addresses, and others. It works
    by integrating modules that provide different functionalities, such as searching
    Google, Twitter, LinkedIn, or Shodan, among others, or performing queries to DNS
    servers, like the one we used in this recipe. It also has modules for importing
    files into its database or for generating reports in various formats, such as
    HTML, MS Excel, or CSV.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another very useful tool for information gathering and OSINT, included by default
    in Kali Linux, is **Maltego** ([https://www.paterva.com/web7/buy/maltego-clients/maltego-ce.php](https://www.paterva.com/web7/buy/maltego-clients/maltego-ce.php)),
    a favorite of many penetration testers. This tool provides a graphical user interface
    that displays all of the analyzed elements (email addresses, people, domain names,
    companies, and so on) within a graph where the relationships between elements
    are visually shown. For example, the node representing a person will be connected
    by a line to that person's email address and that email address to the domain
    name it belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning and identifying services with Nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap is probably the most used port scanner in the world. It can be used to
    identify live hosts, scan TCP and UDP open ports, detect firewalls, get versions
    of services running in remote hosts, and even, with the use of scripts, find and
    exploit vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use Nmap to identify all the services running on our
    target application's server and their versions. For learning purposes, we will
    do this in several calls to Nmap, but it can be done using a single command.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All we need is to have our vulnerable `vm_1` running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the tasks in this recipe can be done via a single line command; they
    are shown separately here to better illustrate their functionalities and results:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we want to see whether the server is answering to a ping or if the host
    is up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/f1935f1e-9d7b-47db-8b70-b5e01f8f684f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, that we know that it''s up, let''s see which ports are open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/1fa7dcd6-1a4e-4fd2-804d-65658d91eda3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will tell Nmap to ask the server for the versions of services it is
    running and to guess the operating system based on that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/9dafb79c-d2cc-4521-b8f8-09d3e4dc5af5.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that our `vm_1` has, most likely, a Linux operating system (Nmap
    wasn't able to determine it exactly). It uses an Apache 2.2.14 web server, PHP
    5.3p1, Jetty 6.1.25, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap is a port scanner; this means that it sends packets to a number of TCP
    or UDP ports on the indicated IP address and checks whether there is a response.
    If there is, it means the port is open; hence, a service is running on that port.
  prefs: []
  type: TYPE_NORMAL
- en: In the first command, with the `-sn` parameter, we instructed Nmap to only check
    whether the server was responding to the ICMP requests (or pings). Our server
    responded, so it is alive.
  prefs: []
  type: TYPE_NORMAL
- en: The second command is the simplest way to call Nmap; it only specifies the target
    IP address. What this does is ping the server; if it responds, then Nmap sends
    probes to a list of 1,000 TCP ports to see which one responds and how they do
    it, and it then reports the results showing which ports are open.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third command adds the following two tasks to the second one:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-sV` asks for the banner-header or self identification of each open port found,
    which is what it uses as the version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-O` tells Nmap to try to guess the operating system running on the target
    using the information collected from open ports and versions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Other useful parameters when using Nmap are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-sT`: By default, when it is run as a root user, Nmap uses a type of scan
    known as the SYN scan. Using this parameter, we force the scanner to perform a
    full connect scan. It is slower, and will leave a record in the server''s logs,
    but it is less likely to be detected by an intrusion detection system or blocked
    by a firewall.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Pn`: If we already know that the host is alive or is not responding to pings,
    we can use this parameter to tell Nmap to skip the ping test and scan all the
    specified targets, assuming they are up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v`: This is the verbose mode. Nmap will show more information about what
    it is doing and the responses it gets. This parameter can be used multiple times
    in the same command: the more it''s used, the more verbose it gets (that is, `-vv`
    or `-v -v -v -v`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p N1,N2,...,Nn`: We might want to use this parameter if we want to test specific
    ports or some non-standard ports, where `N1` to `Nn` are the port numbers that
    we want Nmap to scan. For example, to scan ports `21`, `80` to `90`, and `137`,
    the parameters will be `-p 21,80-90,137`. Also, using `-p-` Nmap will scan all
    ports from `0` to `65`, and `536`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--script=script_name`: Nmap includes a lot of useful scripts for vulnerability
    checking, scanning or identification, login tests, command execution, user enumeration,
    and so on. Use this parameter to tell Nmap to run scripts over the target''s open
    ports. You may want to check the use of some Nmap scripts at: [https://nmap.org/nsedoc/scripts/](https://nmap.org/nsedoc/scripts/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although it''s the most popular, Nmap is not the only port scanner available
    and, depending on varying tastes, maybe not the best either. There are some other
    alternatives included in Kali Linux, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`unicornscan`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hping3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`masscan`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`amap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit's scanning modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying web application firewalls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **web application firewall** (**WAF**) is a device or a piece of software
    that checks packages
  prefs: []
  type: TYPE_NORMAL
- en: sent to a web server in order to identify and block those that might be malicious,
    usually based on signatures or regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: We can end up dealing with a lot of problems in our penetration test if an undetected
    WAF blocks our requests or bans our IP address. When performing a penetration
    test, the reconnaissance phase must include the detection and identification of
    a WAF, **intrusion detection system** (**IDS**), or an **intrusion prevention
    system** (**IPS**). This is required in order to take the necessary measures to
    prevent being blocked or banned by these protection devices.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use different methods, along with the tools included
    in Kali Linux, to detect and identify the presence of a web application firewall
    between our target and us.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are different ways of detecting if an application is protected by a WAF
    or IDS; being blocked and/or blacklisted after launching an attack is the worst
    of all, so we will use Nmap and `wafw00f` to identify whether our target is behind
    a WAF before going all in:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nmap includes a couple of scripts to test for the presence of a WAF in all
    of the detected HTTP ports. Let''s try some on our vulnerable `vm_1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/ba154cdd-7ee8-4e60-8abd-9ccda31b2a82.png)'
  prefs: []
  type: TYPE_IMG
- en: It seems like we don't have a WAF protecting this server
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try the same command on a server that actually has a firewall protecting
    it. Here, we will use `example.com` as a made-up name; however, you may try it
    over any protected server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/028f15ce-b1ca-419c-9fe4-685688d3bc0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is another script in Nmap that can help us to identify the WAF being
    used more precisely. The script is `http-waf-fingerprint`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Another tool that Kali Linux includes to help us in detecting and identifying
    a WAF is `wafw00f`. Suppose `www.example.com` is a WAF-protected site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/10c26fbe-00cd-4254-a927-05c5f19054e2.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WAF detection works by sending specific requests to servers and then analyzing
    the response; for example, in the case of `http-waf-detect`, it sends some basic
    malicious packets and compares the responses while looking for an indicator that
    a packet was blocked, refused, or detected. The same occurs with `http-waf-fingerprint`,
    but this script also tries to interpret that response and classify it according
    to known patterns of various IDSs and WAFs. The same applies to `wafw00f`.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying HTTPS encryption parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are, at a certain level, used to assuming that when a connection uses HTTPS
    with SSL or TLS encryption, it is secured and any attacker that intercepts it
    will only receive a series of meaningless numbers. Well, this may not be absolutely
    true; the HTTPS servers need to be correctly configured to provide a strong layer
    of encryption and to protect users from **man-in-the-middle** (**MITM**) attacks
    or cryptanalysis. A number of vulnerabilities in the implementation and design
    of the SSL protocol have been discovered and its successor, TLS, has also been
    found to be vulnerable under certain configurations, thus making the testing of
    secure connections mandatory in any web application penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use tools such as Nmap, SSLScan, and TestSSL to analyze
    the configuration (from the client's perspective) of the server in terms of its
    secure communication.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the tools we will use in this recipe, TestSSL, is not installed by default
    in Kali Linux but is available in its software repository. We need to configure
    our Kali VM to use a NAT network adapter to allow it internet access, and execute
    the following commands in a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: After installing TestSSL, change the network adapter back to host-only so you
    can communicate with the vulnerable virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to the scans we did in previous recipes, `vm_1` has an HTTPS service
    running on port `443`; let''s see how secure it is:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To query the protocols and ciphers supported by an HTTPS site with Nmap, we
    need to scan the HTTPS ports and use the script `ssl-enum-ciphers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/3fc1299a-3ceb-431c-9acd-c5605148c80f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'SSLScan is a command-line tool dedicated to evaluating the SSL/TLS configuration
    of servers. To use it, we only need to add the server''s IP address or hostname
    (`sslscan 192.168.56.11`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a205d5c2-26b8-4b2d-b9c8-aa17cbb7cd6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'TestSSL shows a more detailed input than Nmap or SSLScan; its basic use only
    requires us to append the target to the command in the command line. It also allows
    for exporting output to multiple formats, such as CSV, JSON, or HTML (`testssl
    192.168.56.11`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/dc2b26dd-9e2b-437f-ba32-42fc9969dc2a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nmap, SSLScan, and TestSSL work by making multiple connections to the target
    HTTPS server by trying different cipher suites and client configurations to test
    what it accepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the results shown by all three tools, we can see some issues that can put
    the encrypted communication:'
  prefs: []
  type: TYPE_NORMAL
- en: Use of the SSLv3\. SSL protocol has been deprecated since 2015 and it has inherent
    vulnerabilities that make it prone to multiple attacks, such as Sweet32 ([https://sweet32.info/](https://sweet32.info/)),
    and POODLE ([https://www.openssl.org/~bodo/ssl-poodle.pdf](https://www.openssl.org/~bodo/ssl-poodle.pdf)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of RC4 and DES ciphers and SHA and MD5 hashes. RC4 and DES encryption algorithms
    are now considered cryptographically weak, as are the SHA and MD5 hashing algorithms.
    This is due to the improvement on processing power of modern computers and the
    fact that those algorithms can be broken in a realistic amount of time with such
    processing power.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of TLS 1.0\. TLS is the successor to SSL and its current version is 1.2\.
    While TLS 1.1 is still considered acceptable, allowing TLS 1.0 in a server is
    considered bad practice or a security concern.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The certificate is self-signed, uses a weak signature algorithm (SHA1), and
    the RSA key is not strong enough (1,024 bits).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a browser connects to a server using HTTPS, they exchange information on
    what ciphers the browser can use and which of those the server supports, and then
    they agree on using the higher complexity common to both of them. If an MITM attack
    is performed against a poorly configured HTTPS server, the attacker can trick
    the server by saying that the client only supports the weakest cipher suite, say
    56 bits DES over SSLv2, and then the communication intercepted by the attacker
    will be encrypted with an algorithm that may be broken in a few days or hours
    with a modern computer.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tools shown here are not the only ones that can retrieve cipher information
    from SSL/TLS connections. There is another tool included in Kali Linux called
    SSLyze that could be used as an alternative and may sometimes give complimentary
    results to our tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'SSL/TLS information can also be obtained through OpenSSL commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using the browser's developer tools to analyze and alter basic behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebug is a browser add-on that allows us to analyze the inner components of
    a web page, such as table elements, CSS classes, and frames. It also has the ability
    to show us DOM objects, error codes, and request-response communication between
    the browser and server.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how to look into a web page's HTML source code
    and found a hidden input field that established some default values for the maximum
    size of a file. In this recipe, we will see how to use the browser's debugging
    extensions, in this particular case, Firebug for Firefox, or OWASP Mantra.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With `vm_1` running, go to your Kali VM and browse to `http://192.168.56.11/WackoPicko`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on Check this file option and then select Inspect Element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d8fb1761-bea6-4a32-ab8b-2b5af7411a0a.png)A browsers developer tools
    can also be triggered using *F12*, or *Ctrl* + *Shift* + *C*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a `type="hidden"` parameter on the first input of the form; double-click
    on `hidden` to select it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f0092442-a08d-42a9-bb99-296423384988.png)'
  prefs: []
  type: TYPE_IMG
- en: Replace `hidden` with `text`, or delete the whole property `type="hidden"` and
    hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the parameter value of `3000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace that value with `500000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2cb8088d-fbe6-4d47-9bdf-8ef2b7ec3674.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we see a new textbox on the page with `500000` as the value. We have just
    changed the file size limit and added a form field to change it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a web page is received by the browser, all its elements can be modified
    to alter the way the browser interprets it. If the page is reloaded, the version
    generated by the server
  prefs: []
  type: TYPE_NORMAL
- en: is shown again.
  prefs: []
  type: TYPE_NORMAL
- en: Developer Tools allow us to modify almost every aspect of how the page is shown
    in the browser; so, if there is control established client-side, we can manipulate
    it with this tool.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A browser''s developer tools are not only to unhide input or change values;
    it also has some other very useful tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Inspector is the tab we just used. It presents the HTML source in a hierarchical
    way, thus allowing us to modify its contents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Console tab shows errors, warnings, and some other messages generated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when loading the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Within Debugger, we can see the full HTML source, set breakpoints that will
    interrupt the page load when the process reaches them, and check and modify variable
    values when running scripts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Style Editor tab is used to view and modify the CSS styles used by the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Performance tab, we can calculate stats about the time and resources
    used by dynamic and static elements loaded on the page. From a developer's perspective,
    this is useful for detecting bottlenecks and excessive use of computing power
    in client-side code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory can be used to take snapshots of the process's memory; this is useful
    if we want to look for sensitive information stored in memory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network displays the requests made to the server and its responses, their types,
    size, response time, and its order in a timeline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage shows the cookies and other client-side storage options and makes it
    possible to delete them or change their values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other tabs that can be enabled in the tools settings are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DOM
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Shader Editor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Canvas
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Audio
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scratchpad
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining and modifying cookies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cookies are small pieces of information sent by a web server to the client (browser)
    to store some information locally, related to that specific user. In modern web
    applications, cookies are used to store user-specific data, such as color theme
    configuration, object arrangement preferences, previous activity, and (more importantly
    for us) the session identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use the browser's tools to see the cookies' values,
    how they are stored, and how to modify them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our `vm_1` needs to be running. `192.168.56.11` will be used as the IP address
    for that machine and we will use Firefox as the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: The Storage tab in Developer Tools may not be enabled by default in Firefox;
    to enable it, we open developer tools (*F12* in the browser) and go to the Toolbox options
    (the gear icon on the right). Under Default Developer Tools, we tick the Storage
    box.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To view and edit the value of cookies, we can use the browser''s developer
    tools or the cookies manager and the plugin that we installed in [Chapter 1](b5aed3bb-313a-47ca-bc62-af4d938f7a3f.xhtml),
    *Setting Up Kali Linux and the Testing Lab*. Let''s try both methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to `http://192.168.56.11/WackoPicko`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Developer Tools and go to Storage | Cookies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/62d28d22-5ba5-46c0-9e8a-d733b42e2f71.png)'
  prefs: []
  type: TYPE_IMG
- en: We can change any of the cookie's values by double-clicking on them and entering
    a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can also use a plugin to check and edit cookies. On Firefox''s top
    bar, click on the Cookies Manager button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/48853926-df5e-45a9-9e9a-90def33f17fe.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding image, we can see all the cookies stored at that time, and
    the sites they belong to, with this add-on. We can also modify their values, delete
    them, and add new ones.
  prefs: []
  type: TYPE_NORMAL
- en: Select `PHPSESSID` from `192.168.56.11` and click on Edit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the Http Only value to Yes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9a433548-2350-4413-8c80-5250b5a4b525.png)'
  prefs: []
  type: TYPE_IMG
- en: The parameter we just changed (Http Only) tells the browser that this cookie
    is not allowed to be accessed by a client-side script.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cookies Manager is a browser add-on that allows us to view, modify, or delete
    existing cookies and to add new ones. As some applications rely on values stored
    in these cookies, an attacker can use them to inject malicious patterns that might
    alter the behavior of the page or to provide fake information in order to gain
    a higher level of privilege.
  prefs: []
  type: TYPE_NORMAL
- en: Also, in modern web applications, session cookies are commonly used and often
    are the only source of user identification once the login is done. This leads
    to the possibility of impersonating a valid user by replacing the cookie's value
    for the user of an already active session.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When implementing penetration testing on web applications, we should pay attention
    to certain characteristics in the cookies to verify that they are secure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Http Only: If a cookie has this flag set, then it will not be accessible through
    scripting code; this means that the cookie values can only be altered from the
    server. We can still use the browser tools or a plugin to change them, but not
    a script within the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Secure: The cookie won''t be transferred through unencrypted channels; if a
    site uses HTTPS and this flag is set in the cookie, the browser won''t take or
    send the cookie when the requests are done through HTTP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Expires: If the expiration date is set to the future, it means that the cookie
    is stored in a local file and will be kept even after the browser closes. An attacker
    could get this cookie directly from the file and perhaps steal a valid user''s
    session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking advantage of robots.txt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One step further into reconnaissance, we need to figure out if there is any
    page or directory in the site that is not linked to what is shown to the common
    user, for example, a login page to the intranet or to the **Content Management
    Systems** (**CMS**) administration. Finding a site similar to this will expand
    our testing surface considerably and give us some important clues about the application
    and its infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use the `robots.txt` file to discover some files and
    directories that may not be linked to anywhere in the main application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To illustrate how a penetration tester can take advantage of `robots.txt`,
    we will use `vicnum`, a vulnerable web application in `vm_1`, which contains three
    number and word guessing games. We will use information obtained through `robots.txt`
    to increase our chances of winning those games:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to `http://192.168.56.11/vicnum/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we add `robots.txt` to the URL and we will see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fe6f2c57-161e-4c1f-a4fc-6a29c2affcdb.png)'
  prefs: []
  type: TYPE_IMG
- en: This file tells search engines that the indexing of the directories `jotto`
    and `cgi-bin` is not allowed for every browser (User-agent). However, this doesn't
    mean that we cannot browse them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s browse to `http://192.168.56.11/vicnum/cgi-bin/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2c4674ad-f39d-4e67-ac35-b0a76457d4d5.png)'
  prefs: []
  type: TYPE_IMG
- en: We can click and navigate directly to any of the Perl scripts (.pl files) in
    this directory.
  prefs: []
  type: TYPE_NORMAL
- en: Let's browse to `http://192.168.56.11/vicnum/jotto/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the file named `jotto`. You will see something similar to the
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](assets/32a113c9-4f11-4665-a2bb-b673be5b0001.png)'
  prefs: []
  type: TYPE_IMG
- en: '`jotto` is a game about guessing five-character words; could this be the list
    of possible answers? Play the game using words in that list as answers. We have
    already hacked the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0fe8ecc5-6fcf-4fdf-9648-96bae2076703.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`robots.txt` is a file used by web servers to tell search engines about the
    directories or files that they should index and what they are not allowed to look
    into. Taking the perspective of an attacker, this tells us whether there is a
    directory in the server that is accessible but hidden to the public using what
    is called **security through obscurity** (that is, assuming that users won''t
    discover the existence of something if they are not told about it).'
  prefs: []
  type: TYPE_NORMAL
