- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Wireless and Bluetooth Attacks
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线和蓝牙攻击
- en: The dominance of mobile devices has led the majority of companies to adopt **Bring
    Your Own Devices** (**BYOD**) and the need to provide instant network connectivity,
    with wireless networks becoming the ubiquitous access point to the internet. Unfortunately,
    the convenience of wireless access is accompanied by an increase in effective
    attacks that result in the theft of data and unauthorized access, as well as the
    denial of service of network resources. Kali provides several tools to configure
    and launch these wireless attacks, allowing organizations to improve security.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备的主导地位促使大多数公司采纳**自带设备**（**BYOD**），并需要提供即时的网络连接，使无线网络成为普遍的互联网接入点。不幸的是，无线接入的便利性伴随着有效攻击的增加，这些攻击可能导致数据盗窃、未经授权的访问以及网络资源的服务拒绝。Kali提供了多种工具来配置并发起这些无线攻击，从而帮助组织提高安全性。
- en: 'In this chapter, we will examine several housekeeping tasks and wireless attacks,
    including the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨几个日常管理任务和无线攻击，包括以下主题：
- en: Configuring Kali for wireless and Bluetooth attacks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Kali进行无线和蓝牙攻击
- en: Wireless and Bluetooth reconnaissance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无线和蓝牙侦察
- en: Bypassing a hidden **Service Set Identifier** (**SSID**)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过隐藏的**服务集标识符**（**SSID**）
- en: Bypassing MAC address authentication and open authentication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过MAC地址认证和开放认证
- en: Compromising WPA/WPA2 encryption and performing **Man-in-The-Middle** (**MiTM**)
    attacks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解WPA/WPA2加密并执行**中间人攻击**（**MiTM**）
- en: Attacking wireless routers with Reaver
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Reaver攻击无线路由器
- en: '**Denial-of-Service** (**DoS**) attacks against wireless and Bluetooth communication'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拒绝服务**（**DoS**）攻击针对无线和蓝牙通信'
- en: Introduction to wireless and Bluetooth technologies
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线和蓝牙技术介绍
- en: Wireless technology provides the ability to communicate between two or more
    entities over distances without the use of wires or cables of any sort. This utilizes
    **radio frequency** (**RF**) as well as **infrared** (**IR**) waves.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无线技术使得两个或多个实体可以在没有任何类型的电线或电缆的情况下进行远距离通信。它利用**无线电频率**（**RF**）和**红外线**（**IR**）波。
- en: '*Table 6.1* outlines the different wireless technologies with the IEEE standards
    they support, the radio frequency that they operate on, data bit rates, and network
    ranges and size:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*表6.1*概述了不同的无线技术，支持的IEEE标准、操作的无线频率、数据比特率以及网络范围和大小：'
- en: '| **Name** | **Bluetooth Classic** | **Bluetooth 4.0 Low Energy (BLE)** | **ZigBee**
    | **Wi-Fi** | **Wi-Fi 5/6** |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **蓝牙经典** | **蓝牙4.0低能耗（BLE）** | **ZigBee** | **Wi-Fi** | **Wi-Fi
    5/6** |'
- en: '| IEEE Standard | 802.15.1 | 802.15.1 | 802.15.4 | 802.11 (a, b, g, n) | 802.11
    (ac, ax) |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| IEEE标准 | 802.15.1 | 802.15.1 | 802.15.4 | 802.11（a, b, g, n） | 802.11（ac,
    ax） |'
- en: '| Frequency (GHz) | 2.4 | 2.4 | 0.868, 0.915, 2.4 | 2.4 and 5 | ac= 5, ax=2.4
    and 5 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 频率（GHz） | 2.4 | 2.4 | 0.868, 0.915, 2.4 | 2.4 和 5 | ac=5, ax=2.4 和 5 |'
- en: '| Maximum raw bit rate (Mbps) | 1-3 | 1 | 0.250 | 11 (b), 54 (g), 600 (n) |
    433(ac)600.4 (ax) |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 最大原始比特率（Mbps） | 1-3 | 1 | 0.250 | 11（b），54（g），600（n） | 433（ac）600.4（ax） |'
- en: '| Typical data throughput (Mbps) | 0.7-2.1 | 0.27 | 0.2 | 7 (b), 25 (g), 150
    (n) | 6933 (ac)9607.8(ax) |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 典型数据吞吐量（Mbps） | 0.7-2.1 | 0.27 | 0.2 | 7（b），25（g），150（n） | 6933（ac）9607.8（ax）
    |'
- en: '| Maximum (Outdoor) Range (Meters) | 10 (class 2), 100 (class 1) | 50 | 10-100
    | 100-250 | ac=35-110 ax=70-240 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 最大（户外）范围（米） | 10（2类），100（1类） | 50 | 10-100 | 100-250 | ac=35-110 ax=70-240
    |'
- en: '| Network Size | 7 | Undefined | 64,000+ | 255 | 8 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 网络大小 | 7 | 未定义 | 64,000+ | 255 | 8 |'
- en: 'Table 6.1: A comparison of different types of wireless technologies'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.1：不同类型无线技术的比较
- en: In this chapter, we will focus on two main wireless technologies, Bluetooth
    and Wi-Fi. The main difference is Wi-Fi can provide long-range and high-speed
    internet and Bluetooth is designed for short-range devices for sharing information.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍两种主要的无线技术：蓝牙和Wi-Fi。主要区别在于，Wi-Fi能够提供长距离和高速互联网，而蓝牙则为短距离设备设计，用于共享信息。
- en: Configuring Kali for wireless attacks
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Kali进行无线攻击
- en: Kali Linux is pre-equipped with several tools to facilitate the testing of wireless
    networks; however, these attacks require extensive configuration to be fully effective.
    In addition, testers should acquire a strong background in wireless networking
    before they implement attacks or audit a wireless network.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux预装了多种工具，以便于无线网络的测试；然而，这些攻击需要广泛的配置才能完全有效。此外，测试人员在实施攻击或审计无线网络之前，应具备扎实的无线网络背景。
- en: The most important tool in wireless security testing is the wireless adapter,
    which connects to the wireless **Access Point** (**AP**). It must support the
    tools that are used, especially the `aircrack-ng` suite of tools; in particular,
    the card’s chipset, and drivers must possess the ability to inject wireless packets
    into a communication stream.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无线安全测试中最重要的工具是无线适配器，它连接到无线**接入点**（**AP**）。它必须支持使用的工具，尤其是`aircrack-ng`工具套件；特别是，卡的芯片组和驱动程序必须具备将无线数据包注入通信流的能力。
- en: This is a requirement for attacks that require specific packet types to be injected
    into the traffic stream between the target and the victim. The injected packets
    can cause a DoS, allowing an attacker to capture handshake data that’s needed
    to crack encryption keys or support other wireless attacks.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对需要将特定数据包类型注入目标和受害者之间流量的攻击的要求。注入的数据包可以导致DoS攻击，使攻击者能够捕获破解加密密钥所需的握手数据或支持其他无线攻击。
- en: The most reliable adapters that you can use with Kali are the Alfa Network cards,
    especially the AWUS036NH or Wi-Fi Pineapple adapters or TP-Link N150 TL-WN722N
    version 1, which support wireless 802.11 b, g, and n protocols. Similarly, to
    perform the Bluetooth attacks, it is recommended you use an external dongle such
    as the TP-Link USB Bluetooth Adapter or WAVLINK Wireless Bluetooth CSR 4.0 Dongle.
    These cards generally cost less than $10 and are readily available online and
    will support all the tests and attacks that are delivered using Kali.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与Kali兼容的最可靠适配器是Alfa网络卡，特别是AWUS036NH或Wi-Fi Pineapple适配器，或者支持无线802.11 b、g和n协议的TP-Link
    N150 TL-WN722N版本1。同样，为了执行蓝牙攻击，建议使用外部加密狗，如TP-Link USB蓝牙适配器或WAVLINK无线蓝牙CSR 4.0加密狗。这些卡通常不到10美元，且可以在线轻松购买，支持Kali执行的所有测试和攻击。
- en: Wireless reconnaissance
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无线侦察
- en: The first step in conducting a wireless attack is to conduct reconnaissance—this
    identifies the exact target AP and highlights the other wireless networks that
    could impact testing.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 进行无线攻击的第一步是进行侦察——这有助于确定目标AP的确切位置，并突出显示可能影响测试的其他无线网络。
- en: If you are using a USB-connected wireless card to connect to a Kali virtual
    machine, make sure that the USB connection has been disconnected from the host
    operating system and attached to the virtual machine. If you are using VirtualBox,
    select the Kali Linux virtual machine, then click on **Settings.** Select the
    **USB** category, then click on the USB icon with the **+** symbol, then select
    the USB wireless or Bluetooth adapter. This should disconnect the USB from the
    host operating system and attach it to your VirtualBox. Similarly, for VMware,
    click on the **VM** from the main menu, click **Removable devices**, and select
    your wireless or Bluetooth device.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是USB连接的无线网卡连接到Kali虚拟机，请确保USB连接已经从宿主操作系统断开，并已连接到虚拟机。如果你使用的是VirtualBox，选择Kali
    Linux虚拟机，然后点击**设置**。选择**USB**类别，点击带有**+**符号的USB图标，然后选择USB无线或蓝牙适配器。这将断开USB与宿主操作系统的连接，并将其连接到你的VirtualBox。同样，对于VMware，点击主菜单中的**VM**，点击**可移动设备**，然后选择你的无线或蓝牙设备。
- en: 'Next, determine which wireless interfaces are available by running `iwconfig`
    from the command line, as shown in *Figure 6.1*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过在命令行中运行`iwconfig`来确定可用的无线接口，如*图6.1*所示：
- en: '![](../Images/B17765_06_01.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_06_01.png)'
- en: 'Figure 6.1: Wireless adapter list'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1：无线适配器列表
- en: 'For certain attacks, you may wish to increase the power output of the adapter.
    This is especially useful if you are collocated with a legitimate wireless AP,
    and you want the targets to connect to a false AP under your control rather than
    the legitimate AP. These false, or **rogue**, APs allow an attacker to intercept
    data and view or alter it as needed to support an attack. Attackers will frequently
    copy or clone a legitimate wireless network and then increase its transmission
    power compared to the legitimate site as a means of attracting victims. To increase
    power, the following command is used:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些攻击，你可能希望增加适配器的输出功率。如果你与一个合法的无线AP位于同一位置，并且希望目标连接到你控制的虚假AP而不是合法AP，这将特别有用。这些虚假或**恶意**AP允许攻击者截获数据，并根据需要查看或修改数据以支持攻击。攻击者经常会复制或克隆一个合法的无线网络，然后将其传输功率提高，以便吸引受害者。要增加功率，使用以下命令：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Many attacks will be conducted using `aircrack-ng` and its related tools. To
    start, we need to intercept or monitor wireless transmissions; therefore, we need
    to set the Kali communication interface with wireless capabilities to monitor
    mode using the `airmon-ng` command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 许多攻击将使用 `aircrack-ng` 及其相关工具进行。首先，我们需要拦截或监控无线传输；因此，我们需要通过 `airmon-ng` 命令将 Kali
    通信接口设置为监控模式：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The execution of the previous command is shown in *Figure 6.2*:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令的执行结果如 *图 6.2* 所示：
- en: '![](../Images/B17765_06_02.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_06_02.png)'
- en: 'Figure 6.2: Starting the monitoring mode using airmon-ng'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2：使用 airmon-ng 启动监控模式
- en: 'Note that the description that is returned indicates that there are some processes
    that could cause trouble. The most effective way to deal with these processes
    is to use a comprehensive `kill` command, as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，返回的描述表示有些进程可能会造成问题。处理这些进程的最有效方法是使用全面的 `kill` 命令，如下所示：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To view the local wireless environment, use the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看本地无线环境，请使用以下命令：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The previous command lists all the identified networks that can be found within
    the range of the wireless adapter at that particular point in time. It provides
    the **Basic Service Set Identifier** (**BSSID**) of the wireless nodes on the
    network, as identified by the MAC addresses.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令列出了在特定时间内无线适配器范围内能够发现的所有网络。它提供了网络上无线节点的**基本服务集标识符**（**BSSID**），该标识符是通过
    MAC 地址识别的。
- en: 'A **Media Access Control** (**MAC**) address uniquely identifies each node
    in a network. It takes the form of six pairs of hexadecimal digits (0 to 9 and
    the letters A to F) that are separated by colons or dashes, and usually appears
    in this format: `00:50:56:C0:00:01.`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**媒体访问控制**（**MAC**）地址唯一标识网络中的每个节点。它由六对十六进制数字（0 到 9 和字母 A 到 F）组成，并通过冒号或短横线分隔，通常以这种格式显示：`00:50:56:C0:00:01`。'
- en: 'It also shows you an indication of the relative output power, information on
    data packets that have been sent, bandwidth information including the channel
    used and data, information on the encryption used, and the **Extended Service
    Set Identifier** (**ESSID**) that provides the name of the wireless network. This
    information is shown in *Figure 6.3*; non-essential ESSIDs have been blurred out:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它还显示了相对输出功率的指示、已发送数据包的信息、包括所用频道和数据的带宽信息、加密使用情况的信息，以及提供无线网络名称的**扩展服务集标识符**（**ESSID**）。这些信息如
    *图 6.3* 所示，非必要的 ESSID 已被模糊处理：
- en: '![](../Images/B17765_06_03.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_06_03.png)'
- en: 'Figure 6.3: airodump-ng actively identifying different wireless APs'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3：airodump-ng 正在积极识别不同的无线 AP
- en: 'The `airodump` command cycles through the available wireless channels 1-13
    by default on 2.4 GHz and identifies the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`airodump` 命令默认在 2.4 GHz 上循环通过可用的无线频道 1-13，并识别以下内容：'
- en: The `BSSID`, which is the unique MAC address that identifies a wireless AP or
    router.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BSSID` 是唯一的 MAC 地址，用于标识无线接入点（AP）或路由器。'
- en: The `PWR`, or power, of each network. Although `airodump-ng` incorrectly shows
    the power as being negative, this is a reporting artifact. To obtain the proper
    positive values, access a terminal and run `airdriver-ng unload 36`, and then
    run `airdriver-ng load 35`.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个网络的 `PWR` 或功率。虽然 `airodump-ng` 错误地显示功率为负值，但这只是一个报告伪影。要获取正确的正值，请访问终端并运行 `airdriver-ng
    unload 36`，然后运行 `airdriver-ng load 35`。
- en: '`CH` shows the channel that is being used to broadcast.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CH` 显示正在用于广播的频道。'
- en: '`ENC` shows the encryption in use—it is `OPN`, or open, for no encryption being
    used, or `WEP` or `WPA`/`WPA2` if encryption is being used. `CIPHER` and `AUTH`
    provide additional encryption information.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENC` 显示所使用的加密方式——如果没有使用加密，则为 `OPN`（开放）；如果使用加密，则为 `WEP` 或 `WPA`/`WPA2`。`CIPHER`
    和 `AUTH` 提供附加的加密信息。'
- en: The `ESSID` is the common name of the wireless network and is made up of the
    APs that share the same SSID or name.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ESSID` 是无线网络的公共名称，由共享相同 SSID 或名称的接入点（AP）组成。'
- en: In the lower section of the terminal window, you will see the stations attempting
    to connect, or that are connected to the wireless network.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口的下部，你将看到尝试连接或已连接到无线网络的站点。
- en: 'Before we can interact with any of these (potential) target networks, we have
    to confirm that our wireless adapter is capable of packet injection. To do this,
    run the following command from a terminal shell prompt:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们与任何这些（潜在的）目标网络交互之前，我们必须确认我们的无线适配器能够进行数据包注入。为此，请在终端 shell 提示符下运行以下命令：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, `-9` indicates an injection test. That will provide the ability to inject
    the packets into the target Wi-Fi network.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`-9`表示注入测试。这将提供向目标Wi-Fi网络注入数据包的能力。
- en: Bypassing a hidden SSID
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过隐藏的SSID
- en: 'ESSID is the sequence of characters that uniquely identify a wireless local
    area network. Hiding the ESSID is a poor method of attempting to achieve security
    through obscurity; unfortunately, the ESSID can be obtained by doing either of
    the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ESSID是唯一标识无线局域网的字符序列。隐藏ESSID是一种试图通过模糊安全性来实现的差劲方法；不幸的是，可以通过以下任何一种方式获得ESSID：
- en: Sniffing the wireless environment and waiting for a client to associate to a
    network and then capturing that association
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嗅探无线环境并等待客户端连接到网络，然后捕获该连接
- en: Actively deauthenticating a client to force the client to associate and then
    capturing that association
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主动取消认证客户端，迫使客户端关联并捕获该关联
- en: 'The `aircrack` tools are particularly well suited to capture the data that’s
    needed to unhide a hidden ESSID, as shown in the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`aircrack`工具特别适合捕获解除隐藏ESSID所需的数据，如以下步骤所示：'
- en: 'At the command prompt, confirm that wireless is enabled on the attacking system
    by entering the following command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符下，确认攻击系统上已启用无线功能，通过输入以下命令：
- en: '[PRE5]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, use the following `ifconfig` command to review the available interfaces
    and to determine the exact name that’s used by your wireless system:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用以下`ifconfig`命令查看可用的接口，并确定无线系统使用的确切名称：
- en: '[PRE6]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Enable your wireless interface by entering the following (you may need to replace
    `wlan0` with an available wireless interface that was identified in the previous
    step):'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用无线接口，输入以下命令（你可能需要将`wlan0`替换为前一步骤中识别的可用无线接口）：
- en: '[PRE7]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you reconfirm with `ifconfig`, you will see that there is now a monitoring
    or `wlan0mon` address in use. Now use `airodump` to confirm the available wireless
    networks by entering the following command, and attackers should be able to see
    the screen in *Figure 6.4*:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你重新确认`ifconfig`，你会看到现在正在使用一个监视地址或`wlan0mon`。现在使用`airodump`确认可用的无线网络，输入以下命令，攻击者应该能够看到*图6.4*中的屏幕：
- en: '[PRE8]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/B17765_06_04.png)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_06_04.png)'
- en: 'Figure 6.4: airodump displaying all the available wireless networks in range'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.4：airodump显示所有可用的无线网络
- en: 'As you can see in *Figure 6.4*, the last network’s `ESSID` is identified only
    as `<length: 0>`. No other name or designation is used. The length of the hidden
    `ESSID` is identified as being composed of nine characters; however, this value
    may not be correct because the `ESSID` is hidden. The true `ESSID` length may
    actually be shorter or longer than nine characters.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '正如你在*图6.4*中看到的，最后一个网络的`ESSID`仅被识别为`<length: 0>`。没有使用其他名称或标识。隐藏的`ESSID`的长度被标识为由九个字符组成；然而，这个值可能不正确，因为`ESSID`是隐藏的。真实的`ESSID`长度实际上可能比九个字符更短或更长。'
- en: What is important is that there may be clients attached to this particular network.
    If clients are present, we will deauthenticate the client, forcing them to send
    the `ESSID` when they reconnect to the AP.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要的是，可能有客户端连接到这个特定网络。如果有客户端存在，我们将取消认证客户端，迫使他们在重新连接到AP时发送`ESSID`。
- en: 'Rerun `airodump` and filter out everything but the target AP. In this particular
    case, we will focus on collecting data from the hidden network on channel 11 using
    the following command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行`airodump`并过滤掉除了目标AP之外的所有内容。在这个特定案例中，我们将专注于使用以下命令从频道11上的隐藏网络收集数据：
- en: '[PRE9]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Executing this command removes the output from the multiple wireless sources,
    and allows the attacker to focus on the target `ESSID`, as shown in *Figure 6.5*:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将移除来自多个无线源的输出，并允许攻击者专注于目标`ESSID`，如*图6.5*所示：
- en: '![](../Images/B17765_06_05.png)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_06_05.png)'
- en: 'Figure 6.5: airodump running on channel 11'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.5：airodump在频道11上运行
- en: The data that we get when the `airodump` command is executed indicates that
    there is one station (`82:A4:64:7F:6D:88`) that is connected to the `BSSID` (`C0:05:C2:02:85:67`),
    which is, in turn, associated with the hidden `ESSID`.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行`airodump`命令时获得的数据表明，有一个站点（`82:A4:64:7F:6D:88`）连接到了`BSSID`（`C0:05:C2:02:85:67`），而该`BSSID`又与隐藏的`ESSID`相关联。
- en: To capture the `ESSID` as it is being transmitted, we need to create a condition
    where we know it will be sent—during the initial stage of the connection between
    a client and the AP.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了捕获正在传输的`ESSID`，我们需要创建一个条件，确保它会在客户端与AP连接的初始阶段发送。
- en: Therefore, we will launch a deauthentication attack against both the client
    and the AP by sending a stream of packets that breaks the connection between them
    and forces the client to re-associate with the AP.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，我们将通过发送一串数据包发起去认证攻击，既对客户端也对AP进行攻击，打破它们之间的连接，并迫使客户端重新与AP关联。
- en: 'To launch the attack, open a new command shell and enter the command that’s
    shown in the following screenshot (`0` indicates that we are launching a deauthentication
    attack, `10` indicates that we will send `10` deauthentication packets, `-a` is
    the target AP, and `c` is the client’s MAC address):'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要发起攻击，打开一个新的命令行窗口并输入如下截图所示的命令（`0`表示我们正在发起去认证攻击，`10`表示我们将发送`10`个去认证数据包，`-a`是目标AP，`c`是客户端的MAC地址）：
- en: '![](../Images/B17765_06_06.png)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_06_06.png)'
- en: 'Figure 6.6: Sending deauthentication packets to the connected station'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.6：向连接的站点发送去认证数据包
- en: After all the deauthentication packets have been sent, return to the original
    window that monitors the network connection on channel 11, as shown in *Figure
    6.7*:![](../Images/B17765_06_07.png)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有去认证数据包发送完毕后，返回到最初监视网络连接的窗口，如图*6.7*所示：![](../Images/B17765_06_07.png)
- en: 'Figure 6.7: Hidden ESSID is now visible in the airodump on channel 11'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.7：隐藏的ESSID现在在频道11的airodump中可见
- en: You will now see the `ESSID` in the clear.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将看到明文显示的`ESSID`。
- en: Knowing the `ESSID` helps an attacker to confirm that they are focused on the
    correct network (because most ESSIDs are based on the corporate identity) and
    facilitates the logon process.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 知道`ESSID`有助于攻击者确认他们专注于正确的网络（因为大多数ESSID基于企业身份），并有助于登录过程。
- en: Bypassing MAC address authentication and open authentication
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕过MAC地址认证和开放认证
- en: A MAC address is usually associated with a network adapter or a device with
    networking capability; for this reason, it’s frequently called the physical address.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: MAC地址通常与网络适配器或具有网络功能的设备关联；因此，它通常被称为物理地址。
- en: The first three pairs of digits in the MAC address are called the Organizational
    Unique Identifier, and they serve to identify the company that manufactured or
    sold the device. The last three pairs of digits are specific to the device and
    can be considered to be a serial number.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: MAC地址中的前三对数字称为组织唯一标识符，它们用于识别制造或销售设备的公司。最后三对数字是特定于设备的，可以视为设备的序列号。
- en: Because a MAC address is unique, it can be used to associate a user to a particular
    network, especially a wireless network. This has two significant implications—it
    can be used to identify a hacker or a legitimate network tester who has tried
    to access a network, and it can be used as a means of authenticating individuals
    and granting them access to a network.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因为MAC地址是唯一的，它可以用于将用户与特定网络关联，特别是无线网络。这有两个重要的意义——它可以用于识别试图访问网络的黑客或合法的网络测试人员，且它可以作为身份验证的手段，允许个人访问网络。
- en: During penetration testing, the tester may prefer to appear anonymous to a network.
    One way to support this anonymous profile is to change the MAC address of the
    attacking system.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试中，测试者可能希望在网络中保持匿名。一种支持这种匿名配置的方法是更改攻击系统的MAC地址。
- en: 'This can be done manually using the `ifconfig` command. To determine the existing
    MAC address, run the following from a command shell:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过手动使用`ifconfig`命令来完成。要确定现有的MAC地址，请从命令行窗口运行以下命令：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To manually change the IP address, use the following commands:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要手动更改IP地址，请使用以下命令：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Substitute different hexadecimal pairs for the `xx` expressions. This command
    will allow us to change the attacking system’s MAC address to one that is used
    and accepted by the victim network. The attacker must ensure that the MAC address
    is not already in use on the network, or the repeated MAC address may trigger
    an alarm if the network is being monitored.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 替换`xx`表达式中的十六进制对。此命令将允许我们将攻击系统的MAC地址更改为一个受害网络已使用并接受的地址。攻击者必须确保该MAC地址在网络中尚未被使用，否则，如果网络正在被监控，重复的MAC地址可能会触发警报。
- en: The wireless interface must be brought down before changing the MAC address.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改MAC地址之前，必须关闭无线接口。
- en: 'Kali also permits the use of an automated tool, `macchanger`. To change the
    attacker’s MAC address to a MAC address of a product produced by the same vendor,
    use the following `macchanger` command from a terminal window:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Kali还允许使用自动化工具`macchanger`。要将攻击者的MAC地址更改为由相同供应商生产的产品的MAC地址，可以从终端窗口使用以下`macchanger`命令：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To change the existing MAC address to a completely random MAC address, use
    the following command :'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要将现有的MAC地址更改为完全随机的MAC地址，请使用以下命令：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should be able to see the `macchanger` tool. *Figure 6.8* provides the
    new MAC address assigned for our wireless adapter:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够看到`macchanger`工具。*图6.8*提供了分配给我们无线适配器的新MAC地址：
- en: '![](../Images/B17765_06_08.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_06_08.png)'
- en: 'Figure 6.8: Changing the MAC address of the wireless adapter'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8：更改无线适配器的MAC地址
- en: Some attackers use automated scripts to change their MAC addresses on a frequent
    basis during testing to anonymize their activities.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一些攻击者在测试过程中使用自动化脚本频繁更改其MAC地址，以实现匿名化。
- en: Many organizations, particularly large academic groups, such as colleges and
    universities, use MAC address filtering to control who can access their wireless
    network resources.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织，特别是大型学术团体，如高校和大学，使用MAC地址过滤来控制谁可以访问其无线网络资源。
- en: MAC address filtering uses the unique MAC address on the network card to control
    access to network resources; in a typical configuration, the organization maintains
    a whitelist of the MAC addresses that are permitted to access the network. If
    an incoming MAC address is not on the approved access list, it is restricted from
    connecting to the network.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: MAC地址过滤使用网络卡上的唯一MAC地址来控制对网络资源的访问；在典型配置中，组织维护一个允许访问网络的MAC地址白名单。如果传入的MAC地址不在批准的访问列表中，则会限制其连接网络。
- en: Unfortunately, MAC address information is transmitted in the clear text. An
    attacker can use `airodump` to collect a list of accepted MAC addresses and then
    manually change their MAC address to one of the addresses that is accepted by
    the target network. Therefore, this type of filtering provides almost no real
    protection to a wireless network.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，MAC地址信息以明文形式传输。攻击者可以使用`airodump`收集已接受的MAC地址列表，然后手动将其MAC地址更改为目标网络接受的地址之一。因此，这种类型的过滤几乎无法为无线网络提供实际的保护。
- en: The next level of wireless network protection is provided using encryption.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 无线网络保护的下一个层级是使用加密来提供。
- en: Attacking WPA and WPA2
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 攻击WPA和WPA2
- en: '**Wi-Fi Protected Access** (**WPA**) and **Wi-Fi Protected Access 2** (**WPA2**)
    are wireless security protocols that were intended to address the security shortcomings
    of WEP. Because the WPA protocols dynamically generate a new key for each packet,
    they prevent the statistical analysis that caused WEP to fail. Nevertheless, they
    are vulnerable to some attack techniques as well.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**Wi-Fi保护访问**（**WPA**）和**Wi-Fi保护访问2**（**WPA2**）是无线安全协议，旨在解决WEP的安全缺陷。由于WPA协议为每个数据包动态生成新的密钥，它们能够防止导致WEP失败的统计分析。然而，它们也容易受到某些攻击技术的影响。'
- en: WPA and WPA2 are frequently deployed with a **pre-shared key** (**PSK**) to
    secure communications between the AP and the wireless clients. The PSK should
    be a random passphrase of at least 13 characters in length; if not, it is possible
    to determine the PSK using a brute-force attack by comparing the PSK to a known
    dictionary. This is the most common attack.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: WPA和WPA2通常与**预共享密钥**（**PSK**）一起使用，以确保AP和无线客户端之间的通信安全。PSK应至少为13个字符长度的随机密码短语；如果不是，可以通过暴力破解攻击将PSK与已知字典进行比较，从而确定PSK。这是最常见的攻击方式。
- en: Note that if configured in the Enterprise mode, which provides authentication
    using a RADIUS authentication server, it might require a more powerful machine
    to crack the key or perform different types of MiTM attacks.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果配置为企业模式，使用RADIUS认证服务器进行身份验证，可能需要更强大的计算机来破解密钥或执行不同类型的中间人攻击（MiTM）。
- en: Brute-force attacks
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暴力破解攻击
- en: Unlike WEP, which can be broken using a statistical analysis of a large number
    of packets, WPA decryption requires the attacker to create specific packet types
    that reveal details, such as the handshake between the AP and the client.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 与WEP不同，WEP可以通过对大量数据包进行统计分析来破解，而WPA解密要求攻击者创建特定的数据包类型，以揭示细节，例如AP与客户端之间的握手。
- en: 'To attack a WPA transmission, the following steps should be performed:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要攻击WPA传输，应执行以下步骤：
- en: Start the wireless adapter and use the `ifconfig` command to ensure that the
    monitor interface has been created.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动无线适配器，并使用`ifconfig`命令确保已创建监视接口。
- en: Use `sudo airodump-ng wlan0mon` to identify the target network.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sudo airodump-ng wlan0mon`来识别目标网络。
- en: 'Start capturing traffic between the target AP and the client using the following
    command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令开始捕获目标AP与客户端之间的流量：
- en: '[PRE14]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Set `-c` to monitor a specific channel, `--write` to write the output to a file
    for a dictionary attack later, and the `--showack` flag to ensure that the client
    computer acknowledges your request to deauthenticate it from the wireless AP.
    A typical output from the above command is shown in *Figure 6.9*:![](../Images/B17765_06_09.png)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`-c`来监视特定频道，`--write`将输出写入文件以供稍后的字典攻击使用，`--showack`标志确保客户端计算机确认你请求将其从无线AP去认证。上述命令的典型输出如*图6.9*所示：![](../Images/B17765_06_09.png)
- en: 'Figure 6.9: airodump on specific BSSID on channel 11'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.9：在频道11上对特定BSSID的airodump
- en: 'Leave this terminal window open and open a second terminal window to launch
    a deauthentication attack; this will force the user to reauthenticate to the target
    AP and re-exchange the WPA key. The deauthentication attack command is shown as
    follows:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持这个终端窗口打开，并打开第二个终端窗口来发起去认证攻击；这将迫使用户重新认证目标AP并重新交换WPA密钥。去认证攻击命令如下所示：
- en: '[PRE15]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Figure 6.10* shows `aireplay-ng` in action for deauthenticating a station
    connected to a particular BSSID:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图6.10*展示了`aireplay-ng`在去认证连接到特定BSSID的站点时的实际操作：'
- en: '![](../Images/B17765_06_10.png)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B17765_06_10.png)'
- en: 'Figure 6.10: Deauthentication of the station from the BSSID'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.10：将站点从BSSID去认证
- en: A successful deauthentication attack will show `ACKs`, which indicates that
    the client who was connected to the target AP has acknowledged the deauthentication
    command that was just sent.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功的去认证攻击将显示`ACKs`，这表示连接到目标AP的客户端已确认刚刚发送的去认证命令。
- en: Review the original command shell that was kept open to monitor the wireless
    transmission, and ensure that you capture the four-way handshake. A successful
    WPA handshake will be identified in the top-right corner of the console. In the
    following example, the data indicates a WPA handshake value of `C2:B3:7B:17:00:B7`:![](../Images/B17765_06_11.png)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查原始命令行窗口，保持开启以监控无线传输，并确保捕获到四路握手。成功的WPA握手将在控制台的右上角标识出来。在以下示例中，数据表明WPA握手值为`C2:B3:7B:17:00:B7`：![](../Images/B17765_06_11.png)
- en: 'Figure 6.11: Successful capture of a wireless handshake for a specific BSSID'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.11：成功捕获特定BSSID的无线握手
- en: Use `aircrack` to crack the WPA key using a defined wordlist. The filename that
    was defined by the attacker for collecting handshake data will be located in the
    root directory, and the `.cap` extension will be appended to it.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`aircrack`通过定义的词表破解WPA密钥。攻击者为收集握手数据定义的文件名将位于根目录，并附加`.cap`扩展名。
- en: In Kali, wordlists are located in the `/usr/share/wordlists` directory. Although
    several wordlists are available, it is recommended that you download lists that
    will be more effective in breaking common passwords.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kali中，词表位于`/usr/share/wordlists`目录中。虽然有多个词表可用，但建议下载更有效破解常见密码的列表。
- en: 'In the previous example, the key was preplaced in the password list. Undertaking
    a dictionary attack for a long, complex password can take several hours, depending
    on the system configuration. The following command uses `passwordlist` as the
    source wordlist (attackers can also utilize the password list located in the `/usr/share/wordlists/`folder
    within Kali):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，密钥已预先放入密码列表中。对一个长且复杂的密码进行字典攻击可能需要几个小时，具体时间取决于系统配置。以下命令使用`passwordlist`作为源词表（攻击者也可以使用位于Kali的`/usr/share/wordlists/`文件夹中的密码列表）：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Figure 6.12* shows the results from successfully cracking the WPA key; the
    key to the network named “Hidden” was found to be `Letmein87` after testing six
    well-known keys:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.12*展示了成功破解WPA密钥的结果；经过测试六个常见密钥后，网络名为“Hidden”的密钥被发现是`Letmein87`：'
- en: '![](../Images/B17765_06_12.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B17765_06_12.png)'
- en: 'Figure 6.12: Wireless adapter list'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12：无线适配器列表
- en: 'If you don’t have a custom password list to hand or wish to rapidly generate
    a list, you can use the crunch application in Kali. The following command instructs
    crunch to create a wordlist of words with a minimum length of `5` characters and
    a maximum length of `25` characters using the given character set:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有现成的自定义密码列表，或者希望快速生成一个列表，可以在Kali中使用crunch应用程序。以下命令指示crunch使用给定的字符集创建一个最小长度为`5`字符、最大长度为`25`字符的单词列表：
- en: '[PRE17]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As an additional option, you can also improve the effectiveness of the brute-force
    attack using GPU-based password cracking tools (oclHashcat for AMD/ATI graphics
    cards and cudaHashcat for NVIDIA graphics cards).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 作为附加选项，你还可以通过使用基于GPU的密码破解工具（如AMD/ATI显卡的oclHashcat和NVIDIA显卡的cudaHashcat）来提高暴力破解攻击的效果。
- en: 'To implement this attack, first convert the WPA handshake capture file, `output.cap`,
    to a `hashcat` file using the following command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要实施此攻击，首先使用以下命令将WPA握手捕获文件`output.cap`转换为`hashcat`文件：
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'When the conversion is completed, you should have a `.hccapx` file in the same
    folder where the command was run. Now the attacker can execute the `hashcat` against
    the new capture file (choose the version of `hashcat` that matches your CPU architecture
    and your graphics card) using the following command :'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 转换完成后，你应该在运行命令的同一文件夹中获得一个`.hccapx`文件。现在，攻击者可以通过以下命令执行`hashcat`，对新的捕获文件进行攻击（选择与您的CPU架构和显卡匹配的`hashcat`版本）：
- en: '[PRE19]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Text  Description automatically generated](../Images/B17765_06_13.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](../Images/B17765_06_13.png)'
- en: 'Figure 6.13: Running hashcat on your VirtualBox using a host GPU'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13：在VirtualBox中使用主机GPU运行hashcat
- en: 'One of the common issues noted while running hashcat in virtual containers
    such as VirtualBox or VMware is that users might not be able to run hashcat as
    expected, as 3.x version of hashcat requires GPUs. However, an alternative is
    to run the following command in the terminal: `sudo apt-get install libhwloc-dev
    ocl-icd-dev ocl-icd-opencl-dev`. This will allow the testers to utilize the CPU
    power to run hashcat within the container.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟容器（如VirtualBox或VMware）中运行hashcat时，常见的问题之一是用户可能无法按预期运行hashcat，因为3.x版本的hashcat需要GPU。然而，可以通过在终端中运行以下命令来作为替代方案：`sudo
    apt-get install libhwloc-dev ocl-icd-dev ocl-icd-opencl-dev`。这将允许测试人员利用CPU的计算能力在容器内运行hashcat。
- en: 'If you have multiple GPUs, testers can utilize tools such as John the Ripper
    and `cowpatty` to crack the password from the captured wireless traffic by using
    the following command in a terminal:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个GPU，测试人员可以利用诸如John the Ripper和`cowpatty`等工具，通过终端中的以下命令，从捕获的无线流量中破解密码：
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Basically, John the Ripper will create a dictionary incrementally for all the
    characters, special characters, and numbers. Later, the output will be passed
    through to Pyrit to crack the password using the `passthrough` keyword, and additionally,
    `cowpatty` will crack the password for a particular `WIFIESSID`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，John the Ripper会逐步创建一个字典，包含所有字符、特殊字符和数字。之后，输出将传递给Pyrit，通过`passthrough`关键字来破解密码，并且`cowpatty`将针对特定的`WIFIESSID`来破解密码。
- en: Attacking wireless routers with Reaver
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Reaver攻击无线路由器
- en: WPA and WPA2 are also vulnerable to attacks against an AP’s **Wi-Fi Protected
    Setup** (**WPS**) and PIN.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: WPA和WPA2也容易受到针对AP的**Wi-Fi保护设置**（**WPS**）和PIN攻击。
- en: Most APs support the WPS protocol, which emerged as a standard in 2006 to allow
    users to easily set up and configure APs and add new devices to an existing network
    without having to re-enter large and complex passphrases.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数AP支持WPS协议，该协议于2006年作为标准推出，旨在让用户轻松设置和配置AP，并将新设备添加到现有网络中，而无需重新输入复杂的密码。
- en: Unfortunately, the PIN is an eight-digit number (100,000,000 possible guesses),
    but the last number is a checksum value. Because the WPS authentication protocol
    cuts the pin in half and validates each half separately, this means that there
    are 10⁴ (10,000) values for the first half of the pin, and 10³ (1,000) possible
    values for the second half—the attacker only has to make a maximum of 11,000 guesses
    to compromise the AP!
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，PIN是一个八位数字（1亿个可能的猜测），但最后一个数字是校验和。由于WPS认证协议将PIN分为两半并分别验证每一半，这意味着PIN的前半部分有10⁴（10,000）个可能的值，后半部分有10³（1,000）个可能的值——攻击者最多只需猜测11,000次就能攻破AP！
- en: Reaver is a tool that’s designed to maximize the guessing process (although
    Wifite also conducts WPS guesses).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Reaver是一个旨在最大化猜测过程的工具（尽管Wifite也会进行WPS猜测）。
- en: 'To start a Reaver attack, use the `wash` companion tool to identify any vulnerable
    networks first, ensure the device is in monitoring mode by running `sudo airmon-ng
    start wlan0`, and then run the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If there are any vulnerable networks, launch an attack against them using the
    following command:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Attackers should be able to see the following screenshot when running the Reaver
    tool from the terminal:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_06_14.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.14: reaver running on a specific BSSID'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Testing this attack in Kali has demonstrated that the attack is slow and prone
    to failure; however, it can be used as a background attack or can supplement other
    routes of attack to compromise the WPA network.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Denial of Service (DoS) attacks against wireless communications
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final attack against wireless networks that we’ll evaluate is DoS attacks,
    where an attacker deprives a legitimate user of access to a wireless network or
    makes the network unavailable by causing it to crash. Wireless networks are extremely
    susceptible to DoS attacks, and it is difficult to localize the attacker on a
    distributed wireless network. Examples of DoS attacks include the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Injecting crafted network commands, such as reconfiguration commands, into a
    wireless network can cause the failure of routers, switches, and other network
    devices.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some devices and applications can recognize that an attack is taking place and
    will automatically respond by disabling the network. A malicious attacker can
    launch an obvious attack and then let the target create the DoS itself!
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bombarding the wireless network with a flood of data packets can make it unavailable
    for use; for example, an HTTP flood attack making thousands of page requests to
    a web server can exhaust its processing ability. In the same way, flooding the
    network with authentication and association packets blocks users from connecting
    to the APs.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attackers can craft specific deauthentication and disassociation commands, which
    are used in wireless networks to close an authorized connection and flood the
    network, thereby stopping legitimate users from maintaining their connection to
    a wireless AP.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To demonstrate this last point, we will create a DoS attack by flooding a network
    with deauthentication packets. Because the wireless 802.11 protocol is built to
    support deauthentication upon the receipt of a defined packet (so that a user
    can break a connection when it is no longer required), this can be a devastating
    attack—it complies with the standard, and there is no way to stop it from happening.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to bump a legitimate user off a network is to target them with
    a stream of deauthentication packets. This can be done with the help of the `aircrack-ng`
    tool suite:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This command identifies the attack type as `-0`, indicating that it is for a
    deauthentication attack. The second `0` (zero) launches a continuous stream of
    deauthentication packets, making the network unavailable to its users.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: The WebSploit framework is an open source tool that’s used to scan and analyze
    remote systems. It contains several tools, including tools that are specific to
    wireless attacks. It can be installed by running `sudo apt install websploit`
    in the terminal. To launch it, open a command shell and simply type `websploit`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: The WebSploit interface is similar to that of `recon-ng` and the Metasploit
    framework, and it presents the user with a modular interface.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'Once launched, use the `show modules` command to see the attack modules that
    are present in the existing version. Select the `Wi-Fi deauth` (a stream of deauthentication
    packets) using the `use wifi_deauth` command. As shown in *Figure 6.15*, the attacker
    just has to use the `set` commands to set the various options and then run `execute`
    to launch the attack:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_06_15.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.15: Using WebSploit to perform a deauthentication attack'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Compromising enterprise implementations of WPA2
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WPA-Enterprise is a technology that’s widely utilized in corporations. It does
    not use a single WPA-PSK, which most users use to connect to wireless networks.
    To maintain the governance and the flexibility of the domain accounts, corporations
    utilize WPA-Enterprise.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: A typical approach to compromising a WPA-Enterprise network would first be to
    enumerate the wireless devices and finally attack the connected clients to find
    out the authentication details. This consists of spoofing a target network and
    also providing a good signal to the client. Then, the original valid AP later
    leads into a MiTM attack between the AP and the clients connecting to the AP.
    To simulate a WPA-Enterprise attack, attackers must be physically near to the
    target when they have a range of APs. Attackers can also sniff the traffic using
    Wireshark to identify the wireless network traffic handshake.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore different tools that attackers would typically
    utilize to perform different types of attacks on WPA-/WPA2-Enterprise networks.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Wifite is an automatic wireless attack tool that’s preinstalled in Kali Linux,
    and is written in Python. The latest version of Wifite is V2.5.8, which has previously
    known `aircrack-ng` bugs.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'This tool utilizes the following attacks to extract the password of a wireless
    AP:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '**WPS**: The Offline Pixie Dust attack and the Online Brute-Force PIN attack'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WPA**: The WPA Handshake Capture and offline crack, and the PMKID Hash Capture
    and offline crack'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WEP**: All of the aforementioned attacks, including chop-chop, fragmentation,
    and aireplay injection'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we are all set to start Wifite so that we can perform a WPA four-way handshake
    capture and then perform an automatic password cracking attack. This tool can
    be directly launched from the terminal by typing `sudo wifite`. The attacker will
    be presented with the interactive mode so that they can select an interface, as
    shown in *Figure 6.16*:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_06_16.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.16: Wireless adapter list in wifite'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Once the interface has been selected, it should automatically enable the adapter
    in monitor mode and start to list all the Wi-Fi ESSIDs, channels, encryption,
    and power, regardless of whether or not they are WPS, as well as the number of
    clients connected to a particular ESSID. Once the target ESSID is selected, the
    attacker presses *Ctrl* + *C* on the keyboard, which will launch the attack.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: By default, four attack types are launched automatically. These are WPS Pixie
    Dust, WPS PIN, PMKID, and WPA Handshake. Attackers can choose to ignore the first
    three attacks if they aren’t relevant by pressing *Ctrl* + *C*. While the handshake
    is being captured, attackers can see which clients have been discovered that are
    connected to the station. Once the handshake has been captured, by default, a
    copy of the handshake will be stored in the current folder as `hs/handshake_ESSID_MAC.cap`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Once the handshake has been successfully captured, it will be analyzed using
    `tshark`, `cowpatty` (this tool is not preinstalled in Kali Linux, so to install
    it, run `sudo apt install cowpatty` in the terminal), and `aircrack-ng`, which
    will validate the handshake for ESSID and BSSID.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'Wifite is programmed to automatically use a wordlist to run with `aircrack-ng`.
    The custom wordlist can also be passed directly while launching Wifite by typing
    `wifite --wpa --dict /path/customwordlist`. A successful handshake cracking would
    typically return the password for the wireless AP (router), as shown in *Figure
    6.17*:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_06_17.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.17: Wireless adapter list'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: All the passwords will be saved in the `cracked.txt` file in the current folder
    from where Wifite was run from. The tool has an anonymous feature that can change
    the MAC to a random address before attacking, and then change it back when the
    attacks are complete.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Working with bettercap
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'bettercap is one of the tools that attackers could utilize to better perform
    a Wi-Fi handshake capture attack within a few minutes. The tool is prepacked with
    the Wi-Fi hacking modules that can be very handy during a red team exercise or
    pentest. The following steps are involved to successfully capture a WPA2 handshake:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Ensure the wireless device is on the monitoring mode by running `sudo airmon-ng
    start wlan0`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run bettercap with the relevant interface from the terminal by entering `sudo
    bettercap --iface wlan0mon`.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `wifi.recon on` in the bettercap terminal as shown in *Figure 6.18*:![](../Images/B17765_06_18.png)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.18: bettercap performing wireless network reconnaissance'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you get error messages reading `error while setting interface wlan0mon` when
    running `wifi.recon on` in bettercap, ensure you have the older version of libpcap
    installed. You can download it using `wget http://old.kali.org/kali/pool/main/libp/libpcap/libpcap0.8_1.9.1-4_amd64.deb`
    and then install it using `dpkg -i libpcap0.8_1.9.1-4_amd64.deb`.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To list all the Wi-Fi networks that are visible, enter `wifi.show` in the bettercap
    terminal.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform a deauthentication attack by running `wifi.deauth <BSSID>`.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the deauthentication is succesful, when the station reconnects to the
    Wi-Fi network, the handshake must be captured by bettercap and stored in the `/root/`
    folder as shown in *Figure 6.19* for BSSID `c2:b3:7b:17:00:b7`:![](../Images/B17765_06_19.png)
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.19: bettercap capturing the handshake of the wireless network'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, the same `.pcap` file can be passed to `aircrack-ng` or `hashcat` to
    crack the password.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evil Twin attack using Wifiphisher
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main issues that a majority of companies face is rogue APs within
    the range of their offices with the same name as their Wi-Fi network. In this
    section, we explore Wifiphisher, a rogue AP framework to conduct red team engagements
    or Wi-Fi penetration testing. Typically, we use this tool to perform effective
    MiTM attacks against clients that are associated with a Wi-Fi network.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: This tool is not installed by default in Kali, hence attackers should install
    this tool by running `sudo apt install wifiphisher` in the terminal.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps are involved in successfully performing an Evil Twin attack
    using Wifiphisher:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Once Wifiphisher is installed, launch the tool by running `sudo wifiphisher`
    in the terminal, which should bring up the following screen with the list of available
    wireless networks:![](../Images/B17765_06_20.png)
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.20: Wifiphisher identifying the list of wireless networks'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the right ESSID/BSSID of the wireless target and hit *Enter*. This will
    enable our wireless adapter to copy and clone the AP. This should bring us to
    a screen to select the available phishing scenarios as shown in *Figure 6.21*:![](../Images/B17765_06_21.png)
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.21: Wifiphisher’s predefined phishing templates'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are three built-in scenarios as shown in the preceding screenshot: a
    firmware upgrade page, network manager connect, and browser plugin update. We
    can select any of these options. In this example, we have selected option 2 to
    imitate a network manager window with a specific page and ask for a password.
    In the next step, the ESSID is copied with the same name and channel. Additionally,
    web and DHCP server is set, and all the connected stations will be disconnected
    using the deauthentication method. Internally, an AP is set up with another interface
    to capture the details entered by the victim as shown in *Figure 6.22*:![](../Images/B17765_06_22.png)'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.22: Wifiphisher’s dashboard of active client connections to the fake
    AP'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The wireless end clients are disconnected by the deauthentication attack and
    will not be able to connect to their Wi-Fi, since this tool also performs Wi-Fi
    jamming. (If attackers do not want to jam the network, it is recommended to use
    `sudo wifiphisher –nojamming`.)
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Victims will now be able to see the Wi-Fi network as an open network, as seen
    in *Figure 6.23*:![](../Images/B17765_06_23.png)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.23: Insecure clone of our target wireless network'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the user is connected to the free Wi-Fi, it will open the captive portal
    requesting the user to enter the password, as shown in *Figure 6.24*:![](../Images/B17765_06_24.png)
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.24: Fake captive portal on the victim device'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: And that is it – whatever password the victim entered to connect to the attacker’s
    network is captured in Wifiphisher, and these entries can be used to create a
    password list dictionary to crack the handshake captured in the previous sections.
    Attackers should see the following screen when they close the Wifiphisher tool
    with *Ctrl* + *C*:![](../Images/B17765_06_25.png)
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.25: List of passwords captured by the fake AP using Wifiphisher'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: WPA3
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the adoption of the third generation of WPA (WPA3) was introduced in
    January 2018 as a replacement for WPA2 to remedy the weaknesses of WPA2, it is
    not widely used. This standard utilizes 192-bit cryptographic strength and WPA3-Enterprise
    works with AES-256 in GCM mode with **SHA-384** (**Secure Hashing Algorithm**)
    as **Hash-Based Message Authentication Code** (**HMAC**) and still enforces the
    use of **CCMP-128** (**Counter Mode** **Cipher Block Chaining Message Protocol**),
    which is **AES-128** (**American Encryption Standard**) in CCM mode and this is
    used as the minimum encryption algorithm in WPA3-Personal.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Unlike WPA2’s **Pre-Shared Key** (**PSK**), WPA3 utilizes **Simultaneous Authentication
    of Equals** (**SAE**), also known as Dragonfly. One quite interesting paper written
    by Mathy Vanhoef ([https://papers.mathyvanhoef.com/usenix2021.pdf](https://papers.mathyvanhoef.com/usenix2021.pdf))
    outlines the design flaws in the IEEE Standard 802.11 relating to frame fragmentation,
    aggregation, and Forge attacks.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Although there are no readily available exploits, there are issues related to
    WPA3-Personal and the SAE authentication protocol it uses.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Bluetooth attacks
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A casino was once hacked through a fish tank thermometer in the past, which
    shows the importance of securing devices that are part of the **Internet of Things**
    (**IoT**). Bluetooth is not an exception and **Bluetooth Low Energy** (**BLE**)
    devices are used extensively by consumers and corporations, hence it is important
    for attackers to understand how to probe and attack them.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'Important parts of the Bluetooth protocol layers are the following:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '**Logical Link Control and Adaptation Protocol** (**L2CAP**): This provides
    the data interface between the high layer data protocols and the applications.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Radio Frequency Communications Protocol** (**RFCOMM**): This emulates the
    functionalities required for serial communication interfaces such as EIA-RS-232
    on a computer. RFCOMM can be accessed by AT commands and also the **Wireless Application
    Protocol** (**WAP**) through the **Transmission Control Protocol/Internet Protocol**
    (**TCP/IP**) stack and **Object Exchange** (**OBEX**) protocol. By default, data
    files, business cards, and calendar information can be shared without vendor dependencies.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bluetooth has three security modes:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '**Security mode 1** – This is an insecure mode, observed in old models of phones/devices.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security mode 2** – In this mode, service-level security is enforced; for
    example, some access requires authorization and authentication to connect and
    use the service.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security mode 3** – In this mode, link-level security is enforced, while
    Bluetooth itself uses trusted and untrusted devices.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux is pre-installed with device drivers (BlueZ, which is a set of tools
    to manage Bluetooth devices) to support Bluetooth devices. Similar to using `iwconfig`
    to identify wireless adapters, we use `sudo hciconfig -a` in the terminal to verify
    that our Bluetooth devices are connected and active.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'When running this command, you should see configuration information for the
    `hci0` or `hci1` adapter or both, as shown in *Figure 6.26*:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_06_26.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.26: Bluetooth USB devices list'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to perform reconnaissance for any available Bluetooth devices
    within range by running `sudo hcitool scan` in the terminal. This should bring
    us a list of devices that our adapter is able to reach and get responses from
    as shown in *Figure 6.27*:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_06_27.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.27: Bluetooth reconnaissance using hcitool'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Similar to Wireshark, attackers can also leverage the hcidump tool to further
    debug the packets sent and received by the devices.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our target devices, the next step is to identify what type
    of services the devices support. This can be achieved by utilizing sdptool, preinstalled
    with Kali. The following command provides us with a list of services that the
    target device supports, as shown in *Figure 6.28*:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](../Images/B17765_06_28.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.28: Running sdptool to browse on the target MAC'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Once these details are obtained, attackers can perform more advanced attacks
    such as bluesnarf (compromising the device to access its contact list, SMS, emails,
    or even private photos) or bluejacking (sending anonymous messages to other available
    Bluetooth devices). As these attacks are dependent on specific mobile device models,
    we will not be exploring them in this book. Attackers can choose to perform a
    DoS attack using the `l2ping` utility. This is done simply by running `sudo l2ping
    –s 100 <MAC address>` on the device, and once the target is down, you can use
    one of the social engineering tactics to pretend to be IT personnel.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we examined different tasks that are required to perform a
    successful attack against any wireless network and also how to configure the wireless
    modem and reconnaissance of APs using tools such as `aircrack-ng`. In this chapter,
    we also learned the basics of Bluetooth and also about the complete suite of `aircrack-ng` tools
    that are used to identify hidden networks, bypass MAC authentication, and compromise
    WPA, WPA2, and WPA-Enterprise. We also saw how we can utilize the automated tool
    Wifite to perform a quick capture of a handshake and crack passwords offline or
    with a good dictionary with the use of multiple options. Then, we took a deep
    dive into setting up a fake AP using Wifiphisher, and learned how to perform DoS
    attacks against wireless networks and Bluetooth devices.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on how to assess a website using a methodology
    that’s specific to this type of access, thereby conducting the reconnaissance
    and scanning that’s necessary to identify vulnerabilities that may be exploitable.
    We’ll see how attackers take advantage of these vulnerabilities with automated
    tools, such as exploit frameworks and online password cracking. Finally, we’ll
    be able to conduct the most important attacks against a web application and then
    leverage this access with a web shell to fully compromise the web services. We
    will also look into specific services and why and how they are vulnerable to DoS
    attacks.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
