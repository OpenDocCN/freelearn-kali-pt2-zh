- en: Chapter 5. Attacks on the WLAN Infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"Thus, what is of supreme importance in war is to attack the enemy''s
    strategy"* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Sun Tzu, Art of War* |'
  prefs: []
  type: TYPE_TB
- en: '*In this chapter, we will attack the WLAN infrastructure''s core! We will focus
    on how we can penetrate into the authorized network using various new attack vectors
    and lure authorized clients to connect to us, as an attacker.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The WLAN infrastructure is what provides wireless services to all the WLAN
    clients in a system. In this chapter, we will take a look at the various attacks
    that can be conducted against the infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: Default accounts and credentials on the access point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial of service attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evil twin and access point MAC spoofing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rogue access points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default accounts and credentials on the access point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WLAN access points are the core building blocks of a wireless infrastructure.
    Even though they play such an important role, they are sometimes the most neglected
    in terms of security. In this exercise, we will check whether the default passwords
    have been changed on the access point or not. Then, we will go on to verify that,
    even if the passwords have been changed, they are still easy to guess and crack
    using a dictionary-based attack.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that, as we move on to more advanced chapters, it will
    be assumed that you have gone through the previous chapters and are now familiar
    with the use of all the tools discussed there. This will allow us to build on
    that knowledge and try more complicated attacks!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – cracking default accounts on the access points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's first connect to our Wireless Lab access point and attempt to navigate
    to the HTTP management interface. We see that the access point model is **TP-LINK
    Wireless N Router WR841N**, as shown in the following screenshot:![Time for action
    – cracking default accounts on the access points](graphics/B09903_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the manufacturer's website, we find the default password for `admin` is
    `admin`. We try this on the login page and we succeed in logging in. This shows
    how easy it is to break into accounts with default credentials. We highly encourage
    you to obtain the router's user manual online. This will allow you to understand
    what you are dealing with during the penetration test and gives you an insight
    into other configuration flaws you could check for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We verified that the default credentials were never changed on this access point,
    and this could lead to a full network compromise. Also, even if the default credentials
    are changed, the result should not be something that is easy to guess or run a
    simple dictionary-based attack on.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – cracking accounts using brute-force attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous exercise, change the password to something that is hard to guess
    or find in a dictionary and see whether you can crack it using a brute-force approach.
    Limit the length and characters in the password so that you can succeed at some
    point. One of the most common tools used to crack HTTP authentication is called
    **Hydra** and is available on Kali.
  prefs: []
  type: TYPE_NORMAL
- en: Denial of service attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WLANs are prone to **Denial of Service** (**DoS**) attacks using various techniques,
    including but not limited to:'
  prefs: []
  type: TYPE_NORMAL
- en: Deauthentication attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disassociation attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CTS-RTS attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signal interference or spectrum jamming attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the scope of this book, we will discuss deauthentication attacks on the WLAN
    infrastructure using the following experiment.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – deauthentication DoS attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's configure the Wireless Lab network to use Open Authentication and no encryption.
    This will allow us to see the packets using Wireshark easily:![Time for action
    – deauthentication DoS attack](graphics/B09903_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's connect a Windows client to the access point. We will see the connection
    in the `airodump-ng` screen:![Time for action – deauthentication DoS attack](graphics/B09903_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, on the attacker machine, let's run a directed deauthentication attack against
    this:![Time for action – deauthentication DoS attack](graphics/B09903_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note how the client gets disconnected from the access point completely. We can
    verify this on the `airodump-ng` screen as well:![Time for action – deauthentication
    DoS attack](graphics/B09903_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we use Wireshark to see the traffic, you will notice a lot of deauthentication
    packets that we just sent over the air:![Time for action – deauthentication DoS
    attack](graphics/B09903_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can do the same attack by sending a Broadcast deauthentication packet on
    behalf of the access point to the entire wireless network. This will have the
    effect of disconnecting all connected clients:![Time for action – deauthentication
    DoS attack](graphics/B09903_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We successfully sent deauthentication frames to both the access point and the
    client. This resulted in them getting disconnected and a full loss of communication
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: We also sent out Broadcast deauthentication packets, which will ensure that
    no client in the vicinity can successfully connect to our access point.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that, as soon as the client is disconnected, it will
    try to connect back once again to the access point, and thus the deauthentication
    attack has to be carried out in a sustainable way to have a full DoS effect.
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the easiest attacks to orchestrate but has the most devastating
    effect. This can easily be used in the real world to bring a wireless network
    down on its knees.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – disassociation attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try to check how you can conduct disassociation attacks against the infrastructure
    using tools available in Kali. Can you do a broadcast disassociation attack?
  prefs: []
  type: TYPE_NORMAL
- en: Evil twin and access point MAC spoofing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most potent attacks on WLAN infrastructures is the **evil twin**.
    The idea is to basically introduce an attacker-controlled access point in the
    vicinity of the WLAN network. This access point will advertise the exact same
    SSID as the authorized WLAN network.
  prefs: []
  type: TYPE_NORMAL
- en: Many wireless users may accidentally connect to this malicious access point,
    thinking it is part of the authorized network. Once a connection is established,
    the attacker can orchestrate a man-in-the-middle attack and transparently relay
    traffic while eavesdropping on the entire communication. We will take a look at
    how a man-in-the-middle attack is done in a later chapter. In the real world,
    an attacker would ideally use this attack close to the authorized network so that
    the user gets confused and accidentally connects to the attacker's network.
  prefs: []
  type: TYPE_NORMAL
- en: An evil twin having the same MAC address as an authorized access point is even
    more difficult to detect and deter. This is where access point MAC spoofing comes
    in! In the next experiment, we will take a look at how to create an evil twin,
    coupled with access point MAC spoofing.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – evil twin with MAC spoofing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `airodump-ng` to locate the access point's BSSID and ESSID, which we would
    like to emulate in the evil twin:![Time for action – evil twin with MAC spoofing](graphics/B09903_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using this information, we create a new access point with the following `airbase-ng`
    command: `airbase-ng –essid <your chosen ssid> -c <channel> <interface>`. Minor
    errors may occur with newer releases:![Time for action – evil twin with MAC spoofing](graphics/B09903_05_09.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This new access point also shows up in the `airodump-ng` screen. It is important
    to note that you will need to run `airodump-ng` in a new window with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s see this new access point:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – evil twin with MAC spoofing](graphics/B09903_05_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'What we will do now is spoof the ESSID and MAC address of the access point
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now if we look at through `airodump-ng`, it is almost impossible to differentiate
    between both visually:![Time for action – evil twin with MAC spoofing](graphics/B09903_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even `airodump-ng` is unable to discern that there are actually two different
    physical access points on the same channel. This is the most potent form of the
    evil twin.![Time for action – evil twin with MAC spoofing](graphics/B09903_05_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we send a deauthentication frame to the client, so it disconnects and immediately
    tries to reconnect:![Time for action – evil twin with MAC spoofing](graphics/B09903_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we are closer to this client, our signal strength is higher, and it connects
    to our evil twin access point. As shown by the following airbase-ng output:![Time
    for action – evil twin with MAC spoofing](graphics/B09903_05_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created an evil twin for the authorized network and used a deauthentication
    attack to have the legitimate client connect back to us, instead of the authorized
    network access point.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that, in the case of the authorized access point using
    encryption such as WEP/WPA, it is more difficult to conduct an attack in which
    traffic eavesdropping is possible. We will take a look at how to break the WEP
    key with just a client using the Caffe Latte attack in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – evil twin and channel hopping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous exercise, run the evil twin on different channels and observe
    how the client, once disconnected, hops channels to connect to the access point.
    What is the deciding factor based on which the client decides which access point
    to connect to? Is it signal strength? Experiment and validate.
  prefs: []
  type: TYPE_NORMAL
- en: A rogue access point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **rogue access point** is an unauthorized access point connected to the authorized
    network. Typically, this access point can be used as a backdoor entry by an attacker,
    thus enabling him to bypass all security controls on the network. This would mean
    that the firewalls, intrusion prevention systems, and so on, which guard the border
    of a network, would be able to do little to stop him from accessing the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the most common case, a rogue access point is set to Open Authentication
    and no encryption. The rogue access point can be created in the following two
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing an actual physical device on the authorized network as a rogue access
    point. (This is something I leave as an exercise to you.) Also, more than wireless
    security, this has to do with breaching the physical security of the authorized
    network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a rogue access point in software and bridging it with the local authorized
    Ethernet network. This will allow practically any laptop running on the authorized
    network to function as a rogue access point. We will look at this in the next
    experiment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for action – Setting up a rogue access point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's first bring up our rogue access point using `airbase-ng` and give it the
    ESSID `Rogue`:![Time for action – Setting up a rogue access point](graphics/B09903_05_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now want to create a bridge between the Ethernet interface, which is part
    of the authorized network, and our rogue access point interface. To do this, we
    will first install `bridge-utils` files, create a bridge interface, and name it
    `Wifi-Bridge`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the required commands in action:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Setting up a rogue access point](graphics/B09903_05_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We will then add both the Ethernet and the `at0` virtual interface created
    by `airbase-ng` to this bridge:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The screenshot of the command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Setting up a rogue access point](graphics/B09903_05_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We will then bring up this interfaces to enable the bridge with the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The screenshot of the command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Setting up a rogue access point](graphics/B09903_05_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We will then enable IP forwarding in the kernel to ensure that packets are
    forwarded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The screenshot of the command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Setting up a rogue access point](graphics/B09903_05_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Brilliant! We are done. Now, any wireless client connecting to our rogue access
    point will have full access to the authorized network using the wireless-to-wired
    `Wifi-Bridge` we just built. We can verify this by connecting a client to the
    rogue access point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then bring the bridge up with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that it receives an IP address from the DHCP daemon running on the authorized
    LAN.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now access any host on the wired network from this wireless client using
    this rogue access point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a rogue access point and used it to bridge all the authorized network
    LAN traffic over the wireless network. As you can see, this is a really serious
    security threat as anyone can break into the wired network using this bridge.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – rogue access point challenge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check whether you can create a rogue access point that uses WPA/WPA2-based encryption
    to look more legitimate on the wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – attacks on the WLAN infrastructure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. What encryption does a rogue access point use in most cases?
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WEP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WPA
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WPA2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What is the advantage of having the same MAC address as the authorized
    access point in an evil twin?
  prefs: []
  type: TYPE_NORMAL
- en: It makes detecting the evil twin more difficult
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It forces the client to connect to it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It increases the signal strength of the network
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. What do DoS attacks do?
  prefs: []
  type: TYPE_NORMAL
- en: They bring down the overall throughput of the network
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They do not target the clients
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They can only be done if we know the network WEP/WPA/WPA2 credentials
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. What do rogue access points do and how can they be created?
  prefs: []
  type: TYPE_NORMAL
- en: They allow backdoor entry into the authorized network
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They use WPA2 encryption only
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They can be created as software-based access points or can be actual devices
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both 1 and 3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we explored different ways to compromise the security of the
    Wireless LAN infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: Compromising default accounts and credentials on access points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial of service attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evil twins and MAC spoofing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rogue access points in the enterprise network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at different attacks on the Wireless
    LAN client. Interestingly, most administrators feel that the client has no security
    problems to worry about. We will see how nothing could be further from the truth.
  prefs: []
  type: TYPE_NORMAL
