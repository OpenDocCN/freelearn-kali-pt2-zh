- en: Chapter 7. Advanced WLAN Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"To know your enemy, you must become your enemy."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Sun Tzu, Art of War* |'
  prefs: []
  type: TYPE_TB
- en: '*As a penetration tester, it is important to know the advanced attacks a hacker
    can do, even if you might not check or demonstrate them during a penetration test.
    This chapter is dedicated to showing how a hacker can conduct advanced attacks
    using wireless access as the starting point.*'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at how we can conduct advanced attacks
    using what we have learned so far. We will primarily focus on the **Man-in-the-Middle**
    (**MITM**) attack, which requires a certain amount of skill and practice to conduct
    successfully. Once we have done this, we will use this MITM attack as a base from
    which to conduct more sophisticated attacks such as eavesdropping and session
    hijacking.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: MITM attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless eavesdropping using MITM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session hijacking using MITM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Man-in-the-Middle attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MITM attacks are probably one of the most potent attacks on a WLAN system. There
    are different configurations that can be used to conduct the attack. We will use
    the most common one—the attacker is connected to the internet using a wired LAN
    and is creating a fake access point on his client card. This access point broadcasts
    an SSID similar to a local hotspot in the vicinity. A user may accidently get
    connected to this fake access point (or can be forced to via the higher signal
    strength theory we discussed in the previous chapters) and may continue to believe
    that he is connected to the legitimate access point.
  prefs: []
  type: TYPE_NORMAL
- en: The attacker can now transparently forward all the user's traffic over the internet
    using the bridge he has created between the wired and wireless interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: In the following lab exercise, we will simulate this attack.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – Man-in-the-Middle attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the MITM attack setup, we will first create a soft access point called
    `mitm` on the hacker laptop using `airbase-ng`. We run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Man-in-the-Middle attack](graphics/B09903_07_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: It is important to note that `airbase-ng`, when run, creates an interface `at0`
    (a tap interface). Think of this as the wired-side interface of our software-based
    access point `mitm`:![Time for action – Man-in-the-Middle attack](graphics/B09903_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s now create a bridge on the hacker''s laptop, consisting of the wired
    (`eth0`) and wireless interface (`at0`). The succession of commands used for this
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`brctl addbr mitm-bridge`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`brctl addif mitm-bridge eth0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`brctl addif mitm-bridge at0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ifconfig eth0 0.0.0.0 up`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ifconfig at0 0.0.0.0 up`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time for action – Man-in-the-Middle attack](graphics/B09903_07_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We can assign an IP address to this bridge and check the connectivity with
    the gateway. Please note that we can do this using DHCP as well. We can assign
    an IP address to the bridge interface with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – Man-in-the-Middle attack](graphics/B09903_07_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We can then try pinging the gateway `192.168.0.1` to ensure that we are connected
    to the rest of the network.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s now turn on IP forwarding in the kernel, so that routing and packet
    forwarding can happen correctly, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Man-in-the-Middle attack](graphics/B09903_07_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now let's connect a wireless client to our access point `mitm`. It will automatically
    get an IP address over DHCP (the server running on the wired-side gateway). The
    client machine in this case receives the IP address `192.168.0.197`. We can ping
    the wired-side gateway `192.168.0.1` to verify connectivity:![Time for action
    – Man-in-the-Middle attack](graphics/B09903_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that the host responds to the `ping` requests, as shown here:![Time
    for action – Man-in-the-Middle attack](graphics/B09903_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can also verify that the client is connected by looking at the `airbase-ng`
    terminal on the hacker's machine:![Time for action – Man-in-the-Middle attack](graphics/B09903_07_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is interesting to note here that, because all the traffic is being relayed
    from the wireless interface to the wired-side, we have full control over the traffic.
    We can verify this by starting Wireshark and sniffing on the `at0` interface:![Time
    for action – Man-in-the-Middle attack](graphics/B09903_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's now ping the gateway `192.168.0.1` from the client machine. We can see
    the packets in Wireshark (apply a display filter for ICMP), even though the packets
    are not destined for us. This is the power of MITM attacks:![Time for action –
    Man-in-the-Middle attack](graphics/B09903_07_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We successfully created the setup for a wireless MITM attack. We did this by
    creating a fake access point and bridging it with our Ethernet interface. This
    ensured that any wireless client connecting to the fake access point will perceive
    that it is connected to the internet via the wired LAN.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – MITM over pure wireless
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous exercise, we bridged the wireless interface with a wired one.
    As we noted earlier, this is one of the possible connection architectures for
    an MITM. There are other combinations possible as well. An interesting one would
    be to have two wireless interfaces, one that creates the fake access point and
    the other interface that is connected to the authorized access point. Both these
    interfaces are bridged. So, when a wireless client connects to our fake access
    point, it gets connected to the authorized access point through the attacker's
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that this configuration would require the use of two wireless cards
    on the attacker's laptop.
  prefs: []
  type: TYPE_NORMAL
- en: Check whether you can conduct this attack using the in-built card on your laptop
    along with the external one—bear in mind, you may not have the injection drives
    required for this activity. This should be a good challenge!
  prefs: []
  type: TYPE_NORMAL
- en: Wireless eavesdropping using MITM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous lab, we learned how to create a setup for MITM. Now, we will
    take a look at how to do wireless eavesdropping with this setup.
  prefs: []
  type: TYPE_NORMAL
- en: The whole lab revolves around the principle that all the victim's traffic is
    now routed through the attacker's computer. Thus, the attacker can eavesdrop on
    all the traffic sent to and from the victim's machine wirelessly.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – wireless eavesdropping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these instructions to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Replicate the entire setup as in the previous lab. Fire up Wireshark. Interestingly,
    even the MITM-bridge shows up. This interface would allow us to peer into the
    bridge traffic, if we wanted to:![Time for action – wireless eavesdropping](graphics/B09903_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start sniffing on the `at0` interface so that we can monitor all traffic sent
    and received by the wireless client. On the wireless client, open up any web page.
    In my case, the wireless access point is also connected to LAN and I will open
    it up by using the address `http://192.168.0.1`:![Time for action – wireless eavesdropping](graphics/B09903_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in with your password and enter the management interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Wireshark, we should be seeing a lot of activity:![Time for action – wireless
    eavesdropping](graphics/B09903_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a filter for HTTP to see only the web traffic:![Time for action – wireless
    eavesdropping](graphics/B09903_07_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can easily locate the HTTP post request that was used to send the password
    to the wireless access point:![Time for action – wireless eavesdropping](graphics/B09903_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MITM setup we created now allows us to eavesdrop on the victim's wireless
    traffic without the victim knowing. This is possible because, in an MITM, all
    the traffic is relayed via the attacker's machine. Thus, all of the victim's unencrypted
    traffic is available for eavesdropping for the attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Session hijacking over wireless
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the other interesting attacks we can build on top of MITM is application
    session hijacking. During an MITM attack, the victim's packets are sent to the
    attacker. It is now the attacker's responsibility to relay this to the legitimate
    destination and relay the responses from the destination to the victim. An interesting
    thing to note is that, during this process, the attacker can modify the data in
    the packets (if unencrypted and unprotected from tampering). This means he can
    modify, mangle, and even silently drop packets.
  prefs: []
  type: TYPE_NORMAL
- en: In this next example, we will take a look at DNS hijacking over wireless using
    the MITM setup. Then, using DNS hijacking, we will hijack the browser session
    to [https://www.google.com](https://www.google.com).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – session hijacking over wireless
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Set up the test exactly as in the MITM attack lab. On the victim, let's fire
    up the browser and type in [https://www.google.com](https://www.google.com). Let's
    use Wireshark to monitor this traffic. Your screen should resemble the following:![Time
    for action – session hijacking over wireless](graphics/B09903_07_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply a Wireshark filter for DNS and, as we can see, the victim is making DNS
    requests for [https://www.google.com](https://www.google.com):![Time for action
    – session hijacking over wireless](graphics/B09903_07_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to hijack the browser session, we will need to send fake DNS responses
    that will resolve the IP address of [https://www.google.com](https://www.google.com)
    to the hacker machine''s IP address `192.168.0.199`. The tool that we will use
    for this is called `dnsspoof` and the syntax is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – session hijacking over wireless](graphics/B09903_07_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Refresh the browser windows and now, as we can see through Wireshark, as soon
    as the victim makes a DNS request for any host (including [https://www.google.com](https://www.google.com)),
    `dnsspoof` replies back.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the victim's machine, we see an error that says **Unable to connect**. This
    is because we made the IP address for [https://www.google.com](https://www.google.com)
    as `192.168.0.199`, which is the hacker machine's IP, but there is no service
    listening on port `80`:![Time for action – session hijacking over wireless](graphics/B09903_07_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s run Apache on Kali using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – session hijacking over wireless](graphics/B09903_07_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, once we refresh the browser on the victim, we are greeted with the **It
    Works!** default page of Apache:![Time for action – session hijacking over wireless](graphics/B09903_07_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This demonstration shows how it is possible to intercept data and send spoofed
    responses to hijack sessions on the victim.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We did an application hijacking attack using a wireless MITM as the base. So,
    what happened behind the scenes? The MITM setup ensured that we were able to see
    all the packets sent by the victim. As soon as we saw a DNS request packet coming
    from the victim, the `dnsspoof` program running on the attacker's laptop sent
    a DNS response to the victim with the attacker machine's IP address that of [https://www.google.com](https://www.google.com).
    The victim's laptop accepted this response and the browser sent an HTTP request
    to the attacker's IP address on port `80`.
  prefs: []
  type: TYPE_NORMAL
- en: In the first part of the experiment, there was no listening process on port
    `80` of the attacker's machine and thus, Firefox responded with an error. Then,
    once we started the Apache server on the attacker's machine on port `80` (the
    default port), the browser's request received a response from the attacker's machine
    with the default **It Works!** page.
  prefs: []
  type: TYPE_NORMAL
- en: This lab shows us that, once we have full control of the lower layers (Layer
    2 in this case), it is easy to hijack applications running on higher layers such
    as DNS clients and web browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – application hijacking challenge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step in session hijacking using a wireless MITM will be to modify the
    data being transmitted by the client. Explore software available on Kali called
    **Ettercap**. This will help you create search and replace filters for network
    traffic.
  prefs: []
  type: TYPE_NORMAL
- en: In this challenge, write a simple filter to replace all occurrences of security
    in the network traffic to insecurity. Try searching Google for security and check
    whether the results show up for insecurity instead.
  prefs: []
  type: TYPE_NORMAL
- en: Finding security configurations on the client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we have seen how to create Honeypots for open access points,
    WEP-protected and WPA, but, when we are in the field and see probe requests from
    the client, how do we know which network the probed SSID belongs to?
  prefs: []
  type: TYPE_NORMAL
- en: Though this seems tricky at first, the solution to this problem is simple. We
    need to create access points advertising the same SSID but with different security
    configurations simultaneously. When a roaming client searches for a network, it
    will automatically connect to one of these access points based on the network
    configuration stored on it.
  prefs: []
  type: TYPE_NORMAL
- en: So, let the games begin!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – deauthentication attack on the client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will assume that the wireless client has a network `Wireless Lab` configured
    on it, and it actively sends probe requests for this network, when it is not connected
    to any access point. In order to find the security configuration of this network,
    we will need to create multiple access points. For our discussion, we will assume
    that the client profile is an open network, WEP protected, WPA-PSK, or WPA2-PSK.
    This means we will have to create four access points:'
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we will first create four virtual interfaces—`wlan0mon` to `wlan0mon3`,
    using the `iw wlan0 interface add wlan0mon type monitor` command multiple times
    adding 1 to the end of the monitor name each time:![Time for action – deauthentication
    attack on the client](graphics/B09903_07_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can view all these newly created interfaces using the `iwconfig` command:![Time
    for action – deauthentication attack on the client](graphics/B09903_07_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will create the open AP on `wlan0mon`:![Time for action – deauthentication
    attack on the client](graphics/B09903_07_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's create the WEP protected AP on `wlan0mon1`:![Time for action – deauthentication
    attack on the client](graphics/B09903_07_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The WPA-PSK AP will be on `wlan0mon2`:![Time for action – deauthentication attack
    on the client](graphics/B09903_07_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WPA2-PSK AP will be on `wlan0mon3`:![Time for action – deauthentication attack
    on the client](graphics/B09903_07_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can run `airodump-ng` on the same channel to ensure that all four access
    points are up and running, as shown in the following screenshot:![Time for action
    – deauthentication attack on the client](graphics/B09903_07_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's switch the Wi-Fi on the roaming client. Depending on which `Wireless
    Lab` network you connected it to previously, it will connect to that security
    configuration. In my case, it connects to the WPA-PSK network, as shown in the
    following screenshot:![Time for action – deauthentication attack on the client](graphics/B09903_07_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created multiple Honeypots with the same SSID but different security configurations.
    Depending on which configuration the client had stored for the `Wireless Lab`
    network, it connected to the appropriate one.
  prefs: []
  type: TYPE_NORMAL
- en: This technique can come in handy as, if you are doing a penetration test, you
    won't know which security configurations the client has on its laptop. This allows
    you to find the appropriate one by setting a bait for the client. This technique
    is also called **WiFishing**.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – baiting clients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create different security configurations on the client for the same SSID, and
    check whether your set of Honeypots is able to detect them.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that many Wi-Fi clients might not actively probe for
    networks they have stored in their profile. It might not be possible to detect
    these networks using the technique we discussed here.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – advanced WLAN attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. In an MITM attack, who is in the middle?
  prefs: []
  type: TYPE_NORMAL
- en: The access point
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The victim
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Q2\. `dnsspoof`:'
  prefs: []
  type: TYPE_NORMAL
- en: Spoofs DNS requests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spoofs DNS responses
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Needs to run on the DNS server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Needs to run on the access point
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Q3\. A wireless MITM attack can be orchestrated:'
  prefs: []
  type: TYPE_NORMAL
- en: On all wireless clients at the same time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only one channel at a time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On any SSID
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both 2 and 3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. Which is the interface closest to the victim in our MITM setup?
  prefs: []
  type: TYPE_NORMAL
- en: '`at0`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`eth0`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`br0`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`en0`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to conduct advanced attacks using wireless as
    the base. We created a setup for an MITM attack over wireless and then used it
    to eavesdrop on the victim's traffic. We then used the same setup to hijack the
    application layer of the victim (web traffic, to be specific) using a DNS poisoning
    attack.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to conduct a wireless penetration test
    right from the planning, discovery, and attack to the reporting stage. We will
    also touch upon the best practices to secure WLANs.
  prefs: []
  type: TYPE_NORMAL
