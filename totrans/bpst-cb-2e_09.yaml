- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Attacking the Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code available on the client that is executed in the browser requires testing
    to determine any presence of sensitive information or the allowance of user input
    without server-side validation. We will learn how to perform these tests using
    Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing for clickjacking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for DOM-based cross-site scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging DOM Invader to test for DOM XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for JavaScript execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for HTML injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for client-side resource manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the recipes in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Broken Web Applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Mutillidae link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Suite Proxy Community or Professional ([https://portswigger.net/BurpSuite/](https://portswigger.net/BurpSuite/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for clickjacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Clickjacking** is also known as a **UI redress attack**. This attack is a
    deceptive technique that tricks a user into interacting with a transparent **iframe**
    and, potentially, sending unauthorized commands or sensitive information to an
    attacker-controlled website. Let’s see how to use Burp Clickbandit to test whether
    a site is vulnerable to clickjacking.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll use the OWASP Mutillidae II application and Burp Clickbandit to determine
    whether the application protects against clickjacking attacks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to the **Home** page of OWASP Mutillidae II.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to **Burp** and, from the top-level menu, select **Burp Clickbandit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Clickbandit menu item](image/B21173_Figure_9.01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Clickbandit menu item
  prefs: []
  type: TYPE_NORMAL
- en: 'A pop-up box explains the tool. Click the **Copy Clickbandit to** **clipboard**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Copying code to the clipboard](image/B21173_Figure_9.02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Copying code to the clipboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the Firefox browser and the landing page of Mutillidae. Make sure
    you are not logged into the application. Press *F12* to bring up the developer
    tools. From the developer tools menu, select **Console**, and look for the prompt
    at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.3 – The F12 developer tools Console prompt](image/B21173_Figure_9.03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – The F12 developer tools Console prompt
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Console** prompt (for example, **>>**), paste the Clickbandit script
    you copied to your clipboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Pasted Clickbandit code](image/B21173_Figure_9.04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Pasted Clickbandit code
  prefs: []
  type: TYPE_NORMAL
- en: 'After pasting the script into the prompt, press the *Enter* key. You should
    see Burp Clickbandit’s **Record mode**. Click the **Start** button to begin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Starting Clickbandit record mode](image/B21173_Figure_9.05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Starting Clickbandit record mode
  prefs: []
  type: TYPE_NORMAL
- en: Start clicking around on the application after it appears. Click available links
    on the top Mutillidae menu, click available links on the side menu, or browse
    to pages within Mutillidae. Once you’ve clicked around, press the **Finish** button
    on the Burp Clickbandit menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should notice big red blocks appear transparently on top of the Mutillidae
    web pages. Each red block indicates a place where a malicious **iframe** can appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Framing of victim web page](image/B21173_Figure_9.06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Framing of victim web page
  prefs: []
  type: TYPE_NORMAL
- en: 'Feel free to click each red block to see the next red block appear, and so
    on, until you see the message **You’ve** **been clickjacked!**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Final confirmation message](image/B21173_Figure_9.07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Final confirmation message
  prefs: []
  type: TYPE_NORMAL
- en: To save your results to a file for replay purposes (to give to your client as
    evidence), click the **Save** button. This will save the clickjacking **proof
    of concept** (**PoC**) in an HTML file for you to place inside your penetration
    test report.![Figure 9.8 – Saving to a file](image/B21173_Figure_9.08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 9.8 – Saving to a file
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Reset** button to return to the normal application without the
    Clickbandit code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.9 – After the Reset button is clicked](image/B21173_Figure_9.09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – After the Reset button is clicked
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the Mutillidae application does not make use of the **X-FRAME-OPTIONS**
    header set to **DENY**, it is possible to inject a malicious **iframe** instance
    into the Mutillidae web pages. This is particularly dangerous on the login page
    in a phishing attack, luring victims into typing their credentials into an attacker-controlled
    page. You can increase the level of opaqueness of the **iframe** instance used
    by Clickbandit for visibility. You can use Clickbandit to create your PoC to illustrate
    how the vulnerability can be exploited. Applications can be secured against clickjacking
    attacks by adding the **X-FRAME-OPTIONS** header set to **DENY** or by adding
    the Content-Security-Policy **frame-ancestors** directive to a whitelisted domain.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for DOM-based cross-site scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Document Object Model** (**DOM**) is a tree-like structural representation
    of all HTML web pages captured in a browser. Developers use the DOM to store information
    inside the browser for convenience. As a web penetration tester, it is important
    to determine the presence of DOM-based **cross-site scripting** (**XSS**) vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the OWASP Mutillidae II HTML5 web storage exercise to determine
    whether the application is susceptible to DOM-based XSS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate to **HTML 5** | **HTML5 Web Storage** | **HTML5 Storage**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.10 – HTML5 Storage lesson](image/B21173_Figure_9.010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 – HTML5 Storage lesson
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the name/value pairs stored in the DOM using the **HTML5 Web Storage**
    locations. Web storage includes **Session** and **Local** variables. Developers
    use these storage locations to conveniently store information inside a user’s
    browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.11 – Web storage entries](image/B21173_Figure_9.011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.11 – Web storage entries
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the Burp Suite **Proxy** | **Intercept** tab. Turn **Intercept**
    on with the **Intercept is** **on** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.12 – Turning Intercept on](image/B21173_Figure_9.012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.12 – Turning Intercept on
  prefs: []
  type: TYPE_NORMAL
- en: Reload the **HTML 5 Web Storage** page in the Firefox browser by pressing *F5*
    or clicking the *reload* button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the Burp Suite **Proxy** | **Intercept** tab. Find the paused request
    created by the reload you just performed. Note that the **User-Agent** string
    is highlighted, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.13 – Note the original user-agent value](image/B21173_Figure_9.013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.13 – Note the original user-agent value
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the preceding highlighted **User-Agent** with the following script.
    Note the XSS injection (e.g., **alert()**) inside of the payload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is how the payload looks in the request held up in the **Proxy** interceptor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – Changing User-Agent to payload](image/B21173_Figure_9.014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.14 – Changing User-Agent to payload
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Forward** button. Now, turn **Intercept** off by clicking the toggle
    button to **Intercept** **is off**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the alert popup showing the contents of the DOM storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.15 – Evidence of XSS payload execution\uFEFF](image/B21173_Figure_9.015.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.15 – Evidence of XSS payload execution
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The injected script illustrates how the presence of an XSS vulnerability combined
    with sensitive information stored in the DOM can allow an attacker to steal sensitive
    data. The danger of storing sensitive data in web storage is that if XSS is possible
    anywhere within the application, then the sensitive data may be able to be exfiltrated
    and sent to an attacker via a malicious JavaScript payload.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging DOM Invader for testing DOM XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s use PortSwigger’s integrated browser with an add-on called DOM Invader
    to cover more of the attack surface on the client, probing for potential DOM XSS
    and other weaknesses.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the same exercise, HTML5 Storage, and Burp Suite’s DOM Invader to
    help us determine whether there are any vulnerable sinks or sources on the web
    page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the Burp Suite browser, click the *DOM Invader* icon at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.16 – DOM Invader icon on the Burp Suite browser](image/B21173_Figure_9.016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.16 – DOM Invader icon on the Burp Suite browser
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **DOM Invader** tab and make sure **DOM Invader is on** is set.
    Also, note the canary value that is assigned. This is randomized and you can customize
    the value if you like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.17 – DOM Invader menu](image/B21173_Figure_9.017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.17 – DOM Invader menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the **HTML 5 Storage** page in your Burp Suite browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.18 – HTML 5 Storage page](image/B21173_Figure_9.018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.18 – HTML 5 Storage page
  prefs: []
  type: TYPE_NORMAL
- en: 'Press *F12* in the Burp Suite browser to open the development tools console.
    Go all the way to the end of the tabs in the development tools console and select
    **DOM Invader**. Note: DOM Invader is only available in the Burp Suite browser,
    so if you do not see this tab, you are using the wrong browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.19 – DOM Invader tab in F12 Developer Tools](image/B21173_Figure_9.019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.19 – DOM Invader tab in F12 Developer Tools
  prefs: []
  type: TYPE_NORMAL
- en: 'Using DOM Invader, click the **Inject forms** button. Note how your canary
    value is now populated in all textboxes and button labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.20 – Canary value used in DOM Invader injection points](image/B21173_Figure_9.020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.20 – Canary value used in DOM Invader injection points
  prefs: []
  type: TYPE_NORMAL
- en: Now, click the **Add New** button, which is now displaying the canary value
    instead of **Add New**. It’s the only button on the web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.21 – After injection](image/B21173_Figure_9.021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.21 – After injection
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the button, note you have three findings (sinks) from DOM Invader,
    shown on the top icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.22 – DOM Invader icon with three findings](image/B21173_Figure_9.022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.22 – DOM Invader icon with three findings
  prefs: []
  type: TYPE_NORMAL
- en: 'These are shown in the **Developer Tools** console, available by pressing *F12*
    in your Burp Suite browser (you must use the Burp Suite Browser to see this).
    Look for the **DOM** **Invader** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.23 – DOM Invader findings](image/B21173_Figure_9.023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.23 – DOM Invader findings
  prefs: []
  type: TYPE_NORMAL
- en: The DOM Invader findings give us enough clues to know we need to continue to
    craft a payload that will give us JavaScript execution. DOM Invader identified
    the sink as **element.innerHTML(1)**, which helps us to know that the potential
    for exploiting a DOM XSS is very high.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The presence of **innerHTML** on the web page of this recipe is a DOM XSS HTML
    sink. The **innerHTML** attribute receives user input and immediately renders
    inside the browser. The use of this attribute is very dangerous and usually avoided
    by most developers.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PortSwigger provides background information about DOM Invader and its many
    features here: [https://portswigger.net/burp/documentation/desktop/tools/dom-invader](https://portswigger.net/burp/documentation/desktop/tools/dom-invader).
    We just barely touched on the multitude of scans that DOM Invader can perform
    in the browser. Other scan features include **postMessage** attacks, DOM clobbering,
    prototype pollution, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Testing for JavaScript execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript injection is a subtype of XSS attacks specific to the arbitrary injection
    of JavaScript. Vulnerabilities in this area can affect sensitive information held
    in the browser, such as user session cookies, or it can lead to the modification
    of page content, allowing script execution from attacker-controlled sites.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will the OWASP Mutillidae II **Password Generator** exercise to determine
    whether the application is susceptible to JavaScript XSS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate to **OWASP 2013** | **A1 - Injection (Other)** | **JavaScript Injection**
    | **Password Generator**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.24 – Password Generator lesson](image/B21173_Figure_9.024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.24 – Password Generator lesson
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that after clicking the **Generate Password** button, a password is shown.
    Also, note that the username value provided in the URL is reflected in the browser
    *as is* on the web page: **http://192.168.56.101/mutillidae/index.php?page=password-generator.php&username=anonymous**.
    This means a potential XSS vulnerability may exist on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.25 – Generating a new password](image/B21173_Figure_9.025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.25 – Generating a new password
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the Burp Suite **Proxy** | **HTTP history** tab and find the HTTP
    message associated with the **Password Generator** page. Flip to the **Response**
    tab in the message editor and perform a search on the **catch** string. Note that
    the JavaScript returned has a **catch** block where error messages display to
    the user. We will use this position for the placement of a carefully crafted JavaScript
    injection attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.26 – Catch block for injection point](image/B21173_Figure_9.026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.26 – Catch block for injection point
  prefs: []
  type: TYPE_NORMAL
- en: Switch to the Burp Suite **Proxy** | **Intercept** tab. Turn **Intercept** on
    with the **Intercept is** **on** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload the **Password Generator** page in the Firefox browser by pressing *F5*
    or clicking the *reload* button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the Burp Suite **Proxy** | **Intercept** tab. While the request is
    paused, note the **username** parameter value highlighted as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.27 – Username parameter](image/B21173_Figure_9.027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.27 – Username parameter
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the preceding highlighted value of **anonymous** with the following
    carefully crafted JavaScript injection script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is how the payload looks in the request held up in the **Proxy** interceptor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.28 – Injection point](image/B21173_Figure_9.028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.28 – Injection point
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Forward** button. Now, turn **Intercept** off by clicking the toggle
    button to **Intercept** **is off**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the alert popup. You’ve successfully demonstrated the presence of a JavaScript
    injection XSS vulnerability!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.29 – Evidence of JavaScript exec\uFEFFu\uFEFFtion](image/B21173_Figure_9.029.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.29 – Evidence of JavaScript execution
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JavaScript snippet injected into the web page matched the structure of the
    original **catch** statement. By creating a fake name of **canary** and ending
    the statement with a semicolon, a specially crafted *new* **catch** block was
    created, which contained the malicious JavaScript payload.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for HTML injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML injection is the insertion of arbitrary HTML code into a vulnerable web
    page. Vulnerabilities in this area may lead to the disclosure of sensitive information
    or the modification of page content for the purposes of socially engineering the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use OWASP Mutillidae II’s **Capture Data Page** to determine whether
    the application is susceptible to HTML injection attacks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate to **OWASP 2013** | **A1 - Injection (Other)** | **HTMLi Via Cookie
    Injection** | **Capture** **Data Page**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.30 – Capture Data Page lesson](image/B21173_Figure_9.030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.30 – Capture Data Page lesson
  prefs: []
  type: TYPE_NORMAL
- en: 'Note how the page looks before the attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.31 – Data Capture Page](image/B21173_Figure_9.031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.31 – Data Capture Page
  prefs: []
  type: TYPE_NORMAL
- en: Switch to the Burp Suite **Proxy** | **Intercept** tab and turn **Intercept**
    on with the **Intercept is** **on** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the request is paused, make a note of the last cookie, **acgroupswitchpersist=nada**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.32 – Turning Intercept on](image/B21173_Figure_9.032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.32 – Turning Intercept on
  prefs: []
  type: TYPE_NORMAL
- en: 'While the request is paused, replace the value of the last cookie with this
    HTML injection script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is how the payload looks in the request held up in the **Proxy** interceptor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.33 – Changing the value of the cookie to payload](image/B21173_Figure_9.033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.33 – Changing the value of the cookie to payload
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Forward** button. Now, turn **Intercept** off by clicking the toggle
    button to **Intercept** **is off**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note how the HTML is now included inside the page!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.34 – Evidence of HTML inje\uFEFFc\uFEFFtion](image/B21173_Figure_9.034.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.34 – Evidence of HTML injection
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to the lack of input validation and output encoding, an HTML injection vulnerability
    can exist. The result of exploiting this vulnerability is the insertion of arbitrary
    HTML code, which can lead to XSS attacks or social engineering schemes such as
    the one seen in the preceding recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for client-side resource manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If an application performs actions based on client-side URL information or pathing
    to a resource (that is, AJAX call, external JavaScript, or **iframe** source),
    the result can lead to a client-side resource manipulation vulnerability. This
    vulnerability relates to attacker-controlled URLs in, for example, the JavaScript
    **location** attribute, the location header found in an HTTP response, or a **POST**
    body parameter, which controls redirection. The impact of this vulnerability could
    lead to an XSS attack.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the OWASP Mutillidae II application to determine whether it is possible
    to manipulate any URL parameters that are exposed on the client side and whether
    the manipulation of those values causes the application to behave differently.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate to **OWASP 2013** | **A10 - Unvalidated Redirects and Forwards** |
    **Credits**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.35 – Credits page](image/B21173_Figure_9.035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.35 – Credits page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **ISSA Kentuckiana** link available on the **Credits** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.36 – External links](image/B21173_Figure_9.036.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.36 – External links
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the Burp Suite **Proxy** | **HTTP history** tab and find your request
    to the **Credits** page. Note that there are two query string parameters: **page**
    and **forwardurl**. What would happen if we manipulated the URL where the user
    is sent?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.37 – Call to an external link](image/B21173_Figure_9.037.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.37 – Call to an external link
  prefs: []
  type: TYPE_NORMAL
- en: Switch to the Burp Suite **Proxy** | **Intercept** tab. Turn **Intercept** **on**
    with the **Intercept is** **on** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **ISSA Kentuckiana** link again. While the request is paused, note
    the current value of the **forwardurl** parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.38 – Changing the original value](image/B21173_Figure_9.038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.38 – Changing the original value
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the value of the **forwardurl** parameter to [https://www.owasp.org](https://www.owasp.org)
    instead of the original choice of [http://www.issa-kentuckiana.org](http://www.issa-kentuckiana.org):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.39 – Changing to an attacker-controlled value](image/B21173_Figure_9.039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.39 – Changing to an attacker-controlled value
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Forward** button. Now, turn **Intercept** off by clicking the toggle
    button to **Intercept is off**. Note how we were redirected to a site other than
    the one originally clicked!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.40 – Evidence of redi\uFEFFrect\uFEFFion](image/B21173_Figure_9.040.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.40 – Evidence of redirection
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Application code decisions, such as where to redirect a user, should never rely
    on client-side available values. Such values can be tampered with and modified
    to redirect users to attacker-controlled websites or to execute attacker-controlled
    scripts.
  prefs: []
  type: TYPE_NORMAL
