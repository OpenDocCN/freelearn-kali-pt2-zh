- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing the Kali Purple Linux Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we’ve learned how the events of the world have shaped the evolution
    of cybersecurity concepts over time, resulting in the need for, and creation of,
    Kali Purple, along with other defensive security packages. We’ve had a taste of
    the ELK Stack, which serves as the core component of the SIEM, itself the core
    component of a SOC, with the SOC a core component of Kali Purple. What do you
    say we start assembling the very atmosphere we’ve been raving about? Let’s get
    our hands dirty!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to prepare our personal technology to host and
    operate our very own instance of Kali Purple. While the sections we cover may
    seem random, they are presented to you in a purposeful and strategic order. It
    is highly recommended that you follow this order of operations to ensure the smoothest
    experience of prepping your technology. Rest assured that there is a method to
    our madness, and it will be described along the way as our actions relate to what
    we’re doing at the time. The primary sections we will cover in this chapter will
    be presented in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring the Kali Purple distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The installation of a **virtual** **machine** (**VM**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The installation of Kali Purple
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The installation of the Java **Software Development** **Kit** (**SDK**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because people use a variety of personal computing devices, we will cover a
    variety of circumstances, offering instructions for Windows, Mac, and Linux hosts.
    While there are competing products with Kali Linux for pentesting and offensive
    security purposes, at the time of writing only Kali offers such a comprehensive
    selection of defensive cybersecurity tools (100+) on top of their offensive suite.
    This chapter, however, deals only with the acquisition and installation of the
    Purple operating system. There are some differences in how you go about acquiring
    and installing the appropriate applications, based on which operating system you
    use. If applicable, we will offer insights into common problems users might encounter
    while negotiating the process of setting up a Kali Purple environment, as well
    as offer solutions where needed.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to understand that Kali Purple is built to accommodate the mindset
    of a cybersecurity analyst, be it offensive or defensive. Being a true analyst
    in any capacity of business means developing independent research, thinking, and
    problem-solving abilities. If you are not yet comfortable that you are operating
    at that level, fret not! We will provide guidance throughout and resources at
    the end of the chapter to help you.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have a fully functional Kali Purple environment
    that is armed with many of the tools we’ve already discussed – as well as a whole
    bunch of tools we haven’t discussed – and ready to be populated with some of the
    additional features discussed throughout the rest of this book. You will also
    have the experience and this chapter as a reference point to coach others in setting
    up their Kali Purple environments if you so choose.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Minimum**: Should be a computing device with either *amd64 (x86_64/64-bit)*
    or *i386 (x86/32-bit)* architectures. Kali recommends the *amd64* option. The
    system should contain at least *2 GB* of RAM and *20 GB* of disk space. However,
    some of the tools contained within Kali Linux tend to be resource hogs; Burp Suite
    is famous for this. The Kali installation page at [https://www.kali.org/docs/installation/hard-disk-install/](https://www.kali.org/docs/installation/hard-disk-install/)
    recommends as much as *8 GB* of RAM if you intend to use such applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommended**: It is suggested by practitioners in the cybersecurity field
    state that you should aim for the *amd64 (x86_64/64-bit)* architecture with *8
    GB* of RAM – even more RAM if available – as well as up to *200 GB* of disk space.
    Don’t worry if you don’t have these resources available. As long as you can meet
    the minimum requirements, you will be fine for the purposes of learning and experiencing
    Kali Purple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While there are some scenarios where Kali Purple could be installed with smaller
    requirements than these, we’re not writing this book to torture you—the recommended
    requirements will cover most scenarios in this book. As with all technology, Kali
    Purple’s requirements are truly a case of the more the merrier.
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring the Kali Purple distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in setting up our Kali Purple environment is acquiring Kali Purple
    itself. This section will not be necessary for those of you who already work from
    a Kali Linux system. If that applies to you, feel free to skip ahead to the *The
    installation of Kali Purple* section, where you can get instructions about how
    to grab the Purple framework from within your Kali Linux environment. If that
    does not apply to you or you’d like to experience the process anyway, keep on
    reading.
  prefs: []
  type: TYPE_NORMAL
- en: We will find and download the combined Kali Linux and Purple framework first.
    This is because some VM installations, including the VirtualBox we will use as
    an example, will install the VM, Kali Linux, and Purple frameworks simultaneously,
    saving us a bunch of time.
  prefs: []
  type: TYPE_NORMAL
- en: Before doing so, let’s revisit the CIA triad. After all, the purpose of Kali
    Purple is security! So, let’s practice smart security habits from the start. Here,
    we will put to use the I from the CIA triad – integrity. Integrity, as applied
    here, means the data we expect arrives from its origin to our devices unchanged.
    We can forensically confirm that by comparing the hash values. The application
    packages we will download will have a hash value assigned to them at the point
    of download. We will walk through finding that hash, recording it, and then calculating
    it after it’s downloaded to compare with it.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer, you can back up your system or create a restore point now, or
    wait until after you’ve finished downloading files. However you go about it, just
    make sure you perform an appropriate backup *before* you invoke any installation
    or activity requiring partitioning or a change to your system.
  prefs: []
  type: TYPE_NORMAL
- en: Linux backup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linux has a plethora of backup options. Since the power and beauty of Linux
    is the command line, we’ll provide those instructions here. First, you might wish
    to consider compressing the files to save space and allow for easier transfer
    to the backup medium.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compress a file, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once compressed, you can back up the file by using **rsync**. Type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Windows backup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Decide the medium you wish to use to back up your device. If it’s a physical
    device such as an external hard drive, get it ready and plug it into your device.
    Your machine should recognize the device and notify you of its location. If it’s
    a network device, record the location so that you know where to tell the backup
    software to process your request. Windows has changed the way it offers backup
    options over the years. In general, you can open the start menu and type **backup**
    and **restore** in the search bar. Follow the prompts thereafter. Alternatively,
    you can select **Start** | **Settings**, type **restore** in the search bar, and
    select **Create a** **restore point**.
  prefs: []
  type: TYPE_NORMAL
- en: macOS backup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Decide on your backup medium. Plug in your backup device and follow the onscreen
    prompts. If you are not prompted, you can use Time Machine to back up your device.
    You can get there by going to System Preferences. Then, click on the Apple menu
    | **System Preferences** | **Time Machine**. Once in the **Time Machine preferences**
    pane, click **Select Backup Drive**, and then choose the drive you wish to back
    up to. Make sure you enable Time Machine by ensuring the on/off switch is toggled
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started. When downloading a software package for the first time, it’s
    always wisest to grab the most recent stable release. The exception to this would
    be if you were a trained and/or experienced tester with a protected environment,
    such as a sandbox, to deploy the application. A **sandbox** is an isolated section
    of your system that simulates the full system with isolated processes. It limits
    resources and interaction with the underlying system so that any malicious or
    broken software being executed within its virtual container will, in theory, not
    harm the actual machine that the process is being tested on. However, we aren’t
    here to test, so let’s stick with the most recent stable release. To grab the
    most recent and stable Kali Purple, open your web browser, type in the address
    [https://www.kali.org/](https://www.kali.org/), and when the page loads, either
    select **Get Kali** from the top navigation bar or the **Download** link if it
    is present. They are both highlighted with a border in *Figure 3**.1*, and both
    take you to the same place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select one of the highlighted links to get to the Kali Purple distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The Kali Linux home page](image/B21223_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – The Kali Linux home page
  prefs: []
  type: TYPE_NORMAL
- en: When the new page loads after clicking, slowly scroll down it a short distance
    until you see the section labeled **Kali Purple**, and find the tile underneath
    it that says **Recommended** across the top. It should be the tile on the left,
    as shown in *Figure 3**.2*.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two actions to take on the download tile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – The Kali Purple download tile](image/B21223_03_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – The Kali Purple download tile
  prefs: []
  type: TYPE_NORMAL
- en: The two fields highlighted in *Figure 3**.2* are what we need to take action
    on. First, return to your browser and click on the **sum** box that is highlighted.
    When you do, the image will appear to flip over and provide you with a SHA-256
    Hash of the Kali Purple distribution. You need to copy and paste this; alternatively,
    record this hash somewhere you can easily reference after downloading Kali Purple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Record the SHA-256 hash to compare after download:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – The SHA256 hash for the Kali Purple download](image/B21223_03_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – The SHA256 hash for the Kali Purple download
  prefs: []
  type: TYPE_NORMAL
- en: Remember that a hash is a one-way mathematical operation. It’s a fixed-size
    alphanumeric value generated by taking input from a computer – a *message* if
    you will – and applying an advanced algorithm to it, resulting in the unique fixed-size
    output. It is designed so that even if the tiniest molecule – if a single 1 or
    0 – of an application/process is changed, the resulting hash value is significantly
    different than the original.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let’s take the following statement – *I love* *Packt Publishing.*
  prefs: []
  type: TYPE_NORMAL
- en: 'The SHA-256 hash value of that statement is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s change the string by simply replacing the period with an exclamation
    point – *I love* *Packt Publishing!*
  prefs: []
  type: TYPE_NORMAL
- en: 'The SHA-256 hash value of the statement becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note how the two values do not even remotely resemble each other. The length
    of the output will always be the same. This can be seen if we simply remove everything
    from the statement but the brand – *Packt*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We get a new SHA-256 hash value that is precisely the same length as the other
    hashes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There are other types of hash algorithms you can use, but if you work in, or
    desire to work, in a cybersecurity career, the two hash algorithms you should
    most familiarize yourself with are the **Message Digest 5** (**MD5**) and the
    **Secure Hash Algorithm 256** (**SHA-256**) we used earlier. They are the two
    hashes you are most likely to encounter in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Hash values are so reliable that they are frequently referenced within the United
    States legal system as scientific evidence, and proof of criminal or non-criminal
    activity, during courtroom proceedings. Hash values can be used to determine the
    admissibility of evidence at trial. It is also a key tool in digital forensics
    and is used in the most complex cybercrime investigations. The **Federal Bureau
    of Investigation** (**FBI**) regularly uses hash values to help solve their crimes.
    Check out the link in the *Further reading* section to discover how the agency
    uses hash values for the **Privacy Impact Assessment** (**PIA**), **Child Victim
    Identification Program** (**CVIP**), and **Innocent Images National** **Initiative**
    (**IINI**).
  prefs: []
  type: TYPE_NORMAL
- en: After recording the hash, go ahead and return to your browser, and click on
    the download icon shown in the lower left-hand corner of the tile (highlighted
    in red in *Figure 3**.2*) to begin downloading the Kali Purple **.iso** file.
    Depending on the browser you are using, you should see a popup in the upper right-hand
    corner that loosely resembles the image in *Figure 3**.4*, confirming that the
    **.iso** file is in the process of downloading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look in the upper right-hand corner of your browser for an active download
    box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – The Kali Purple .iso image download](image/B21223_03_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – The Kali Purple .iso image download
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this section, anytime you see the word **username** printed in a
    file path, you should assume that means you need to replace that text with your
    actual username within that computing environment. For example, by replacing **username**
    with the actual username of the user in the following file paths, the **.iso**
    file will be found in one of the following locations, based on the operating system
    you are using:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **OS** | **Location** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Linux | **/****home/username/Downloads** |'
  prefs: []
  type: TYPE_TB
- en: '| Mac | **/****Users/username/Downloads** |'
  prefs: []
  type: TYPE_TB
- en: '| Windows | **C:\Users\username\Downloads** |'
  prefs: []
  type: TYPE_TB
- en: Table 3.1 – The default download file paths by operating system
  prefs: []
  type: TYPE_NORMAL
- en: Once downloaded, you have a number of options about how to proceed, but before
    moving ahead, let’s first verify the hash and match it to the one we recorded
    from the website. We do not assume your technical level here. So, let’s just keep
    it simple, and you can explore shortcuts and alternatives in your own time when
    you believe you’re ready for that. In the meantime, let’s open a command-line
    utility and navigate to the respective folder where the download resides.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you will open a terminal window. From there, type **Bash** to open the
    command shell. **Bash** stands for **Bourne Again Shell**, which is the command
    terminal most frequented by Linux users. Then, type **cd ~/Downloads** at the
    command prompt to get to the file. **cd** stands for **change directory**, and
    the squiggly symbol found on the upper-left side of your keyboard, called a tilde,
    represents the home directory. That allows you to quickly navigate to another
    directory no matter what file path you are presently in.
  prefs: []
  type: TYPE_NORMAL
- en: You can confirm that you are in the correct directory in two different ways.
    First, type **pwd**, which stands for **print working directory**. That will display
    the absolute path, which should be **/home/username/Downloads** in this case.
    The second way you can confirm that the file is in the directory is by typing
    **ls**, which stands for **list**. You should see a file that is named **kali-linux-2023.3-installer-purple-amd64.iso**
    or very similar to that. If the file is present, you then type **sha256sum kali-linux-2023.3-installer-purple-amd64.iso**,
    replacing the filename with the exact filename of your Kali Purple download, should
    it be different than presented here. The result should be printed on the next
    line. It would look something like **e3e977a8f99622be55365cb9c21dc7f6e625827cea85233cea2cc04ac09eee3e**,
    and it should match, character for character, the hash value you recorded before
    downloading Kali Purple.
  prefs: []
  type: TYPE_NORMAL
- en: Mac
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the **Applications** folder and then the **Utilities** folder. From there,
    select and open a terminal window. Identical to Linux, type **cd ~/Downloads**
    to get to the file location. You can also verify your file path by typing **pwd**,
    but because this is a Mac, the absolute path will appear slightly differently
    than Linux. It should be **/Users/username/Downloads** in this case. Using the
    **ls** list command will show the directory’s contents, where you can look for
    the **.iso** file you downloaded. Slightly different from Linux, to get the hash
    value of the download, type **shasum -a 256 kali-linux-2023.3-installer-purple-amd64.iso**,
    replacing the filename with the actual filename if it is different. A different
    filename is possible if Kali Linux releases an updated version of Kali Purple
    after this book is printed but before you read it. Just like Linux, the results
    should look something like **e3e977a8f99622be55365cb9c21dc7f6e625827cea85233cea2cc04ac09eee3e**,
    and it should match, character for character, the hash value you recorded before
    downloading Kali Purple. Again, this value will be different if a newer version
    of Kali Purple is released. However, what remains the same is that the value should
    match the value presented at the download location on the website.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows offers two basic methods of acquiring a file hash. One is through the
    command prompt, and the other is through a powerful automation and scripting utility
    called PowerShell. The specifics of PowerShell are beyond the scope of this book,
    but as a cybersecurity professional, you will eventually want to take some time
    to study and learn about it. Microsoft has provided free introductory training
    available on their learning platform. A link to this training is available in
    the *Further reading* section at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with the command prompt. Press the *Windows* key, and in the popup,
    type **cmd** into the search bar. Select the **Command Prompt** application that
    is presented to you. Unlike Linux and Mac, Windows offers a nifty little shortcut
    to get to the **Downloads** folder that doesn’t require you to even know the username
    that is logged on at the time. If your **Downloads** folder is in the Windows
    default location, you can use the following command. Simply type **cd %USERPROFILE%\Downloads**,
    and the system will take you directly to the **Downloads** folder of whichever
    user is logged onto the system at the time. Once there, type **dir** to view the
    contents of the directory, and look for the Kali Purple **.iso** file you downloaded.
    To get the SHA-256 hash of the file, type **CertUtil -hashfile kali-linux-2023.3-installer-purple-amd64.iso
    SHA256** and press *Enter*. The hash should return **e3e977a8f99622be55365cb9c21dc7f6e625827cea85233cea2cc04ac09eee3e**,
    but the main thing is that, no matter what it returns, it matches the hash you
    recorded at the download site.
  prefs: []
  type: TYPE_NORMAL
- en: The second method involves the aforementioned PowerShell. To invoke PowerShell,
    press the *Windows* key and type **PowerShell** in the search bar. Then, select
    the application once it appears. Like the Command Prompt, there is also a shortcut
    to reach the **Downloads** folder in PowerShell. Type **cd $HOME\Downloads** to
    get the **.iso** file. Then, type **dir** to confirm that the required file is
    in the folder. To get the hash of the file, type **Get-FileHash -Algorithm SHA256
    -Path kali-linux-2023.3-installer-purple-amd64.iso**, which should return the
    same hash value shown earlier or at least match the value provided at the download
    location. Additionally, PowerShell offers the ability to grab a file without first
    navigating to the **Downloads** folder, provided you know the file path and have
    recorded the filename you want hashed. In this case, you would type the following
    command immediately after opening the PowerShell utility – **Get-FileHash -Algorithm
    SHA256 -Path C:\Users\username\Downloads\kali-linux-2023.3-installer-purple-amd64.iso**.
    Then, look for the same result from the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: Once the integrity and success of the download are confirmed, we need to consider
    whether we’re going to transfer that file to a disk or USB drive, and we need
    to back up our device before we act on the Kali Purple download or install a VM.
    We could’ve backed up our device before downloading Kali Purple, but since we’ve
    not done so yet and we’ve confirmed the integrity of the download, backing it
    up now will preserve the download file should we need to restore it to this point
    later.
  prefs: []
  type: TYPE_NORMAL
- en: Once all our data is backed up, we might choose to put a copy of the Kali Purple
    **.iso** file on a USB flash drive or external hard drive for portability, especially
    if we have multiple devices on which we’d like to install the operating system.
    Of course, if we wanted to use this system across a large corporate network, there
    are ways to push such an installation. However, the networking knowledge and skills
    to perform such an action are beyond the scope of *Introduction to Kali Purple*.
    Additionally, it’s important to keep in mind that this distribution contains advanced
    penetration testing tools, which might not be the most secure option to widely
    distribute across an organization. It would probably make more sense to keep this
    tool set highly restricted to a small group of trained specialists within your
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve acquired Kali Purple and backed up our devices, it’s time to
    consider how we are going to run it so that we can properly install it. It’s important
    to consider that Kali Purple is a very powerful suite of tools capable of doing
    significant – even criminal – damage if placed into the hands of bad actors. We
    should keep it tightly guarded and only run it under a closely managed space,
    where we can quickly respond if needed. The best option to establish this type
    of environment is a pseudo type of sandbox called a VM. We are going to cover
    establishing VMs in the next section, in which it is recommended to run Kali Purple,
    even if the host system is already a Linux variant.
  prefs: []
  type: TYPE_NORMAL
- en: The installation of a VM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to work on securely isolating a part of our device’s
    operating system and setting it aside, solely for the purpose of running Kali
    Purple. This isolation will allow you to access the resources needed to properly
    run Kali Purple without adversely affecting the underlying operating system, which
    we will refer to as the host system from now on. This isolation is typically referred
    to as a virtual machine, and we have a plethora of options to set one up.
  prefs: []
  type: TYPE_NORMAL
- en: A VM helps to provide a controlled environment if we make a mistake at any point,
    ensuring we can quickly revert and start over without causing damage to the host.
    It also helps contain any potential cyber threats should they materialize and
    prevent any other unintended consequences. They are called virtual machines because
    the separate instances created by them are considered virtual, if not miniature,
    copies of the host system. What happens in the VM stays in the VM.
  prefs: []
  type: TYPE_NORMAL
- en: VMs are set up and arranged by virtualization software such as VMware or VirtualBox.
    While it is not necessarily bad to have more than one virtualization software
    application installed on your device, it can create some unnecessary challenges,
    such as competition for the computer’s resources, compatibility, and software
    conflicts. That’s a group of issues that we don’t want to deal with while developing
    our Kali Purple skillset. Therefore, we’re going to take a moment to check and
    see whether any such virtualization software is already installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re presently operating on a Linux system, find and open a command terminal
    and type **lsmod | grep kvm** to check whether the **Kernel-based Virtual Machine**
    (**KVM**) module is loaded. If any output of any kind at all is returned, then
    you know that KVM is indeed installed and ready to be used. Another option is
    to type **virt-what** into the terminal window. It’s a command that checks the
    system for the presence of a wide array of virtualization technologies, returning
    what those are if they are present. If your Linux variant is part of the Debian
    family, which would include Kali Linux, you can type **dpkg -l | grep virtual**;
    alternatively, if your variant is part of the Red Hat distro family, you can type
    **rpm -qa | grep virtual** to search for packages related to virtualization and
    display the results of any that are successfully installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using a macOS for your Kali Purple experience, you can simply go to
    the **Applications** folder in Finder and look for **VMware Fusion**, **Parallels
    Desktop**, and **VirtualBox**. There are other virtualization software platforms
    that are compatible with Mac, but they are not best suited to host Kali Purple
    and are likely to clash with the resources needed by those three big players.
    If you see these three, then you already have virtualization software installed
    on your Mac.
  prefs: []
  type: TYPE_NORMAL
- en: For the Windows users out there, press your *Windows* key and type in **hyper-v
    manager**. If the Hyper-V Manager appears in the search results, then you know
    you have virtualization software installed on your device, which is the most likely
    case. You’ll also want to search for **VirtualBox**, **VMWare**, **Parallels**,
    and **QEMU**.
  prefs: []
  type: TYPE_NORMAL
- en: In each of these cases, the lists of potential virtualization software are just
    a summary of the most common, most popular, and most likely installations. You
    might wish to take the extra step of opening a search engine and running some
    searches/queries regarding virtualization software that is compatible with your
    specific operating system and version. Then, return and dig a little deeper using
    the methods we just discussed. If you discover that you have virtualization software
    installed on your device, there are a couple of things you need to know to move
    forward.
  prefs: []
  type: TYPE_NORMAL
- en: First, you can search to find instructions to remove the software from your
    device if you like and then follow the example that we will provide (we will use
    VirtualBox due to its broad compatibility across Linux, macOS, and Windows) to
    install new virtualization software. Keep in mind, that there may be existing
    VMs in place, and you will want to ensure you’re not getting rid of something
    you might prefer to keep before removing the software.
  prefs: []
  type: TYPE_NORMAL
- en: However, it wouldn’t be so bad if you decided to keep the existing virtualization
    software and simply ran some additional searches about how to set up a new VM
    using that existing software. The odds are that the search will return results
    that are easy enough to follow if that’s the route you want to go. Otherwise,
    we are going to move forward with the idea that you have no virtualization software
    and need to acquire and install it for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If there is no evidence of having already established virtualization on your
    device, you will want to ensure that virtualization is enabled in your device’s
    BIOS or UEFI settings. To do that, you need to run an internet search for your
    device’s specific brand and model to see which key press you need to make to access
    those settings. Usually, they are one of the *Del*, *F2*, *F10*, and *Esc* keys.
  prefs: []
  type: TYPE_NORMAL
- en: Once you know which key press you need, reboot your computer, and repeatedly
    press that key during the booting process. The booting process should pause, and
    the BIOS or UEFI menu should load for you. Use the arrow keys on your keyboard
    to navigate through the sections, looking for either a **CPU Configuration** or
    **Advanced Settings** field. You can also search before the reboot to get precise
    instructions from your device’s manufacturer about how to negotiate this process.
  prefs: []
  type: TYPE_NORMAL
- en: Within **CPU Configuration** or **Advanced Settings**, look for any option that
    mentions **Virtualization**, **VT-x**, **AMD-V**, **Intel Virtualization Technology**,
    or a similar term. You can also look for these terms under the **Processor**,
    **Security**, and **System Configuration** submenus. You can enable or disable
    virtualization once you find and select the field by pressing the *+* or *–* keys,
    or sometimes just pressing *Enter* when the field is selected. Once done, make
    sure you save your settings – press the *F10* key, or highlight the save button
    and press *Enter*. Then, exit the BIOS or UEFI screen and allow your device to
    reboot again. Virtualization should now be enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Much like we did with the Kali Purple download, we are going to first point
    our browsers to the appropriate download location and grab the checksum, the hash
    value, that we will later compare to the hash value of the downloaded executable,
    ensuring that it downloaded safely with no compromises to its integrity.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, go to [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    in your browser. When you reach the VirtualBox site, you will see a variety of
    options to download VirtualBox, as shown within the purple box in *Figure 3**.5*.
    We will walk you through the process, covering any differences between Windows,
    macOS, and Linux. You can also see two options to acquire the checksum in either
    the SHA-256 or MD5 hash value. Because it is significantly more secure, we will
    work with the SHA-256 hash value that you see highlighted in red in *Figure 3**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'VirtualBox offers downloads for Windows, macOS, and Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – VirtualBox downloads and checksums](image/B21223_03_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – VirtualBox downloads and checksums
  prefs: []
  type: TYPE_NORMAL
- en: Select the **SHA256 checksums** link to get a list of potential hash values,
    depending on the package that you intend to download. While we will cover downloading
    and installing the latest stable release for each of Windows, macOS, and Linux,
    we will use Windows in this demonstration to grab the necessary screenshot visuals
    to include. One of the original core appeals of VMs was giving Windows users the
    ability to run a Linux instance within the Windows host environment. Your scenario
    may be different. That’s okay! We will provide examples for each of the big three
    operating systems’ users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the hash value corresponding to your download and record it somewhere:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – VirtualBox hash values](image/B21223_03_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – VirtualBox hash values
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have recorded your hash value, return to the main page, and find the
    appropriate VirtualBox package based on your operating system. It will be one
    of the links shown within the box highlighted in *Figure 3**.5*. Select your product,
    and click on it to begin the download. Depending on the system and browser you
    use, you might see a progress tracker, such as the Firefox browser download tracker
    shown in *Figure 3**.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – The Firefox browser’s download progress](image/B21223_03_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – The Firefox browser’s download progress
  prefs: []
  type: TYPE_NORMAL
- en: This bar lets you know the status of the download and when it’s completed. If
    it doesn’t automatically appear, you can usually manually invoke it by looking
    at the top right of your browser for the international symbol representing a download.
    This symbol is characterized by a downward-pointing arrow with a straight horizontal
    line underneath it. If there isn’t a download symbol, you might find three horizontal
    dots, as is the case with Microsoft’s Edge browser, and if you click on those,
    a menu will appear showing the download symbol with the word **Downloads** after
    it. Alternatively, you can simply wait a few minutes and then navigate to the
    **Downloads** folder, as we discussed in the previous section, to look for the
    VirtualBox executable. That’s not such a bad idea, since you will want to go there
    anyway to grab the hash of the file after downloading completes.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are confident that VirtualBox – or other virtualization software for
    you rebels out there – has completed downloading, you will want to verify the
    hash of the download matches the one you recorded from the website.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is imperative that you do not allow yourself to be tempted to skip the step
    of comparing and verifying the hash values of this or any other part of the Kali
    Purple download and installation process. Remember that you are about to install
    and configure a very robust suite of security software featuring very powerful
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing you want is to learn that someone along the way was able to hijack
    your download and replace it with a clone that has a backdoor built into it, where
    they can use the powerful tools of your system to commit cybercrime, leaving any
    evidence trails pointing to you! Comparing the hash values prevents this from
    occurring. If a single bit of information is changed in the package, the hash
    values will not match.
  prefs: []
  type: TYPE_NORMAL
- en: However, this doesn’t mean that if your hash values don’t match someone is targeting
    you. There are many reasons why the final downloaded product doesn’t match the
    original. There could simply have been a hiccup within the internet connection
    somewhere along the way that, somehow, corrupted the data being transferred.
  prefs: []
  type: TYPE_NORMAL
- en: That’s another reason to check the hash values. If you try to install corrupt
    software, anything could happen. Sure, it could not work at all. It also could
    mostly function, but you might find out much later after you’ve put extraordinary
    effort into configuring your software that a crucial feature doesn’t work. You
    don’t want the headache of trying to figure that problem out.
  prefs: []
  type: TYPE_NORMAL
- en: Windows users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s look at the first method for Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a **cmd** terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **cd %USERPROFILE%\Downloads**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **dir** and look for the VirtualBox file you downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **CertUtil -hashfile <****filename> SHA256**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare the result with the hash value you recorded before downloading VirtualBox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s look at the second method for Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a PowerShell terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **cd $HOME\Downloads**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **dir** and look for the VirtualBox file you downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **Get-FileHash -Algorithm SHA256 -****Path <filename>**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a PowerShell terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **Get-FileHash -Algorithm SHA256 -****Path C:\Users\username\Downloads\<filename>**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare the result with the hash value you recorded before downloading VirtualBox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: macOS users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s look at the steps for macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **cd ~/Downloads**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that you’re in the correct place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **pwd** and look for the **/Users/username/Downloads** file path.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **ls** and look for the VirtualBox file you downloaded.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **shasum -a** **256 <filename>**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare the result with the hash value you recorded before downloading VirtualBox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linux users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s look at the steps for Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **Bash** to open the command shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **cd ~/Downloads**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that you’re in the correct place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **pwd** and look for the **/home/username/Downloads** file path.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **ls** and look for the VirtualBox file you downloaded.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **sha256sum <filename>** file path to be
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare the result with the hash value you recorded before downloading VirtualBox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we’ve verified the integrity of the VirtualBox installer, let’s install
    it! It is generally going to be the same process, no matter which operating system
    you use, with just a few subtleties in the downloading process, which we just
    covered alongside invoking the installation. After that, it’s all the same across
    the board.
  prefs: []
  type: TYPE_NORMAL
- en: Linux VirtualBox installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ve already researched and confirmed the appropriate download for your specific
    flavor of Linux. Now, you’ll want to go back into the command line via Bash and
    **cd** your way into the downloads folder, just as you did when you verified the
    hash value. If you’re using Linux for this process, odds are that you already
    know that files need to have execute permissions assigned to them before we can
    actually invoke – that is, *execute* – them. Since we’re already in the **Downloads**
    folder, we can set these permissions by typing **chmod +x <filename>** and then
    invoking the package in one of the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Debian/Ubuntu Linux**: Type **sudo ./<filename>**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CentOS/Fedora Linux**: Type **sudo dnf install ./<filename>** or **sudo yum**
    **install ./<filename>**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default**: Type **sudo apt** **install ./<filename>**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chmod** stands for **change mode**, which is a direct reference to changing
    the mode of the file permissions. **Sudo** stands for **superuser do**, which
    is more or less like saying, *“Do this as if I’m an admin giving you* *an instruction.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The command shell will show a long scroll of files unpacking and installing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – The Linux VirtualBox installation](image/B21223_03_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – The Linux VirtualBox installation
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to the macOS VirtualBox installation.
  prefs: []
  type: TYPE_NORMAL
- en: macOS VirtualBox installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After confirming your file hash value in macOS, it is easy to execute it – even
    more so than Linux! Since you’re already in the **Downloads** folder, you can
    simply type the file’s name and press *Enter* to invoke the installer. If you
    are no longer in the **Downloads** folder, you can still execute the file by simply
    typing **<filepath>/<filename>** and pressing *Enter*. If you’re a visual person
    and prefer to invoke the installer graphically, you can type **Command + Shift
    + L** to directly open your **downloads** folder and simply click on the file
    to invoke it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new Finder window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Downloads** under **Favorites** in the left sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View and click your installer file to invoke it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s move on to the Windows VirtualBox installation.
  prefs: []
  type: TYPE_NORMAL
- en: Windows VirtualBox installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because installing VirtualBox is a near-identical process regardless of which
    operating system you’re using, and because one of the more common uses for putting
    Linux within a VM is running it within a Windows host, we will focus the rest
    of our walk-through in that form.
  prefs: []
  type: TYPE_NORMAL
- en: To start, open File Explorer either by clicking on the icon in your taskbar
    if it’s there, typing **file explorer** into the search field of your taskbar,
    or clicking on **Start** and typing **file explorer** in the **Start** search
    field. No matter how you do it, it will show up, and you should click on it, examining
    the left pane for the **Downloads** folder. Find your VirtualBox installer file
    and double-click to invoke it.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll likely receive a pop-up box asking you whether you want to allow this
    program to make changes on your device. While that may sound scary and risky to
    you, it’s necessary. VirtualBox cannot install itself and function properly if
    you do not allow it to make changes on your device. Therefore, select and click
    **Yes**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **installation wizard** will appear after you give permission for it to
    make changes to your device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – The Oracle VirtualBox installation wizard](image/B21223_03_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – The Oracle VirtualBox installation wizard
  prefs: []
  type: TYPE_NORMAL
- en: Depending on when you read this, the pop-up box introducing you to the installation
    wizard may show a different numbered version of VirtualBox. That’s indicative
    of an updated version, and that’s okay! The installation should work exactly the
    same. Select **Next >** to be presented with options for a custom setup. For training
    and learning purposes, we are going to accept the default recommendations. Select
    **Next >**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom installation options are available for experienced users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – VirtualBox’s customized installation options menu](image/B21223_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – VirtualBox’s customized installation options menu
  prefs: []
  type: TYPE_NORMAL
- en: You may be presented with one of the warnings shown in *Figure 3**.11*, or even
    both of them. If so, remember that they are warnings, not errors. They are common
    warnings, and there’s no cause for concern.
  prefs: []
  type: TYPE_NORMAL
- en: The **Network Interfaces** warning means that the VirtualBox installer has detected
    a potential conflict related to your physical network communications hardware.
    This warning is triggered if the installer detects that there is an existing application
    that uses the same **Internet Protocol** (**IP**) or **Media Access Control**
    (**MAC**) address that VirtualBox intends to use. In nearly all instances, this
    will most likely be another type of virtualization software.
  prefs: []
  type: TYPE_NORMAL
- en: While it is important to resolve these issues, that does not necessarily mean
    you need to delete or uninstall the software. You’ll simply need to ensure it
    is disabled and does not run at the same time you are using VirtualBox. To continue
    the installation, you will want to make sure any present online sessions, VMs,
    or **Virtual Private Networks** (**VPNs**) are disconnected. Make sure you grab
    your login credentials for any of these services and record them somewhere, since
    most of these services are configured to auto-run and auto-login. Folks tend to
    just simply forget their credentials with such things.
  prefs: []
  type: TYPE_NORMAL
- en: The **Missing Dependencies Python Core** error means that VirtualBox is unable
    to locate the Python interpreter on your system. VirtualBox depends upon Python
    to negotiate quite a few tasks, such as running scripts, managing VM configurations,
    and interacting with the VirtualBox **Application Programming Interface** (**API**).
    To resolve this error, we will need to first verify whether Python is installed
    on your system and, if not, download it. Then, we will need to ensure that the
    Python executable is included in your system’s **PATH** environment variable.
    Because modifying this PATH variable usually requires a complete reboot of your
    system, we will include these instructions at the end of this section so that
    you can continue with the VirtualBox installation without interruption.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is okay to click through these errors as long as you remember to address
    them before running VirtualBox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Common VirtualBox installation errors](image/B21223_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Common VirtualBox installation errors
  prefs: []
  type: TYPE_NORMAL
- en: To resolve this error, first look at the default location of where Python would
    be installed on your system if it were installed in the default location.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows, open **File Explorer** like you did to find the VirtualBox installer,
    but instead of going to the **Downloads** folder, you’ll want to look for **C:\Python<version>**,
    where **<version>** represents a number such as **3.9**. This indicates the version
    of Python that is installed. If you do not see a Python folder, simply type **Python**
    in the search bar, or go to the **Start** menu and type **Python** in that search
    bar. Autocomplete should let you know whether Python is installed.
  prefs: []
  type: TYPE_NORMAL
- en: For macOS, navigate to the **/Library/Frameworks/Python.framework/Versions/<version>/bin**
    location – again, **<version>** references a numerical value. If no file is found,
    you can either click on the magnifying glass in the top-right corner of the menu
    bar or press *Command* + *Spacebar* to open the Spotlight application. Type **Python**
    in the search field that appears.
  prefs: []
  type: TYPE_NORMAL
- en: In Linux, you’re likely to find a Python installation at **/usr/bin/python**
    **or /usr/local/bin/python**.
  prefs: []
  type: TYPE_NORMAL
- en: 'For both macOS and Linux, you can also open a command Terminal and type **find
    / -name Python* -print**, with the asterisk representing a wildcard. This searches
    for any file that starts with Python and includes anything with any value after
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – The latest Python version](image/B21223_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – The latest Python version
  prefs: []
  type: TYPE_NORMAL
- en: If Python is not found on your system, you will need to download it. Open a
    browser window, go to [https://www.python.org/](https://www.python.org/), and
    then scroll down until you see the **Download** section. Select the latest version
    to be taken to the download page. On the next page, scroll to the bottom and find
    the operating system version you need before recording the corresponding MD5 hash
    value. Then, download and install the product to the default locations listed
    earlier. Verify the hash values as you did with Kali Purple and VirtualBox, continuing
    the process until Python is fully installed. You may need to abort the VirtualBox
    installation and reboot during this process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find your hash value, record it, and then download and install Python as you
    did with Kali Purple and VirtualBox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – The Python operating system download options](image/B21223_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – The Python operating system download options
  prefs: []
  type: TYPE_NORMAL
- en: Once you have identified the file path of your Python executable, either by
    finding it on your system or downloading it anew, you will then need to modify
    the PATH environment variable. If you had to download Python, the download offers
    an option to automatically set the PATH variable for you! Go back and review the
    steps after downloading and rebooting to verify whether that has been done. If,
    for some reason, the automatic PATH addition was not taken care of, proceed with
    the following instructions to take care of that.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the environment PATH variable in Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Depending on your operating system version, some of these items may not be
    displayed exactly as described here. Rest assured that they are still there. You
    might have to search around your display screen. The order of events is the same:'
  prefs: []
  type: TYPE_NORMAL
- en: On the **Start** menu, right-click on **Computer** | **This PC** or **System**
    and select **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Advanced system settings** on the left side or under **Device Specifications**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Advanced** tab and click on **Environment Variables**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **System variables**, select **Path**, and then click **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **New**, and then add the path to your Python executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK**, and then reboot your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to your VirtualBox installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting the environment PATH variable in macOS or Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'macOS and Linux typically share the following set of instructions to set the
    environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal window and invoke Bash or Zsh.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **~/.bashrc** if you’re using Bash or **~/.zshrc** if you’re using Zsh
    to open the config file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for the **PATH** environment variable – it starts with **export PATH= –**
    and add a colon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a space and then the path to the Python executable (**/path/to/python**)
    after the colon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file and exit the text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **source <configuration_file>** to apply the changes to your current terminal
    session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot your system for the changes to take effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to your VirtualBox installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have eliminated potential communication conflicts, installed Python
    on our system, and pointed our environment PATH variables, we can return to the
    VirtualBox installation and restart the process. After passing the customized
    setup window, we are now presented with the final option. Just squeeze the trigger
    by clicking the **Install** button for the installation wizard to begin deploying
    its magic and start the installation, as shown in *Figure 3**.14*. Once the installation
    is complete, make sure the **Start Oracle VM VirtualBox <edition number> after
    installation** box is checked. Then, select **Finish** to do just that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Begin and finish the mechanical process of installing VirtualBox](image/B21223_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Begin and finish the mechanical process of installing VirtualBox
  prefs: []
  type: TYPE_NORMAL
- en: Once VirtualBox is installed, we need to run it so that we can establish a specific
    VM for our Kali Purple instance. First, let’s record the total amount of RAM,
    disk space, and process cores on our device. In Windows, type **msinfo32** in
    the search bar and select **System Information**. In macOS, click on the Apple
    menu in the top-left corner of your desktop. Select **About This Mac** from the
    drop-down menu. Navigate across the tabs to glean the information you need. As
    usual, Linux has a fun way of doing things. Simply open a Terminal Window and
    type **hwinfo** for RAM, storage, and CPU information. You can also type **df
    -h** for detailed storage information, **free -h** for detailed RAM information,
    and **lscpu** for detailed CPU information.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have your data collected, launch VirtualBox the same as you would launch
    any other application on your device. To add a new VM, we will click on the **New**
    button. Do not click on the **Add** button, unless you already have a VM on your
    machine with a **.vbox** filename extension that was created by a previous VirtualBox
    installation or other virtualization software. We are starting anew. So, we will
    click the **New** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **New** button to create a new VM or the **Add** button to include
    an existing one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – The VirtualBox lobby screen](image/B21223_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – The VirtualBox lobby screen
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Create Virtual Machine** window, type a name for your VM, and use
    the drop-down arrow to select the path of the Kali Purple **.iso** file that you
    downloaded at the beginning of this chapter. Select **Next** when you are finished.
    The action items are highlighted in *Figure 3**.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Creating new VM action items](image/B21223_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – Creating new VM action items
  prefs: []
  type: TYPE_NORMAL
- en: Keeping in mind the values you recorded earlier, determine the amount of RAM,
    number of processors, and disk storage you want reserved for this VM. Understand
    that your host device will still need some of these resources to do its job. So,
    selecting the maximum amount that you recorded is likely to cause significant
    performance issues and/or Kali Purple installation errors. At a minimum, choose
    2 GB of RAM, 1 processor, and 20 GB of disk storage. When finished, select **Next**
    after each screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Allocate enough but not too many resources, based on the numbers you recorded
    from your device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Allocating resources for the new VM](image/B21223_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – Allocating resources for the new VM
  prefs: []
  type: TYPE_NORMAL
- en: 'VirtualBox will finalize the settings for your new VM and present a **Summary**
    screen for you to review, as shown in *Figure 3**.18*. Make sure that the screen
    reflects the settings you chose, and then select **Finish** to return to the lobby
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – The VM summary screen presented for final user acceptance](image/B21223_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – The VM summary screen presented for final user acceptance
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we agree and accept the final details, the installer will finish its duties
    and return us to the VirtualBox lobby, where we will now see our newly created
    VM in the left column. Kali Purple is not yet installed. We named our VM **Kali
    Purple**, so we know that the operating system will load when we click the **Start**
    button after we first install the OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – The VM lobby screen showing the new VM available for use](image/B21223_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – The VM lobby screen showing the new VM available for use
  prefs: []
  type: TYPE_NORMAL
- en: We will begin that shortly, in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The installation of Kali Purple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we finalize preparing our technology for a full hands-on Kali Purple learning
    experience, we need to consider the full scope of our potential needs. You’ve
    already seen that there are Kali Linux versions available for Windows, Linux,
    and Mac. If you skipped ahead because you already had some of these installations,
    you should know that the Purple framework is also available as an option to add
    to an existing Kali Linux installation. For many of you reading this, that was
    the case.
  prefs: []
  type: TYPE_NORMAL
- en: We used VirtualBox to install Kali Purple for every scenario to include within
    another Linux host OS, but what if the host OS itself is Kali Linux? This is known
    as a **bare-metal installation** in the world of computing, and a VM is not necessary
    in such a scenario. Now, you certainly can also install virtualization software
    and add a VM Kali installation on top of your current host if you’re looking to
    create a sort of sandbox type of environment to use Purple. However, if Kali is
    your underlying system and you feel comfortable with it, you can simply add Purple
    to the existing Kali Linux host.
  prefs: []
  type: TYPE_NORMAL
- en: This is done by opening a Bash session within a command line and typing **sudo
    apt-get install purple-protocol-plugins**. By running that command, the **apt-get**
    package manager that is native to most Debian-based Linux systems, such as Kali,
    Ubuntu, and Mint, will install all the necessary packages and required plugins
    for Purple, thereby transforming your bare-metal OS into a full-fledged Kali Purple
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: For the rest of us mere mortals, we will proceed to install Kali Purple through
    the VirtualBox VM we just created in the previous section. If you still don’t
    have the VirtualBox instance from the previous section open, then launch the software
    the same as you would any other application and select the **Start** button (highlighted
    in *Figure 3**.19*). When you do, you’ll briefly be greeted with a VirtualBox
    graphic and then taken to the Kali Linux installation screen you can see on the
    right of *Figure 3**.20*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the arrow keys on your keyboard to select **Graphical install** and press
    *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Launching the Kali Purple Linux installation](image/B21223_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Launching the Kali Purple Linux installation
  prefs: []
  type: TYPE_NORMAL
- en: Here, you must use the arrow keys on your keyboard to select **Graphic Install**
    because you are now inside of a VM, and clicking inside of it will prompt an informational
    warning, telling you that clicking inside the VM might cause it to capture the
    host mouse pointer and keyboard, thereby making them unavailable to the host machine.
    You can see in the top right of *Figure 3**.20* that our keyboard was auto-captured.
    That’s perfect. It allows you to use your arrow keys and press *Enter* to begin
    the graphical installation, and that’s what you should do right now.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may get a mount warning like the one shown in *Figure 3**.21*. If you receive
    this warning, make sure all your hardware and drivers are up to date. You should
    not need to stop your installation. In fact, sometimes, the installation itself
    will resolve errors like this before all is said and done. However, once it is
    complete, you’ll want to make sure that your **/media** directory exists by trying
    to find or navigate to it. If it doesn’t, then you can create it by simply typing
    **sudo mkdir /media**. This is a scenario where there are many different possibilities.
    Therefore, if one of those two actions does not resolve it, you’ll want to put
    on your analyst research hat and utilize your favorite search engine to help narrow
    down the problem. More likely than not, these warnings will not impede your ability
    to successfully operate Kali Purple because they are informational in nature and
    not outright errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Launching the Kali Purple Linux installation](image/B21223_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – Launching the Kali Purple Linux installation
  prefs: []
  type: TYPE_NORMAL
- en: The installation process will continue working behind the scenes until it pauses
    to grab customization input from you. First, it will ask you which language you
    prefer the installation to be in, and then it will ask you which country you are
    in to help narrow down the time zone, which will be further refined later. Note
    the semi-transparent overlay on the right column. You can simply resize your installation
    window to expand it enough for that to disappear, and then select **Continue**
    in the lower right of each screen after you make your selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select your default language and country for the installation to customize
    it to your needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Launching the Kali Purple Linux installation](image/B21223_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – Launching the Kali Purple Linux installation
  prefs: []
  type: TYPE_NORMAL
- en: The next screen will again ask you to identify your language, but if you pay
    close attention, you’ll see that, this time, it asks for the language you wish
    for your keyboard to be configured in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the keyboard language. Kali Purple provides status bars through each
    step of the installation process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23 – The keyboard language and purple installation metrics](image/B21223_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.23 – The keyboard language and purple installation metrics
  prefs: []
  type: TYPE_NORMAL
- en: 'After making several mounts and installations, Kali Purple will then ask for
    your help in finalizing the configuration of the network. First, enter a hostname
    for your new system. Make sure that, when selecting a name, you keep it to 63
    characters or fewer and use only alphanumeric characters, numbers 0 through 9,
    or a minus sign (which cannot be the first or last character). The minus sign
    is the only special character allowed. You cannot use underscores or empty white
    spaces. If you do not strictly adhere to this naming convention, the installer
    will throw an error and force to you continue selecting potential hostnames until
    the parameters are met. When finished, click **Continue**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24 – Selecting a hostname](image/B21223_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.24 – Selecting a hostname
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to configure a domain name. This is not the same as the hostname.
    The hostname identifies your specific device when represented from a Kali Linux
    perspective. This step is entirely optional, and its purpose is to help support
    further recognition of the system on your network or by a **Domain Name System**
    (**DNS**) server. We don’t have plans for that in *Introduction to Kali Purple*,
    so you can either leave it blank or enter a random value such as **.purple**,
    and then click **Continue**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.25 – Selecting a domain name](image/B21223_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.25 – Selecting a domain name
  prefs: []
  type: TYPE_NORMAL
- en: The next two screens will ask for your name and username. The first screen asks
    for your real name, which will be used for any activity where your identity will
    be displayed. The second screen asks for a username for your account. Because
    this installation is for training purposes and will not be used in a live commercial
    setting, we will just use the author’s first and last name, all in lowercase,
    with no white space for each instance. Select **Continue** after each screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set your real name for the system to display, and also pick a username for
    your non-administrative account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.26 – Establishing your real name and username](image/B21223_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.26 – Establishing your real name and username
  prefs: []
  type: TYPE_NORMAL
- en: Where there be usernames, there be passwords. Let’s set one up for our non-administrative
    account. Long passwords are the best natural combatant against auto-cracking password
    utilities. A password could be an entire phrase. For example, **KarlLaneIsAnIncrediblyTerribleChef**
    would be a fantastic password, which is hard to crack because of its length but
    easy to remember, were it not printed in this book. No complicated or special
    characters are needed. Another method is to concatenate – that is, to put together
    without adding – multiple terms, preferably three or more completely unrelated
    words, such as **RockLasagnaPlastic**. Then again, if you’ve ever tasted Karl’s
    lasagna you might think those three terms really are related and be tempted to
    buy him a Packt cookbook out of sheer pity.
  prefs: []
  type: TYPE_NORMAL
- en: Since this is a training installation that is uninstalled and reinstalled over
    and over, testing for as many different conditions as possible that you might
    encounter, we’ve just kept our passwords relatively short, since the whole process
    is temporary anyway (only at our end; you should keep your installation). When
    you are satisfied with your password, click **Continue**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set a strong password for your non-administrative account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27 – Setting and confirming a password](image/B21223_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.27 – Setting and confirming a password
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample of time zones in or near the country you selected is available for
    you to set your VM’s clock, as shown in *Figure 3**.28*. Click **Continue** to
    observe Kali Purple beginning to format your VM disk space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28 – Select your time zone and observe Kali Purple formatting your
    VM drive](image/B21223_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.28 – Select your time zone and observe Kali Purple formatting your
    VM drive
  prefs: []
  type: TYPE_NORMAL
- en: To complete the disk partitioning portion of the process, the installer will
    ask you whether you want one of several guided partitioning options or whether
    you want to do it manually. You know your own level of technical acumen, but since
    this is an introduction to Kali Purple, we are going to stick with the **Guided
    - use entire** **disk option**.
  prefs: []
  type: TYPE_NORMAL
- en: '*Guided* simply means the installer will use a pre-defined standard partitioning
    scheme rather than having you, the user, configure it yourself. The *use entire
    disk* part is a reference to the disk as seen by the VM. So, in other words, it’s
    not the entire disk of your host device. Rather, it’s the entire disk that has
    been set aside for the VM. Depending on when you’re reading this and what version
    of the **.iso** file is the latest release, you may still be asked to manually
    select a partition style. Because we cannot predict the future, what you do is
    down to your comfort level of your own technical abilities. If you’re not much
    of an OS or hardware person and this isn’t your specialty, that’s quite alright!
    There are a lot of *techies* who aren’t into one area of tech or another. Simply
    open up your favorite search engine and search for **Kali Purple <your .iso version>
    default partition style**. You’ll find this community is more than willing to
    help others enjoy Kali Purple, and we all love to make sure people can easily
    set up the product.'
  prefs: []
  type: TYPE_NORMAL
- en: '**LVM** stands for **logical volume management**. This is a disk management
    technology that allows for greater flexibility and more advanced features than
    traditional disk partitions. Logical disk partitions, or volumes, can be resized
    and moved, which makes it easier to manage storage space in the future. These
    advanced disk partitioning strategies are outside the scope of this book and will
    not be needed. Click **Continue** when you are ready to proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29 – Time zone selection and the installer formatting status bars](image/B21223_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.29 – Time zone selection and the installer formatting status bars
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s time to deal with the **GRand Unified Bootloader** (**GRUB**). This
    is the default boot loader used in many Linux distributions, including Kali. It’s
    been reported that this step does not appear in the **2024.1** **.iso** version.
    No worries if that’s the case; just continue to proceed through the rest of the
    installation process. The GRUB is responsible for loading the OS kernel – that
    is, the core, or engine – into memory and initializing the system during the bootstrap
    (commonly referred to as booting) process.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the **Install the GRUB bootloader** screen is first displayed, one of
    the things which comes up that might grab your attention is a warning in the second
    paragraph. It states that if your computer has another OS already installed and
    the installer has failed to detect it, continuing with this installation will
    make that OS temporarily unbootable. What’s important to consider here is that
    you’re operating from within a VM. So, as far as the GRUB bootloader installer
    is concerned, the host OS doesn’t exist. It’s only referencing what it can see,
    and it can only see what’s inside the VM. Your host machine will not be affected
    in any way. Therefore, it’s safe to proceed. Select the **Yes** radio button,
    and then click **Continue** to finish installing the GRUB boot loader:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30 – The GRUB boot loader installation](image/B21223_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.30 – The GRUB boot loader installation
  prefs: []
  type: TYPE_NORMAL
- en: 'The installer will ask you to confirm the location where you want the GRUB
    boot loader installed. It will provide you the option to manually enter a location
    or select the pre-determined VM drive. We don’t need to customize our location.
    So, select the option provided and click **Continue** to finish the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.31 – The GRUB boot loader installation](image/B21223_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.31 – The GRUB boot loader installation
  prefs: []
  type: TYPE_NORMAL
- en: The installer should provide the status bar we’ve been seeing throughout this
    entire Kali Purple installation process, showing that GRUB is being put into place.
    When finished, you’ll get one final action item, asking you to remove any media,
    such as an external hard drive or USB drive, that you might have had VirtualBox
    grab the Kali Purple **.iso** file from. In this example, we just linked directly
    to the **.iso** file in the Windows **Downloads** folder. Once you’ve satisfied
    the requirement of removing any physical installation media, click **Continue**
    to boot into your new Kali Purple OS for the very first time.
  prefs: []
  type: TYPE_NORMAL
- en: You may be asked at some point to select which software packages you’d like
    to include. We’d recommend selecting anything belonging to any of the core **National
    Institute of Standards and Technology** (**NIST**) domains, *Identify*, *Protect*,
    *Detect*, *Respond*, and *Recover*. There is a sixth NIST domain; it has been
    added to this software list only in February 2024 – *Govern* is meant more for
    senior management. We will learn a little about it in [*Chapter 11*](B21223_11.xhtml#_idTextAnchor183).
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the GRUB status bar, and select **Continue** when you’re ready to boot
    into the OS for the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.32 – The final action item of the Kali Purple installation process](image/B21223_03_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.32 – The final action item of the Kali Purple installation process
  prefs: []
  type: TYPE_NORMAL
- en: 'The installer will make one final run at some behind-the-scenes housekeeping
    and then send some signals to the installer that this installation is finished.
    Therefore, it should terminate its activity and send us directly to the Kali Purple
    boot menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.33 – Some final housekeeping and the termination commands are sent](image/B21223_03_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.33 – Some final housekeeping and the termination commands are sent
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali Linux will load a boot menu before asking you for the username and password
    you created earlier, as shown in *Figure 3**.34*. Enter your username and password.
    Then, click **Log In**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.34 – The Kali Purple boot menu and login page](image/B21223_03_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.34 – The Kali Purple boot menu and login page
  prefs: []
  type: TYPE_NORMAL
- en: Now, the moment of truth. Drum roll, please…
  prefs: []
  type: TYPE_NORMAL
- en: 'If you see this screen, you have arrived at the Kali Purple desktop and your
    installation was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.35 – The Kali Purple desktop](image/B21223_03_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.35 – The Kali Purple desktop
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have walked you through several application downloading and installation
    activities just to get to this point. We’ve presented those activities in the
    order that makes the most logical sense. For example, many of you likely would’ve
    already had Python installed, so it wouldn’t have made sense to have everybody
    do it upfront. It made sense to download the Kali Purple **.iso** file before
    VirtualBox, as part of the VirtualBox configuration requires already having a
    location for the **.iso** file so that it can configure a VM specifically for
    it. Then, the grand marshal herself – the installation and configuration of Kali
    Purple.
  prefs: []
  type: TYPE_NORMAL
- en: However, we are not quite yet done downloading and configuring our technology
    for Purple. There is one more critical component to run a successful Purple instance,
    which is the Java SDK. The reason we have saved this item for last is that we
    don’t need it to install our VM or Kali Purple. However, it is heavily depended
    upon by many software applications, including those we will use inside the Purple
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will work through acquiring and installing the Java
    language support for our new OS installation. We will work from within the Kali
    Purple environment for the rest of this book. From here on out, any downloads
    and installations will occur through Kali Purple. So, keep your non-administrative
    account credentials handy.
  prefs: []
  type: TYPE_NORMAL
- en: The installation of the Java SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This brings us to the final preparatory acquisition and installation. We will
    complete this process by downloading and installing the Java SDK. Sometimes, you
    will see this presented simply as the **Java Development Kit** (**JDK**). They
    are one and the same. Some applications in Kali Linux require the JDK to properly
    function, such as Burp Suite, Metasploit, and **Zap Attack** **Proxy** (**ZAP**).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you aren’t still logged into Kali Purple from the previous section, go ahead
    and open your VirtualBox application, select the VM you created for Kali Purple,
    and click the *Start* button to boot up the OS. When prompted, enter your credentials
    and click **Log In**, and that should bring you back to the Purple desktop. Now
    that you are inside Kali Linux, the next step will be much easier for you. There
    is no need to navigate through this text, picking out only the portions that pertain
    to your host OS, unless you wish to download the JDK on your host. However, we
    are downloading it for Kali Purple, so we can make that entire maneuver from inside
    Kali Purple. Click the little black box near the top-left of your screen (highlighted
    by the square in *Figure 3**.36*) to open a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.36 – Opening a command terminal](image/B21223_03_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.36 – Opening a command terminal
  prefs: []
  type: TYPE_NORMAL
- en: Once the terminal window opens, you will see a command prompt resembling the
    one in the preceding screenshot. We will use the **Advanced Package Tool** (**APT**)
    to download and install software packages from now on. This tool is remarkably
    powerful and efficient! For the most part, you will no longer need to manually
    check the hash values of your downloads. APT is designed to handle the authenticity
    and integrity of these packages for you. Indeed, it will automatically perform
    the file verification on your behalf. In fact, APT will take package verification
    a step further. It uses a variety of cryptographic signatures and hash checks
    to verify package integrity. Not only will it evaluate the checksums for you,
    but it will also verify package authenticity through something called **GNU Privacy
    Guard** (**GPG**) keys. All of this is done in the background by default each
    time you invoke the APT command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the JDK, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Type **sudo** **apt update**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the password you created earlier if prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for the list of available updates to complete and the command prompt to
    become visible again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **sudo apt upgrade** to install the updates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **Y** or **Yes** when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **sudo apt** **install default-jdk**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **Y** or **Yes** when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for the download to complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type **javac -version** to confirm success and review the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! If the final command produces any results, that means your download
    and installation were a success, and it likely took mere seconds compared to how
    we did things at the beginning of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we prepared our host device and technology for an immersive
    Kali Purple experience. Along the way, we reviewed some of the most common errors
    users will experience when negotiating the complexities of assembling and installing
    all the moving parts needed for a Kali Purple instance to successfully run. We’ve
    honed our cybersecurity analyst skillset by providing solutions, as well as holistic
    nudges, to help accommodate those ultra-rare situations.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that being a true cybersecurity analyst means you will need to learn
    how to solve problems that are yet unknown. While we’ve covered some of the most
    common issues when setting up a Kali Purple environment, it’s impractical to cover
    all of them, as all of them are unknown! One of the most important skills an analyst
    needs to have is learning how to learn. Hopefully, you’ve gained some valuable
    insight in this chapter to help you feel some achievement in that arena.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll be taking these lessons into [*Chapter 4*](B21223_04.xhtml#_idTextAnchor076),
    where we will begin installing, configuring, and testing components of the ELK
    stack. We will lay the groundwork for the eventual SIEM toolset that we will build
    within our home-built SOC environment.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a hash value?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A breakfast dish involving corned beef and diced potatoes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A metric used to measure your feelings of nausea
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A fixed length one-way mathematical encryption result
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A variable length one-way mathematical encryption result
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should we download the Kali Purple **.iso** file before configuring VirtualBox?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: VirtualBox is dependent upon Kali Purple to run.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: VirtualBox can install Kali Purple immediately after configuring a new VM.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, VirtualBox will block all external downloads for security purposes.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The Java SDK is required by Kali Purple. True or false?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True – it is an integral part of keeping the OS functional.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: False – it is not required, but many applications within Kali Purple will not
    run properly without it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: True – it is not a necessary application, but the creators of Kali Purple wanted
    to offer it in case it might someday be deemed necessary.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: False – it is not required, but every single application within Kali Purple
    needs it to function.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How much RAM, CPUs, and disk space should we allocate to any new VM?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: About 10% of the host machine’s total values
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The entire amount of the host machine’s values; we need every amount of power
    and storage we can get!
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The recommended values of the applications we intend to run, provided they do
    not exceed what’s reasonably available to us
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The minimum specifications required for the applications we intend to run to
    preserve resources for future host machine operations
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When using the APT, we no longer need to check hash values. True or false?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generally, this is true.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: False – we always need to check hash values.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This is always completely true.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What’s the difference between selecting **New** versus **Add** on the VM’s lobby?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nothing – they are one and the same.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**New** creates a new VM while **Add** merges two or more VMs together.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Add** will look for a **.vBox** file or other compatible file and establish
    a VM based on it.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: They both create a new VM, but selecting **New** tells VirtualBox that you’re
    a new user and need a tutorial walk-through.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Calculate hash** **values**: [https://www.fileformat.info/tool/hash.htm](https://www.fileformat.info/tool/hash.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kali.org requirements** **data**: [https://www.kali.org/docs/installation/hard-disk-install/](https://www.kali.org/docs/installation/hard-disk-install/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Holland & Knight Law Firm** – *Forensic Hashing in Criminal and Civil* *Discovery*:
    [https://www.hklaw.com/en/insights/publications/2022/05/forensic-hashing-in-criminal-and-civil-discovery](https://www.hklaw.com/en/insights/publications/2022/05/forensic-hashing-in-criminal-and-civil-discovery)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FBI usage of hash values for the PIA, CVIP, and** **IINI**: [https://www.fbi.gov/how-we-can-help-you/more-fbi-services-and-information/freedom-of-information-privacy-act/department-of-justice-fbi-privacy-impact-assessments/cvip](https://www.fbi.gov/how-we-can-help-you/more-fbi-services-and-information/freedom-of-information-privacy-act/department-of-justice-fbi-privacy-impact-assessments/cvip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Free PowerShell training from Microsoft** **Corporation**: [https://learn.microsoft.com/en-us/training/modules/introduction-to-powershell/](https://learn.microsoft.com/en-us/training/modules/introduction-to-powershell/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
