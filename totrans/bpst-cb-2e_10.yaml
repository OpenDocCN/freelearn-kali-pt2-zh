- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Burp Suite Macros and Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers two separate topics that can also be blended together:
    macros and extensions. Burp Suite macros enable penetration testers to automate
    events, such as logins or parameter reads, to overcome potential error situations.
    Extensions, also known as plugins, extend the core functionality found in Burp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating session-handling macros
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting caught in the cookie jar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding great pentester plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating new issues via the **Add & Track Custom** **Issues** extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the **Active** **Scan++** extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Burp Suite extensions for bug bounties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to complete the recipes in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP **Broken Web** **Applications** (**BWA**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Mutillidae (**http://<Your_VM_Assigned_IP_Address>/mutillidae**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GetBoo (**http://<Your_VM_Assigned_IP_Address>/getboo**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Proxy Community or Professional ([https://portswigger.net/burp/](https://portswigger.net/burp/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating session-handling macros
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Burp Suite, the **Project options** tab allows testers to set up session-handling
    rules. A session-handling rule allows a tester to specify a set of actions Burp
    Suite will take in relation to session tokens or **cross-site request forgery**
    (**CSRF**) tokens while making HTTP requests. There is a default session-handling
    rule in scope for Spider and Scanner. However, in this recipe, we will create
    a new session-handling rule and use a macro to help us create an authenticated
    session from an unauthenticated one while using **Repeater**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II application, we will create a new Burp Suite session-handling
    rule, with an associated macro, to create an authenticated session from an unauthenticated
    one while using **Repeater**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate to the **Login** page in Mutillidae. Log in to the application with
    the username **ed** with the password **pentest**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Logging in as ed/pentest](image/B21173_Figure_10.01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Logging in as ed/pentest
  prefs: []
  type: TYPE_NORMAL
- en: 'Immediately log out of the application by clicking the **Logout** button, and
    make sure the application confirms you are logged out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Logging out](image/B21173_Figure_10.02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Logging out
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to Burp Suite’s **Proxy** | **HTTP history** tab. Look for the logout
    request you just made along with the subsequent, unauthenticated **GET** request.
    Select the unauthenticated request, which is the second **GET** request. Right-click
    and send that request to **Repeater**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Sending a GET request to Repeater](image/B21173_Figure_10.03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Sending a GET request to Repeater
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to Burp Suite **Repeater**, then click the **Send** button. On the **Render**
    tab of the response, ensure you receive a **Not Logged In** message. We will use
    this scenario to build a session-handling rule to address the unauthenticated
    session and make it an authenticated one, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Repeater](image/B21173_Figure_10.04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Repeater
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Burp Suite **Settings** gear icon in the top-right corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Global Settings gear icon](image/B21173_Figure_10.05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Global Settings gear icon
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, select the **Sessions** area and click the **Add** button under the **Session
    handling rules** section, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Adding a new session-handling rule](image/B21173_Figure_10.06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Adding a new session-handling rule
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the **Add** button, a pop-up box appears. Give your new rule
    a name, such as **LogInSessionRule**, and under **Rule actions**, select **Run
    a macro**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Rule name and action](image/B21173_Figure_10.07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Rule name and action
  prefs: []
  type: TYPE_NORMAL
- en: 'Another pop-up box appears, which is the **Session handling action editor**
    dialog window. In the first section, under **Select macro**, click the **Add**
    button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Adding a new macro](image/B21173_Figure_10.08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – Adding a new macro
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the **Add** button, the macro editor appears, along with another
    popup of **Macro Recorder**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Macro Recorder](image/B21173_Figure_10.09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Macro Recorder
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the **Macro Recorder** window, look for the **POST** request where you
    logged in as **ed** as well as the following **GET** request. Highlight both of
    those requests within the **Macro Recorder** window and click **OK**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Selected actions](image/B21173_Figure_10.010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – Selected actions
  prefs: []
  type: TYPE_NORMAL
- en: 'Those two highlighted requests in the previous dialog window now appear inside
    the **Macro Editor** window. Give the macro a description, such as **LogInMacro**,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.11 – Naming your macro](image/B21173_Figure_10.011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – Naming your macro
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Configure** **item** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Configuring your macro](image/B21173_Figure_10.012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – Configuring your macro
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to validate that the **username** and **password** values are correct.
    Click **OK** when this is done, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.13 – Login parameters set](image/B21173_Figure_10.013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.13 – Login parameters set
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **OK** to close the **Macro Editor** window. You should see the newly
    created macro in the **Session handling action editor** window. Click **OK** to
    close this dialog window, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Closing the Session handling action editor window](image/B21173_Figure_10.014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.14 – Closing the Session handling action editor window
  prefs: []
  type: TYPE_NORMAL
- en: 'After closing the **Session handling action editor** window, you are returned
    to the **Session handling rule editor** window where you now see the **Rule actions**
    section populated with the name of your macro. Click the **Scope** tab of this
    window to define which tool will use this rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.15 – Identifying the scope](image/B21173_Figure_10.015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – Identifying the scope
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Scope** tab of the **Session handling rule editor** window, uncheck
    the other boxes, leaving only the **Repeater** box checked. Under **URL scope**,
    click the **Include all URLs** radio button. Click **OK** to close this editor,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.16 – Setting the scope](image/B21173_Figure_10.016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.16 – Setting the scope
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now see the new session-handling rule listed in the **Session handling
    rules** window, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.17 – Enabling your new rule](image/B21173_Figure_10.017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.17 – Enabling your new rule
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the **Repeater** tab where you previously were not logged in to the
    application. Click the **Send** button to reveal that you are now logged in as
    **ed**! This means your session-handling rule and associated macro worked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.18 – Result of session-handling rule and associated macro](image/B21173_Figure_10.018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.18 – Result of session-handling rule and associated macro
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we saw how an unauthenticated session can be changed to an authenticated
    one by replaying the login process. The creation of macros allows manual steps
    to be scripted and assigned to various tools within Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite allows testers to configure session-handling rules to address various
    conditions that the suite of tools may encounter. The rules provide additional
    actions to be taken when those conditions are met. In this recipe, we addressed
    an unauthenticated session by creating a new session-handling rule that is called
    a macro. We confined the scope for this rule to **Repeater** only for demonstration
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting caught in the cookie jar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While targeting an application, Burp Suite captures all cookies while proxying
    and crawling. Burp Suite stores these cookies in a cache called the **cookie jar**.
    This cookie jar is used within the default session-handling rule and can be shared
    among the suite of Burp Suite tools, such as **Proxy**, **Intruder**, and **Repeater**.
    Inside the cookie jar, there is a historical table of requests. The table details
    each cookie domain and path. It is possible to edit or remove cookies from the
    cookie jar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will open the Burp Suite cookie jar and look inside. Then, using the OWASP
    GetBoo application, we’ll identify new cookies added to the Burp Suite cookie
    jar.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Click the Burp Suite **Settings** gear icon in the top-right corner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.19 – Global Settings gear icon](image/B21173_Figure_10.019..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.19 – Global Settings gear icon
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, select the **Sessions** area and go to the **Cookie** **jar** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.20 – Cookie jar](image/B21173_Figure_10.020..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.20 – Cookie jar
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Cookie jar** section, click the **Open cookie jar** button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.21 – Opening the cookie jar](image/B21173_Figure_10.021..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.21 – Opening the cookie jar
  prefs: []
  type: TYPE_NORMAL
- en: 'A new pop-up box appears showing all cookies captured in **Proxy**. Notice
    each cookie has **Domain**, **Path**, **Name**, and **Value** details identified:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.22 – Details of each cookie](image/B21173_Figure_10.022..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.22 – Details of each cookie
  prefs: []
  type: TYPE_NORMAL
- en: 'Select a cookie in the list and click the **Edit cookie** button. For example,
    we can modify the value of the **PHPSESSID** cookie from a random cryptographic
    string to **thisIsMyCookie** and then click **OK**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.23 – Editing the PHPSESSID cookie value](image/B21173_Figure_10.023..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.23 – Editing the PHPSESSID cookie value
  prefs: []
  type: TYPE_NORMAL
- en: 'The value is now changed, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.24 – Setting the cookie to a new value](image/B21173_Figure_10.024..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.24 – Setting the cookie to a new value
  prefs: []
  type: TYPE_NORMAL
- en: 'The default scope for the Burp Suite cookie jar is **Proxy**. However, you
    may expand the scope to include other tools. Click the checkbox for **Repeater**,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.25 – Setting the scope](image/B21173_Figure_10.025..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.25 – Setting the scope
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you create a new session-handling rule and use the default Burp Suite
    cookie jar, you will see the new value for that cookie used in the requests. We
    can see this in action by turning on our **LoginSessionRule** session-handling
    rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.26 – Enabling LoginSessionRule](image/B21173_Figure_10.026..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.26 – Enabling LoginSessionRule
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, send an unauthenticated request to **Repeater** and click **Send**. Notice
    the value of your cookie is **thisIsMyCookie**. This technique can be very helpful
    for session-hijacking attacks when you steal the cookie of a victim and need to
    ensure the cookie value doesn’t change back to your session cookie:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.27 – Result of rule and cookie jar change](image/B21173_Figure_10.027..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.27 – Result of rule and cookie jar change
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Burp Suite cookie jar is used by session-handling rules for cookie handling
    when automating requests against a target application. In this recipe, we investigated
    the cookie jar, understood its contents, and even modified one of the values of
    a captured cookie. Any subsequent session-handling rules that use the default
    Burp Suite cookie jar will see the modified value in the request.
  prefs: []
  type: TYPE_NORMAL
- en: Adding great pentester plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As web application testers, you will find handy tools to add to your repertoire
    to make your assessments more efficient. The Burp Suite community offers many
    wonderful extensions. In this recipe, we will add a couple of them and explain
    how they can make your assessments better. **Get All Params** (**GAP**) and **Software
    Vulnerability Scanner** are the two plugins we will add to Burp Suite and use
    with the passive scanner.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Both plugins require the Burp Suite Professional version.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II application, we will add two handy extensions
    that will help us find more vulnerabilities in our target.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first extension, **GAP-Burp-Extension**, is available at the following
    GitHub repository: [https://github.com/xnl-h4ck3r/GAP-Burp-Extension](https://github.com/xnl-h4ck3r/GAP-Burp-Extension).
    Install Git on Linux or Git for Windows ([https://gitforwindows.org/](https://gitforwindows.org/)).
    Then, using the **git clone** [https://github.com/xnl-h4ck3r/GAP-Burp-Extension.git](https://github.com/xnl-h4ck3r/GAP-Burp-Extension.git)
    command, download the repo to your local system.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change directory into **GAP-Burp-Extension** after the download of the repo.
    Make note of the location of the **GAP.py** file. This is the file you will load
    into Burp Suite to use the extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.28 – Python script to run GAP](image/B21173_Figure_10.028..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.28 – Python script to run GAP
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you must have Jython installed prior to using the GAP extension.
    To install Jython, go to the **Extensions** | **Extensions settings** gear icon
    and click the icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.29 – Extension settings](image/B21173_Figure_10.029..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.29 – Extension settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Jython site ([https://www.jython.org/](https://www.jython.org/))
    and download the standalone Jython JAR file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.30 – Downloading Jython](image/B21173_Figure_10.030..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.30 – Downloading Jython
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the location of your standalone Jython JAR file in the **Python** **environment**
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.31 – Configuring Jython](image/B21173_Figure_10.031..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.31 – Configuring Jython
  prefs: []
  type: TYPE_NORMAL
- en: 'Once configured, close the **Extension settings** pop-out window by clicking
    the **X** sign in the top-right corner of the window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.32 – Closing the settings](image/B21173_Figure_10.032..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.32 – Closing the settings
  prefs: []
  type: TYPE_NORMAL
- en: 'After configuring, go to the **Burp Suite** | **Extensions** tabs and select
    the **Installed** tab. Click **Add** and change the **Extension type** value to
    **Python**. Browse to the location of the **GAP.py** file inside the **GAP-Burp-Extension**
    directory on your local system. You may also need to perform a Python **pip**
    command to install the requirements for GAP on your local system, as follows:
    **java -jar jython-standalone-2.7.3.jar -m pip install -r requirements.txt** (source:
    [https://github.com/xnl-h4ck3r/GAP-Burp-Extension](https://github.com/xnl-h4ck3r/GAP-Burp-Extension)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.33 – Installing the extension](image/B21173_Figure_10.033..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.33 – Installing the extension
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure the extension is enabled by seeing the box checked next to its name
    within the Burp Suite **Extensions** area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.34 – Enabling the extension](image/B21173_Figure_10.034..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.34 – Enabling the extension
  prefs: []
  type: TYPE_NORMAL
- en: 'After the extension is loaded and enabled, notice you have a new **GAP** tab
    at the top of the Burp Suite menu of tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.35 – New GAP tab](image/B21173_Figure_10.035..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.35 – New GAP tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run GAP on our Mutillidae target. Go to **Target** | **Site map**, right-click
    on the root directory of the application, and select **Extensions** | **GAP**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.36 – Invoking the GAP extension against the target](image/B21173_Figure_10.036..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.36 – Invoking the GAP extension against the target
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select the **GAP** tab at the top of your Burp Suite tools. Notice the
    list of potential parameters GAP found. Our **ToolID** identifier is present,
    which we used to exploit in a previous recipe! Also, notice all links GAP found
    for you. These are new attack vectors you can use to widen your scope for finding
    bugs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.37 – Results found with GAP](image/B21173_Figure_10.037..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.37 – Results found with GAP
  prefs: []
  type: TYPE_NORMAL
- en: 'For the second extension, switch to the Burp Suite **Extensions** tab. Go to
    the **BApp Store** subtab and find the **Software Vulnerability** **Scanner**
    plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.38 – Software Vulnerability Scanner extension](image/B21173_Figure_10.038..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.38 – Software Vulnerability Scanner extension
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Install** button on the right side and select the extension name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.39 – Install button](image/B21173_Figure_10.039..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.39 – Install button
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing the two plugins, go to the **Extensions** tab, then the **Burp
    Suite extensions** section. Make sure both plugins are enabled with check marks
    inside the checkboxes. Also, notice the **Software Vulnerability Scanner** extension
    has a new tab, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.40 – New tab](image/B21173_Figure_10.040..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.40 – New tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Software Vulnerability Scanner** tab and notice the default scan
    rules along with an option to supply an **API Token** type for faster scan speeds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.41 – Inside the Software Vulnerability Scanner tab](image/B21173_Figure_10.041..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.41 – Inside the Software Vulnerability Scanner tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to **Target** | **Site map** with Mutillidae home page as our target.
    Perform a lightweight, less invasive passive scan by right-clicking and selecting
    **Passively scan this branch**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.42 – Scanning the target](image/B21173_Figure_10.042..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.42 – Scanning the target
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the additional findings created from **Software Vulnerability Scanner**.
    The **Vulners** plugin found numerous vulnerable software issues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.43 – Looking for extension findings](image/B21173_Figure_10.043..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.43 – Looking for extension findings
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the details of the first finding, note the various links provided
    to known exploits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.44 – Advisory showing exploits available](image/B21173_Figure_10.044..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.44 – Advisory showing exploits available
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Burp Suite functionality can be extended through a PortSwigger API to create
    custom extensions, also known as plugins. In this recipe, we installed two plugins
    that assist with identifying older versions of software contained in the application
    with known vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new issues via the Add & Track Custom Issues extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though Burp Suite provides a listing of many security vulnerabilities commonly
    found in web applications, occasionally you will identify an issue and need to
    create a custom scan finding. This can be done using the **Add & Track Custom**
    **Issues** extension.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This plugin requires the Burp Suite Professional edition.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II application, we will add the **Add & Track Custom
    Issues** extension, create steps revealing a finding, and then use the extension
    to create a custom issue.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Switch to the Burp Suite **Extension** tab. Go to the **BApp Store** subtab
    and find the plugin labeled **Add & Track Custom Issues**. Click the **Install**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.45 – Add & Track Custom Issues extension](image/B21173_Figure_10.045..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.45 – Add & Track Custom Issues extension
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure the extension is loaded and enabled in the **Extensions** | **Installed**
    | **Burp** **extensions** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.46 – Loading the extension](image/B21173_Figure_10.046..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.46 – Loading the extension
  prefs: []
  type: TYPE_NORMAL
- en: Return to the Firefox browser and browse to the Mutillidae home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the Burp Suite **Proxy** | **HTTP history** tab and find the request
    you just made browsing to the home page. Click the **Response** tab. Note the
    overly verbose **Server** header indicating the web server type and version, along
    with the operating system and programming language used. This information can
    be used by an attacker to fingerprint the technology stack and identify vulnerabilities
    that can be exploited:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.47 – Issue to create](image/B21173_Figure_10.047..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.47 – Issue to create
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this is a finding, we need to create a new issue manually to capture
    it for our report. While viewing the **Response** window, right-click and select
    **Extensions** | **Add & Track Custom Issues** | **Add & Track Custom Issue**,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.48 – Creating a custom issue](image/B21173_Figure_10.048..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.48 – Creating a custom issue
  prefs: []
  type: TYPE_NORMAL
- en: 'A pop-up dialog box appears. Within the **New Issue** tab, we can create a
    new issue name of **Information Leakage in Server Response**. Change the severity
    to **Medium**. Notice how the extension copied our request and response for us
    in the bottom panels. You may continue to add more verbiage in the other text
    areas, such as the issue detail, background, and remediation areas. Click the
    **Add & Track Custom Issue** button at the bottom when you are done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.49 – Setting the name and severity](image/B21173_Figure_10.049..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.49 – Setting the name and severity
  prefs: []
  type: TYPE_NORMAL
- en: 'Once completed, switch back to **Target** | **Site map** and select the root
    directory for Mutillidae. You should see the newly created scan issue added to
    the **Issues** window, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.50 – Seeing the custom issue you added](image/B21173_Figure_10.050..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.50 – Seeing the custom issue you added
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Add & Track Custom Issues** extension provides a new tab allowing you
    to add issues to the internal database. This is a value-added feature, so it is
    not necessary to add your issues in this tab to use the tool. However, the option
    is available if you would like to build your own list of custom issues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.51 – Database of issues](image/B21173_Figure_10.051..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.51 – Database of issues
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In cases where an issue is not available within the Burp Suite core issue list,
    a tester can create their own issue using the **Add & Track Custom Issues** extension.
    In this recipe, we created an issue for information leakage in server responses.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a listing of all issue definitions identified by Burp, go to [https://portswigger.net/kb/issues](https://portswigger.net/kb/issues).
  prefs: []
  type: TYPE_NORMAL
- en: Working with the Active Scan++ extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some extensions assist in finding vulnerabilities with specific payloads, such
    as XML, or help to find hidden issues, such as cache poisoning and DNS rebinding.
    In this recipe, we will add an active scanner extension called **Active Scan++**,
    which assists with identifying these more specialized vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This plugin requires the Burp Suite Professional edition.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the OWASP Mutillidae II application, we will add the **Active Scan++**
    extension, and then run an active scan against the target.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Switch to Burp Suite’s **Extensions** | **BApp Store** tab and select the **Active
    Scan++** extension. Click the **Install** button to install the extension, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.52 – Active Scan++ extension](image/B21173_Figure_10.052..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.52 – Active Scan++ extension
  prefs: []
  type: TYPE_NORMAL
- en: Return to the Firefox browser and browse to the Mutillidae home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to Burp Suite’s **Target** tab and then the **Site map** subtab, right-click
    on the **mutillidae** folder, and select **Actively scan this branch**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.53 – Scanning the target](image/B21173_Figure_10.053..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.53 – Scanning the target
  prefs: []
  type: TYPE_NORMAL
- en: 'After the active scanner completes, browse to the **Issues** window. Make note
    of any additional issues found by the newly added extension. You can always tell
    which ones the extension found by looking for a **This issue was generated by
    the Burp extension: Active Scan++** message, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.54 – Issue from the extension](image/B21173_Figure_10.054..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.54 – Issue from the extension
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Burp Suite functionality can be extended beyond core findings with the use of
    extensions. In this recipe, we installed a plugin that extends the active scanner
    functionality to assist with identifying additional issues such as arbitrary header
    injection, as seen in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using Burp Suite extensions for bug bounties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As bug bounty hunters, you will find handy tools to identify possible bugs more
    easily. There are many, but the two we will look at in this recipe are the **Burp
    Bounty, Scan Check Builder** and **Auth Analyzer**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Burp Bounty, Scan Check Builder** requires the Burp Suite Professional version.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both recommended extensions for bug bounty hunting can be found in the **BApp
    Store** subtab. We will download and install them within our Burp Suite instance.
    Then, we’ll see how to use each to potentially uncover bugs for payouts!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inside Burp Suite’s **Extensions** | **BApp Store** tab, select **Burp Bounty,
    Scan Check Builder** and click the **Install** button. Then, select **Auth Analyzer**
    and click the **Install** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.55 – The two extensions covered in this recipe](image/B21173_Figure_10.055..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.55 – The two extensions covered in this recipe
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the **Extensions** | **Installed** tab and ensure both extensions
    are installed and enabled in the **Burp** **extensions** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.56 – Extensions installed and enabled](image/B21173_Figure_10.056..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.56 – Extensions installed and enabled
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice there is a new tool tab labeled **Burp Bounty Free**. Go to the tab
    and click the **Profiles** subtab. Notice there are several profiles available
    for the different types of scanners and for requests and responses. For now, we
    will use the default settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.57 – Burp Bounty Free tab](image/B21173_Figure_10.057..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.57 – Burp Bounty Free tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to **Target** | **Site map**, right-click, and select **Actively scan
    this branch**. **Burp Bounty** will use both active and passive scans (unless
    you paused them) to find potential bugs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.58 – Scanning the target](image/B21173_Figure_10.058..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.58 – Scanning the target
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Issues** panel, look for the **BurpBounty** keyword in front of each
    bug the extension found. This extension provides several areas for you to dig
    deeper for potential weaknesses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.59 – Results of scan](image/B21173_Figure_10.059..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.59 – Results of scan
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now turn our attention to the **Auth Analyzer** extension. **Auth Analyzer**
    assists in discovering unauthenticated API endpoints, as well as horizontal and
    vertical privilege escalation. Notice there is a new tool tab labeled **Auth Analyzer**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.60 – Auth Analyzer tab](image/B21173_Figure_10.060..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.60 – Auth Analyzer tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the Mutillidae landing page and log in as **admin** with a password
    of **admin**. Find the **POST** request of your login, right-click, and then select
    **Extensions** | **Auth Analyzer** | **Set Parameters Automatically** | **Create**
    **New Session**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.61 – Sending an admin request to Auth Analyzer](image/B21173_Figure_10.061..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.61 – Sending an admin request to Auth Analyzer
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, log out as **admin**. Log in to the application as **ed** with a password
    of **pentest**. Send the **POST** request of your second login to **Auth Analyzer**
    with a right-click, and then select **Extensions** | **Auth Analyzer** | **Repeat**
    **Request (1)**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.62 – Sending a regular user request to Auth Analyzer](image/B21173_Figure_10.062..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.62 – Sending a regular user request to Auth Analyzer
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the **Auth Analyzer** tab and turn the analyzer on. You should see
    a green dot instead of a red dot and an **Analyzer** **Running** label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.63 – Turning Auth Analyzer on](image/B21173_Figure_10.063..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.63 – Turning Auth Analyzer on
  prefs: []
  type: TYPE_NORMAL
- en: 'After turning **Auth Analyzer** on, notice **DIFFERENCE** is determined between
    the two logins. Click the **Show Diff** button to have the difference color-coded
    for you to easily see:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.64 – Seeing differences between requests](image/B21173_Figure_10.064..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.64 – Seeing differences between requests
  prefs: []
  type: TYPE_NORMAL
- en: You would use this extension to log in as a higher-privileged user first. Then,
    you’d map the application’s functionality. After you’ve completed the mapping,
    click the **Logout** button. Then, log in again, but this time, as a regular user,
    perform mapping and use **Auth Analyzer** to identify any areas across the application
    where the lower-privileged user can access administrative functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In addition, **Auth Analyzer** can also be used to remove cookies and access
    tokens inside of requests. This would allow you to test for unauthenticated API
    endpoints much faster. After sending a request to test to **Auth Analyzer**, identify
    the cookie(s) you want removed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.65 – Removing the cookie functionality](image/B21173_Figure_10.065..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.65 – Removing the cookie functionality
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, send a request against a web page or API endpoint and let **Auth Analyzer**
    tell you if there are any differences seen when the cookie is removed. See the
    following example after the **PHPSESSID** cookie is removed. Notice there are
    no cookies in the second request. When using this feature, you can quickly determine
    if the functionality is properly using authorization checks or if a bug is present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.66 – Seeing the difference between two requests](image/B21173_Figure_10.066..jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.66 – Seeing the difference between two requests
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finding bugs for bug bounty hunting can be time-consuming. The **Burp Bounty,
    Scan Check Builder** and **Auth Analyzer** extensions can both help to speed up
    discovery time for finding vulnerabilities in your target applications.
  prefs: []
  type: TYPE_NORMAL
