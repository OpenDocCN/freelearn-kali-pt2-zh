- en: Reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will include the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Google to find subdomains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding e-mail addresses using theHarvester
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating DNS using the `host` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating DNS using DNSRecon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating DNS using the `dnsenum` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will begin the process of gathering information on our target. This
    begins with utilizing passive information-gathering techniques using public sources
    and moves into the active scanning of our target. At this point, it makes sense
    for us to discuss what our strategy is. Once the targets are determined, we will
    want to start collecting information on them. One of the key pieces of information
    is their domain. The **Domain Name System** (**DNS**) is a system of databases
    used to look up IP address(es) for a domain or, given an IP address, provide the
    domain name associated with it. Identifying the domains and subdomains associated
    with the target will provide us with a better idea of the targets assets and organization. We
    start by using Google and other public sources to reveal what we can. This is
    called **reconnaissance** or **passive information gathering**.
  prefs: []
  type: TYPE_NORMAL
- en: When we have completed finding what we can using public sources, we move into
    the active information-gathering phase. The delineation here is that moving forward,
    we will be physically interacting with the target's assets. We begin by actively
    querying the target's DNS servers to uncover more information. Using this information,
    we can begin to narrow in on our target. The goal of this exercise is to uncover
    networks of the target suitable for further investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Next, in [Chapter 3](part0103.html#3279U1-cf89710d791c4a3bb78ec273d9322426),
    *Discovery*, we perform discovery scanning to identify live hosts on the network(s).
    In the context of penetration testing, this is usually performed to identify potential
    targets for attack. The objective here is not to exhaust resources in gathering
    information about targets, but instead to merely find out where the targets are
    logically located. The final product of our discovery should be a list of IP addresses
    that we can then use for further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'After identifying IP addresses, we will then identify the open ports on these
    machines; this is covered in [Chapter 4](part0146.html#4B7I41-cf89710d791c4a3bb78ec273d9322426),
    *Port Scanning*.  After identifying the open ports, we then want to identify the
    services and as many details about the service version, OS, and other details
    as we can; this is covered in [Chapter 5](part0189.html#5K7QA1-cf89710d791c4a3bb78ec273d9322426),
    *Fingerprinting*.  Using the information found here, we will look to uncover specific
    vulnerabilities on the target''s assets; this is covered in [Chapter 6](part0255.html#7J5VE1-cf89710d791c4a3bb78ec273d9322426),
    *Vulnerability Scanning*. The following diagram summarizes the aforementioned
    methodology:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00607.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using Google to find subdomains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A great deal of information can be gathered from publicly available sources. As
    penetration testers, we should take advantage of any methods to gather valuable
    information about our targets anonymously.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All that is needed to perform this exercise is Internet access and a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will use the Google search engine; however, know that there
    are a number of search engines that can provide similar information and, in some
    cases, more or different data. The Google search engine provides a number of search
    operators that allow you to narrow your results when performing queries. A few
    that can come in particularly handy for the penetration tester are `site:`, `inurl:`,
    and `intitle:`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our purposes (finding subdomains), we will use the `site:` search operator,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to [https://www.google.com](https://www.google.com), and we will search
    for sites that are part of the `google.com` domain.  We do this by searching `site:google.com`,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00609.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, Google finds about 2.9 billion results, but almost all of the
    results are of the subdomain `www.google.com`. So, our next step is to filter
    these out so we can continue to find unique subdomains. We do this by modifying
    our query `site:google.com -site:www.google.com`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00611.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We find the additional subdomains of cloud.google.com, translate.google.com,
    gsuite.google.com, duo.google.com, domains.google.com, store.google.com, blog.google.com,
    firebase.google.com, on.google.com and developers.google.com. In some cases, you
    may need to repeat this process a number of times, excluding subdomains as you
    find them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`site:google.com -site:www.google.com -site:cloud.google.com -site:translate.google.com
    -site:gsuite.google.com -site:duo.google.com -site:domains.google.com -site:store.google.com
    -site:blog.google.com -site:firebase.google.com -site:on.google.com -site:developers.google.com`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00612.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google is a powerful tool with a wealth of knowledge. Learning how to use its
    search operators can prove very powerful and valuable for the penetration tester.
  prefs: []
  type: TYPE_NORMAL
- en: Finding e-mail addresses using theHarvester
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using publicly available information, we can also gather information on individuals
    belonging to our target organization. This type of passive information gathering
    could become very valuable for social engineering or deploying an attack.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: theHarvester comes preinstalled on Kali Linux. If you are using a different
    Linux/Unix distribution, it can be downloaded and installed from [https://github.com/laramies/theHarvester](https://github.com/laramies/theHarvester).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: theHarvester is an excellent tool for getting information on an organization
    from public sources. Using the tool, we can query Google, Bing, Twitter, and LinkedIn
    among other sources.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the help and options for theHarvester, simply open the Terminal and
    type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00614.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to find e-mail addresses from `google.com` using the Google search
    engine, we''ll use the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00617.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The command uses `-d` as the domain we want to search, `-l` is used to limit
    the number of results, and `-b` is used to define the data source. Additionally,
    we could use the `-f` flag to write the results to a file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'theHarvester does not always return e-mail addresses. If we use LinkedIn as
    our data source, we can get a list of users.  However for this domain we do not
    receive any:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00619.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can also search against all data sources. With this, we will discover not
    just e-mails, but also hosts and virtual hosts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00653.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'TheHarvester begins by querying all datasources then outputs its findings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00569.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: theHarvester is an excellent tool that queries publicly available data sources and
    provides information on the domain you pass to it.  This information includes
    subdomains, LinkedIn users and email addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating DNS using the host command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous section covered how we could find subdomains using the publicly
    available Google search engine. While this is great, we should never assume that
    all subdomains can be found through such a method. The next few sections will
    cover finding subdomains using active discovery methods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To prepare for working with the `host` command, all you need is to open a Terminal
    from your Kali Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The `host` command is a standard command for Unix, Linux, and macOS systems.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Working with `host` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DNS servers are address books; for this reason normally they will divulge at
    least some information regarding the domains they are the authority for. The `host`
    command is a utility that performs DNS lookups. So we can use the `host` command
    to investigate information about our target domain. We can use the `-a` flag to
    do a comprehensive look up or use the `-t` flag followed by the type to get specific:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00466.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following command will reveal the nameservers associated with `google.com`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00468.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following command will reveal the mail server details for the domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00608.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At a minimum now we should have DNS and mail servers responsible for `google.com`,
    but what else can we find associated with the domain `google.com`? In the previous
    exercise, we already found some web servers associated. Let’s take a closer look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00321.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: What if we try something that doesn’t exist? What can we expect as a result?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00411.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We get an error stating that the subdomain was not found. Knowing this, we could
    test subdomains to see whether they exist. Some popular subdomain are mail, blog,
    ftp, dev, admin, wiki, and help. Of course, this is not a comprehensive list and
    there could be subdomains that are not common at at all.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can also perform zone transfers with the `host` command. In order to do
    this, we need the domain we are analyzing, along with the nameserver address.
    Keep in mind generally DNS is configured in such a way as to not allow transfers.
    Let''s attempt to do a transfer of `google.com` using the nameserver we found
    earlier, `ns1.google.com`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00477.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Sometimes an organization may have a large number of nameservers. In these cases,
    it makes sense to automate this process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the bash script that follows, we first generate a list of nameservers for
    a given domain, then we iterate over each nameserver, attempting a zone transfer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now run our script and view the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00556.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `host` command is a simple utility that returns information about the host
    or IP address it is used to query.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating DNS using DNSRecon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following sections, we will explore a couple of tools that allow us to
    conduct DNS reconnaissance. In effect, this means identifying our target organization's
    DNS servers and subsequently the DNS entries contained in them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNSRecon comes preinstalled on Kali Linux. If you are using a different Linux/Unix
    distribution, it can be downloaded and installed from [https://github.com/darkoperator/dnsrecon](https://github.com/darkoperator/dnsrecon).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DNSRecon is a Python script written by Carlos Perez for conducting DNS reconnaissance. It
    can enumerate general DNS records, perform zone transfers, perform reverse lookups,
    and brute-force subdomains among other functions. It will even perform Google
    scanning, automating the process we discussed in the *Using Google to find subdomains*
    section. To see usage information for `dnsrecon`, run the following command from
    within the `/usr/share/dnsrecon` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00658.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Standard DNS enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A standard DNS enumeration should provide us with SOA, NS, A, AAAA, MX, and
    SRV records, as available. If we run `dnsrecon` without passing the type (`-t`)
    flag, it will run a standard enumeration. To pass the domain we want the scan
    to run against, we use the domain (`-d`) flag followed by our target domain. To
    run a standard enumeration against our target domain, [google.com](http://google.com),
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00668.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Reverse lookups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also use `dnsrecon` to perform a reverse lookup by providing it a range
    of IP addresses. We do this using the range (`-r`) flag, followed by the IP range
    we want it to perform lookups on, as in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Zone transfer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DNS zone transfers are a tool for domain name administrators to replicate their
    DNS databases across their organization''s DNS servers. The problem that arises
    is that this can reveal a great deal of information about an organization''s infrastructure. For
    this reason, typically, DNS servers are configured to not allow a zone transfer. To
    attempt a zone transfer using `dnsrecon`, we would use the `-a` flag (AXFR), or
    you can use the `-t` flag with type `axfr`. The `axfr` type is the query type
    that denotes DNS zone transfer. The command to run a zone transfer would look
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, in our example the zone transfers fail, but it never hurts to
    try. Every now and then, you may come across a DNS server that has not been configured
    correctly to prevent this.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS servers by design take queries and provide address information. The `dnsrecon`
    script takes advantage of this function to enumerate a DNS server, revealing information
    about an organization's infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating DNS using the dnsenum command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to `dnsrecon`, `dnsenum` is a tool used for enumerating DNS information.
    The `dnsenum` script is a multithreaded Perl script written by Filip Waeytens
    for conducting DNS reconnaissance. It can be used to enumerate DNS information
    of a domain in order to find non-contiguous IP blocks. It not only helps discover
    non-contiguous IP blocks, but also provides several other types of information,
    such as the *A* record of the host's address, threaded nameservers, threaded MX
    record, and threaded *bind version*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `dnsenum` script comes preinstalled on Kali Linux. If you are using a different
    Linux/Unix distribution, it can be downloaded and installed from [https://github.com/fwaeytens/dnsenum](https://github.com/fwaeytens/dnsenum).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see usage information for the `dnsenum` command, run the following command
    from a Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../images/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Default settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we run `dnsenum` without any flags, it will be run with the default settings.
    Those default settings are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`thread 5` (as mentioned earlier, the script is multithreaded; this setting
    determines how many threads it will run with)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s 15` (this determines the maximum number of subdomains it will scrape from
    Google)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-w` (this flag tells the script to run `whois` queries)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../images/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Brute-force
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where the `dnsenum` command really shines is brute-forcing, which it does recursively.
    This means that when it identifies `subdomain.domain.com`, it will start brute-forcing
    `subdomain.subdomain.domain.com`. Obviously, this can take a while even though
    it is a multithreaded script.
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, we will use the `dnsenum` command to brute-force subdomains,
    but first, we need a list of subdomains for `dnsenum` to use. There is a very
    interesting project called **dnspop** that identifies top subdomains.
  prefs: []
  type: TYPE_NORMAL
- en: The project can be found here at [https://github.com/bitquark/dnspop](https://github.com/bitquark/dnspop).
    We do not need to download and install the Python script, as the results are also
    published at [https://github.com/bitquark/dnspop/tree/master/results](https://github.com/bitquark/dnspop/tree/master/results).
    I have downloaded the list with the top 1,000 most popular subdomains and placed
    it in the `/usr/share/wordlists/subdomains/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: I created the subdomains directory, naming it `subdomains_popular_1000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have a list of names `dnsenum` can use to brute-force with. The command
    to brute-force subdomains uses the file (`-f`) flag followed by the file path/name
    and, if you want, the recursive (`-r`) flag to enumerate the subdomains recursively.
    The command looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The aforementioned command does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the `dnsenum` command performs the default lookups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, `dnsenum` begins brute-forcing subdomains:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00435.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once it has completed brute-forcing the subdomains, it will begin brute-forcing
    recursively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../images/00509.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `dnsenum` command has many options that you can use with it, and this script
    will collect information or perform the action based to the selected option(s).
    Once you have enumerated a DNS, use the `–o` or `--output <file>` option to write
    the output to an XML file.
  prefs: []
  type: TYPE_NORMAL
